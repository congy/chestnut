// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_kandan_lg.proto

#include "proto_kandan_lg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PActivity_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PActivity_PChannelInActivity_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PActivity_PChannelInActivity_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PActivity_PChannelInActivity_PUserInChannel_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PActivity_PUserInActivity_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PActivity_PUserInActivity_PAttachmentsInUser_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PActivity_PUserInActivity_PChannelsInUser_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PAttachment_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PAttachment_PChannelInAttachment_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PAttachment_PChannelInAttachment_PActivitiesInChannel_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PAttachment_PChannelInAttachment_PUserInChannel_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PAttachment_PUserInAttachment_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PAttachment_PUserInAttachment_PActivitiesInUser_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PAttachment_PUserInAttachment_PChannelsInUser_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PChannel_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PChannel_PActivitiesInChannel_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PChannel_PActivitiesInChannel_PUserInActivity_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PChannel_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PChannel_PAttachmentsInChannel_PUserInAttachment_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PChannel_PUserInChannel_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PChannel_PUserInChannel_PActivitiesInUser_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PChannel_PUserInChannel_PAttachmentsInUser_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PUser_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PUser_PActivitiesInUser_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PUser_PActivitiesInUser_PChannelInActivity_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PUser_PAttachmentsInUser_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PUser_PAttachmentsInUser_PChannelInAttachment_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PUser_PChannelsInUser_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PUser_PChannelsInUser_PActivitiesInChannel_proto_5fkandan_5flg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fkandan_5flg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PUser_PChannelsInUser_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto;
namespace kandan_lg {
class PUser_PChannelsInUser_PActivitiesInChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PUser_PChannelsInUser_PActivitiesInChannel> _instance;
} _PUser_PChannelsInUser_PActivitiesInChannel_default_instance_;
class PUser_PChannelsInUser_PAttachmentsInChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PUser_PChannelsInUser_PAttachmentsInChannel> _instance;
} _PUser_PChannelsInUser_PAttachmentsInChannel_default_instance_;
class PUser_PChannelsInUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PUser_PChannelsInUser> _instance;
} _PUser_PChannelsInUser_default_instance_;
class PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel> _instance;
} _PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel_default_instance_;
class PUser_PActivitiesInUser_PChannelInActivityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PUser_PActivitiesInUser_PChannelInActivity> _instance;
} _PUser_PActivitiesInUser_PChannelInActivity_default_instance_;
class PUser_PActivitiesInUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PUser_PActivitiesInUser> _instance;
} _PUser_PActivitiesInUser_default_instance_;
class PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel> _instance;
} _PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel_default_instance_;
class PUser_PAttachmentsInUser_PChannelInAttachmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PUser_PAttachmentsInUser_PChannelInAttachment> _instance;
} _PUser_PAttachmentsInUser_PChannelInAttachment_default_instance_;
class PUser_PAttachmentsInUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PUser_PAttachmentsInUser> _instance;
} _PUser_PAttachmentsInUser_default_instance_;
class PUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PUser> _instance;
} _PUser_default_instance_;
class PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser> _instance;
} _PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser_default_instance_;
class PChannel_PActivitiesInChannel_PUserInActivityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PChannel_PActivitiesInChannel_PUserInActivity> _instance;
} _PChannel_PActivitiesInChannel_PUserInActivity_default_instance_;
class PChannel_PActivitiesInChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PChannel_PActivitiesInChannel> _instance;
} _PChannel_PActivitiesInChannel_default_instance_;
class PChannel_PUserInChannel_PActivitiesInUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PChannel_PUserInChannel_PActivitiesInUser> _instance;
} _PChannel_PUserInChannel_PActivitiesInUser_default_instance_;
class PChannel_PUserInChannel_PAttachmentsInUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PChannel_PUserInChannel_PAttachmentsInUser> _instance;
} _PChannel_PUserInChannel_PAttachmentsInUser_default_instance_;
class PChannel_PUserInChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PChannel_PUserInChannel> _instance;
} _PChannel_PUserInChannel_default_instance_;
class PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser> _instance;
} _PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser_default_instance_;
class PChannel_PAttachmentsInChannel_PUserInAttachmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PChannel_PAttachmentsInChannel_PUserInAttachment> _instance;
} _PChannel_PAttachmentsInChannel_PUserInAttachment_default_instance_;
class PChannel_PAttachmentsInChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PChannel_PAttachmentsInChannel> _instance;
} _PChannel_PAttachmentsInChannel_default_instance_;
class PChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PChannel> _instance;
} _PChannel_default_instance_;
class PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser> _instance;
} _PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser_default_instance_;
class PActivity_PChannelInActivity_PUserInChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PActivity_PChannelInActivity_PUserInChannel> _instance;
} _PActivity_PChannelInActivity_PUserInChannel_default_instance_;
class PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment> _instance;
} _PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment_default_instance_;
class PActivity_PChannelInActivity_PAttachmentsInChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PActivity_PChannelInActivity_PAttachmentsInChannel> _instance;
} _PActivity_PChannelInActivity_PAttachmentsInChannel_default_instance_;
class PActivity_PChannelInActivityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PActivity_PChannelInActivity> _instance;
} _PActivity_PChannelInActivity_default_instance_;
class PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel> _instance;
} _PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel_default_instance_;
class PActivity_PUserInActivity_PChannelsInUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PActivity_PUserInActivity_PChannelsInUser> _instance;
} _PActivity_PUserInActivity_PChannelsInUser_default_instance_;
class PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment> _instance;
} _PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment_default_instance_;
class PActivity_PUserInActivity_PAttachmentsInUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PActivity_PUserInActivity_PAttachmentsInUser> _instance;
} _PActivity_PUserInActivity_PAttachmentsInUser_default_instance_;
class PActivity_PUserInActivityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PActivity_PUserInActivity> _instance;
} _PActivity_PUserInActivity_default_instance_;
class PActivityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PActivity> _instance;
} _PActivity_default_instance_;
class PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel> _instance;
} _PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel_default_instance_;
class PAttachment_PUserInAttachment_PChannelsInUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PAttachment_PUserInAttachment_PChannelsInUser> _instance;
} _PAttachment_PUserInAttachment_PChannelsInUser_default_instance_;
class PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity> _instance;
} _PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity_default_instance_;
class PAttachment_PUserInAttachment_PActivitiesInUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PAttachment_PUserInAttachment_PActivitiesInUser> _instance;
} _PAttachment_PUserInAttachment_PActivitiesInUser_default_instance_;
class PAttachment_PUserInAttachmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PAttachment_PUserInAttachment> _instance;
} _PAttachment_PUserInAttachment_default_instance_;
class PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity> _instance;
} _PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity_default_instance_;
class PAttachment_PChannelInAttachment_PActivitiesInChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PAttachment_PChannelInAttachment_PActivitiesInChannel> _instance;
} _PAttachment_PChannelInAttachment_PActivitiesInChannel_default_instance_;
class PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser> _instance;
} _PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser_default_instance_;
class PAttachment_PChannelInAttachment_PUserInChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PAttachment_PChannelInAttachment_PUserInChannel> _instance;
} _PAttachment_PChannelInAttachment_PUserInChannel_default_instance_;
class PAttachment_PChannelInAttachmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PAttachment_PChannelInAttachment> _instance;
} _PAttachment_PChannelInAttachment_default_instance_;
class PAttachmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PAttachment> _instance;
} _PAttachment_default_instance_;
class PUserListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PUserList> _instance;
} _PUserList_default_instance_;
class PChannelListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PChannelList> _instance;
} _PChannelList_default_instance_;
class PActivityListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PActivityList> _instance;
} _PActivityList_default_instance_;
class PAttachmentListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PAttachmentList> _instance;
} _PAttachmentList_default_instance_;
class QueryParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryParam> _instance;
} _QueryParam_default_instance_;
}  // namespace kandan_lg
static void InitDefaultsscc_info_PActivity_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PActivity_default_instance_;
    new (ptr) ::kandan_lg::PActivity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PActivity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PActivity_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PActivity_proto_5fkandan_5flg_2eproto}, {
      &scc_info_PActivity_PChannelInActivity_proto_5fkandan_5flg_2eproto.base,
      &scc_info_PActivity_PUserInActivity_proto_5fkandan_5flg_2eproto.base,}};

static void InitDefaultsscc_info_PActivity_PChannelInActivity_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PActivity_PChannelInActivity_default_instance_;
    new (ptr) ::kandan_lg::PActivity_PChannelInActivity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PActivity_PChannelInActivity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PActivity_PChannelInActivity_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PActivity_PChannelInActivity_proto_5fkandan_5flg_2eproto}, {
      &scc_info_PActivity_PChannelInActivity_PUserInChannel_proto_5fkandan_5flg_2eproto.base,
      &scc_info_PActivity_PChannelInActivity_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto.base,}};

static void InitDefaultsscc_info_PActivity_PChannelInActivity_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PActivity_PChannelInActivity_PAttachmentsInChannel_default_instance_;
    new (ptr) ::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PActivity_PChannelInActivity_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PActivity_PChannelInActivity_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto}, {
      &scc_info_PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment_proto_5fkandan_5flg_2eproto.base,}};

static void InitDefaultsscc_info_PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment_default_instance_;
    new (ptr) ::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment_proto_5fkandan_5flg_2eproto}, {}};

static void InitDefaultsscc_info_PActivity_PChannelInActivity_PUserInChannel_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PActivity_PChannelInActivity_PUserInChannel_default_instance_;
    new (ptr) ::kandan_lg::PActivity_PChannelInActivity_PUserInChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PActivity_PChannelInActivity_PUserInChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PActivity_PChannelInActivity_PUserInChannel_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PActivity_PChannelInActivity_PUserInChannel_proto_5fkandan_5flg_2eproto}, {
      &scc_info_PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser_proto_5fkandan_5flg_2eproto.base,}};

static void InitDefaultsscc_info_PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser_default_instance_;
    new (ptr) ::kandan_lg::PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser_proto_5fkandan_5flg_2eproto}, {}};

static void InitDefaultsscc_info_PActivity_PUserInActivity_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PActivity_PUserInActivity_default_instance_;
    new (ptr) ::kandan_lg::PActivity_PUserInActivity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PActivity_PUserInActivity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PActivity_PUserInActivity_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PActivity_PUserInActivity_proto_5fkandan_5flg_2eproto}, {
      &scc_info_PActivity_PUserInActivity_PChannelsInUser_proto_5fkandan_5flg_2eproto.base,
      &scc_info_PActivity_PUserInActivity_PAttachmentsInUser_proto_5fkandan_5flg_2eproto.base,}};

static void InitDefaultsscc_info_PActivity_PUserInActivity_PAttachmentsInUser_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PActivity_PUserInActivity_PAttachmentsInUser_default_instance_;
    new (ptr) ::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PActivity_PUserInActivity_PAttachmentsInUser_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PActivity_PUserInActivity_PAttachmentsInUser_proto_5fkandan_5flg_2eproto}, {
      &scc_info_PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment_proto_5fkandan_5flg_2eproto.base,}};

static void InitDefaultsscc_info_PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment_default_instance_;
    new (ptr) ::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment_proto_5fkandan_5flg_2eproto}, {}};

static void InitDefaultsscc_info_PActivity_PUserInActivity_PChannelsInUser_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PActivity_PUserInActivity_PChannelsInUser_default_instance_;
    new (ptr) ::kandan_lg::PActivity_PUserInActivity_PChannelsInUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PActivity_PUserInActivity_PChannelsInUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PActivity_PUserInActivity_PChannelsInUser_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PActivity_PUserInActivity_PChannelsInUser_proto_5fkandan_5flg_2eproto}, {
      &scc_info_PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto.base,}};

static void InitDefaultsscc_info_PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel_default_instance_;
    new (ptr) ::kandan_lg::PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto}, {}};

static void InitDefaultsscc_info_PActivityList_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PActivityList_default_instance_;
    new (ptr) ::kandan_lg::PActivityList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PActivityList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PActivityList_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PActivityList_proto_5fkandan_5flg_2eproto}, {
      &scc_info_PActivity_proto_5fkandan_5flg_2eproto.base,}};

static void InitDefaultsscc_info_PAttachment_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PAttachment_default_instance_;
    new (ptr) ::kandan_lg::PAttachment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PAttachment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PAttachment_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PAttachment_proto_5fkandan_5flg_2eproto}, {
      &scc_info_PAttachment_PUserInAttachment_proto_5fkandan_5flg_2eproto.base,
      &scc_info_PAttachment_PChannelInAttachment_proto_5fkandan_5flg_2eproto.base,}};

static void InitDefaultsscc_info_PAttachment_PChannelInAttachment_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PAttachment_PChannelInAttachment_default_instance_;
    new (ptr) ::kandan_lg::PAttachment_PChannelInAttachment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PAttachment_PChannelInAttachment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PAttachment_PChannelInAttachment_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PAttachment_PChannelInAttachment_proto_5fkandan_5flg_2eproto}, {
      &scc_info_PAttachment_PChannelInAttachment_PActivitiesInChannel_proto_5fkandan_5flg_2eproto.base,
      &scc_info_PAttachment_PChannelInAttachment_PUserInChannel_proto_5fkandan_5flg_2eproto.base,}};

static void InitDefaultsscc_info_PAttachment_PChannelInAttachment_PActivitiesInChannel_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PAttachment_PChannelInAttachment_PActivitiesInChannel_default_instance_;
    new (ptr) ::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PAttachment_PChannelInAttachment_PActivitiesInChannel_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PAttachment_PChannelInAttachment_PActivitiesInChannel_proto_5fkandan_5flg_2eproto}, {
      &scc_info_PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity_proto_5fkandan_5flg_2eproto.base,}};

static void InitDefaultsscc_info_PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity_default_instance_;
    new (ptr) ::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity_proto_5fkandan_5flg_2eproto}, {}};

static void InitDefaultsscc_info_PAttachment_PChannelInAttachment_PUserInChannel_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PAttachment_PChannelInAttachment_PUserInChannel_default_instance_;
    new (ptr) ::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PAttachment_PChannelInAttachment_PUserInChannel_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PAttachment_PChannelInAttachment_PUserInChannel_proto_5fkandan_5flg_2eproto}, {
      &scc_info_PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser_proto_5fkandan_5flg_2eproto.base,}};

static void InitDefaultsscc_info_PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser_default_instance_;
    new (ptr) ::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser_proto_5fkandan_5flg_2eproto}, {}};

static void InitDefaultsscc_info_PAttachment_PUserInAttachment_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PAttachment_PUserInAttachment_default_instance_;
    new (ptr) ::kandan_lg::PAttachment_PUserInAttachment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PAttachment_PUserInAttachment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PAttachment_PUserInAttachment_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PAttachment_PUserInAttachment_proto_5fkandan_5flg_2eproto}, {
      &scc_info_PAttachment_PUserInAttachment_PChannelsInUser_proto_5fkandan_5flg_2eproto.base,
      &scc_info_PAttachment_PUserInAttachment_PActivitiesInUser_proto_5fkandan_5flg_2eproto.base,}};

static void InitDefaultsscc_info_PAttachment_PUserInAttachment_PActivitiesInUser_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PAttachment_PUserInAttachment_PActivitiesInUser_default_instance_;
    new (ptr) ::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PAttachment_PUserInAttachment_PActivitiesInUser_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PAttachment_PUserInAttachment_PActivitiesInUser_proto_5fkandan_5flg_2eproto}, {
      &scc_info_PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity_proto_5fkandan_5flg_2eproto.base,}};

static void InitDefaultsscc_info_PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity_default_instance_;
    new (ptr) ::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity_proto_5fkandan_5flg_2eproto}, {}};

static void InitDefaultsscc_info_PAttachment_PUserInAttachment_PChannelsInUser_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PAttachment_PUserInAttachment_PChannelsInUser_default_instance_;
    new (ptr) ::kandan_lg::PAttachment_PUserInAttachment_PChannelsInUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PAttachment_PUserInAttachment_PChannelsInUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PAttachment_PUserInAttachment_PChannelsInUser_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PAttachment_PUserInAttachment_PChannelsInUser_proto_5fkandan_5flg_2eproto}, {
      &scc_info_PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel_proto_5fkandan_5flg_2eproto.base,}};

static void InitDefaultsscc_info_PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel_default_instance_;
    new (ptr) ::kandan_lg::PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel_proto_5fkandan_5flg_2eproto}, {}};

static void InitDefaultsscc_info_PAttachmentList_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PAttachmentList_default_instance_;
    new (ptr) ::kandan_lg::PAttachmentList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PAttachmentList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PAttachmentList_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PAttachmentList_proto_5fkandan_5flg_2eproto}, {
      &scc_info_PAttachment_proto_5fkandan_5flg_2eproto.base,}};

static void InitDefaultsscc_info_PChannel_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PChannel_default_instance_;
    new (ptr) ::kandan_lg::PChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PChannel_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PChannel_proto_5fkandan_5flg_2eproto}, {
      &scc_info_PChannel_PActivitiesInChannel_proto_5fkandan_5flg_2eproto.base,
      &scc_info_PChannel_PUserInChannel_proto_5fkandan_5flg_2eproto.base,
      &scc_info_PChannel_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto.base,}};

static void InitDefaultsscc_info_PChannel_PActivitiesInChannel_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PChannel_PActivitiesInChannel_default_instance_;
    new (ptr) ::kandan_lg::PChannel_PActivitiesInChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PChannel_PActivitiesInChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PChannel_PActivitiesInChannel_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PChannel_PActivitiesInChannel_proto_5fkandan_5flg_2eproto}, {
      &scc_info_PChannel_PActivitiesInChannel_PUserInActivity_proto_5fkandan_5flg_2eproto.base,}};

static void InitDefaultsscc_info_PChannel_PActivitiesInChannel_PUserInActivity_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PChannel_PActivitiesInChannel_PUserInActivity_default_instance_;
    new (ptr) ::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PChannel_PActivitiesInChannel_PUserInActivity_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PChannel_PActivitiesInChannel_PUserInActivity_proto_5fkandan_5flg_2eproto}, {
      &scc_info_PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser_proto_5fkandan_5flg_2eproto.base,}};

static void InitDefaultsscc_info_PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser_default_instance_;
    new (ptr) ::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser_proto_5fkandan_5flg_2eproto}, {}};

static void InitDefaultsscc_info_PChannel_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PChannel_PAttachmentsInChannel_default_instance_;
    new (ptr) ::kandan_lg::PChannel_PAttachmentsInChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PChannel_PAttachmentsInChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PChannel_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PChannel_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto}, {
      &scc_info_PChannel_PAttachmentsInChannel_PUserInAttachment_proto_5fkandan_5flg_2eproto.base,}};

static void InitDefaultsscc_info_PChannel_PAttachmentsInChannel_PUserInAttachment_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PChannel_PAttachmentsInChannel_PUserInAttachment_default_instance_;
    new (ptr) ::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PChannel_PAttachmentsInChannel_PUserInAttachment_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PChannel_PAttachmentsInChannel_PUserInAttachment_proto_5fkandan_5flg_2eproto}, {
      &scc_info_PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser_proto_5fkandan_5flg_2eproto.base,}};

static void InitDefaultsscc_info_PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser_default_instance_;
    new (ptr) ::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser_proto_5fkandan_5flg_2eproto}, {}};

static void InitDefaultsscc_info_PChannel_PUserInChannel_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PChannel_PUserInChannel_default_instance_;
    new (ptr) ::kandan_lg::PChannel_PUserInChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PChannel_PUserInChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PChannel_PUserInChannel_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PChannel_PUserInChannel_proto_5fkandan_5flg_2eproto}, {
      &scc_info_PChannel_PUserInChannel_PActivitiesInUser_proto_5fkandan_5flg_2eproto.base,
      &scc_info_PChannel_PUserInChannel_PAttachmentsInUser_proto_5fkandan_5flg_2eproto.base,}};

static void InitDefaultsscc_info_PChannel_PUserInChannel_PActivitiesInUser_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PChannel_PUserInChannel_PActivitiesInUser_default_instance_;
    new (ptr) ::kandan_lg::PChannel_PUserInChannel_PActivitiesInUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PChannel_PUserInChannel_PActivitiesInUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PChannel_PUserInChannel_PActivitiesInUser_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PChannel_PUserInChannel_PActivitiesInUser_proto_5fkandan_5flg_2eproto}, {}};

static void InitDefaultsscc_info_PChannel_PUserInChannel_PAttachmentsInUser_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PChannel_PUserInChannel_PAttachmentsInUser_default_instance_;
    new (ptr) ::kandan_lg::PChannel_PUserInChannel_PAttachmentsInUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PChannel_PUserInChannel_PAttachmentsInUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PChannel_PUserInChannel_PAttachmentsInUser_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PChannel_PUserInChannel_PAttachmentsInUser_proto_5fkandan_5flg_2eproto}, {}};

static void InitDefaultsscc_info_PChannelList_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PChannelList_default_instance_;
    new (ptr) ::kandan_lg::PChannelList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PChannelList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PChannelList_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PChannelList_proto_5fkandan_5flg_2eproto}, {
      &scc_info_PChannel_proto_5fkandan_5flg_2eproto.base,}};

static void InitDefaultsscc_info_PUser_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PUser_default_instance_;
    new (ptr) ::kandan_lg::PUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PUser_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PUser_proto_5fkandan_5flg_2eproto}, {
      &scc_info_PUser_PChannelsInUser_proto_5fkandan_5flg_2eproto.base,
      &scc_info_PUser_PActivitiesInUser_proto_5fkandan_5flg_2eproto.base,
      &scc_info_PUser_PAttachmentsInUser_proto_5fkandan_5flg_2eproto.base,}};

static void InitDefaultsscc_info_PUser_PActivitiesInUser_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PUser_PActivitiesInUser_default_instance_;
    new (ptr) ::kandan_lg::PUser_PActivitiesInUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PUser_PActivitiesInUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PUser_PActivitiesInUser_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PUser_PActivitiesInUser_proto_5fkandan_5flg_2eproto}, {
      &scc_info_PUser_PActivitiesInUser_PChannelInActivity_proto_5fkandan_5flg_2eproto.base,}};

static void InitDefaultsscc_info_PUser_PActivitiesInUser_PChannelInActivity_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PUser_PActivitiesInUser_PChannelInActivity_default_instance_;
    new (ptr) ::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PUser_PActivitiesInUser_PChannelInActivity_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PUser_PActivitiesInUser_PChannelInActivity_proto_5fkandan_5flg_2eproto}, {
      &scc_info_PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto.base,}};

static void InitDefaultsscc_info_PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel_default_instance_;
    new (ptr) ::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto}, {}};

static void InitDefaultsscc_info_PUser_PAttachmentsInUser_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PUser_PAttachmentsInUser_default_instance_;
    new (ptr) ::kandan_lg::PUser_PAttachmentsInUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PUser_PAttachmentsInUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PUser_PAttachmentsInUser_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PUser_PAttachmentsInUser_proto_5fkandan_5flg_2eproto}, {
      &scc_info_PUser_PAttachmentsInUser_PChannelInAttachment_proto_5fkandan_5flg_2eproto.base,}};

static void InitDefaultsscc_info_PUser_PAttachmentsInUser_PChannelInAttachment_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PUser_PAttachmentsInUser_PChannelInAttachment_default_instance_;
    new (ptr) ::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PUser_PAttachmentsInUser_PChannelInAttachment_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PUser_PAttachmentsInUser_PChannelInAttachment_proto_5fkandan_5flg_2eproto}, {
      &scc_info_PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel_proto_5fkandan_5flg_2eproto.base,}};

static void InitDefaultsscc_info_PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel_default_instance_;
    new (ptr) ::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel_proto_5fkandan_5flg_2eproto}, {}};

static void InitDefaultsscc_info_PUser_PChannelsInUser_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PUser_PChannelsInUser_default_instance_;
    new (ptr) ::kandan_lg::PUser_PChannelsInUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PUser_PChannelsInUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PUser_PChannelsInUser_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PUser_PChannelsInUser_proto_5fkandan_5flg_2eproto}, {
      &scc_info_PUser_PChannelsInUser_PActivitiesInChannel_proto_5fkandan_5flg_2eproto.base,
      &scc_info_PUser_PChannelsInUser_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto.base,}};

static void InitDefaultsscc_info_PUser_PChannelsInUser_PActivitiesInChannel_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PUser_PChannelsInUser_PActivitiesInChannel_default_instance_;
    new (ptr) ::kandan_lg::PUser_PChannelsInUser_PActivitiesInChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PUser_PChannelsInUser_PActivitiesInChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PUser_PChannelsInUser_PActivitiesInChannel_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PUser_PChannelsInUser_PActivitiesInChannel_proto_5fkandan_5flg_2eproto}, {}};

static void InitDefaultsscc_info_PUser_PChannelsInUser_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PUser_PChannelsInUser_PAttachmentsInChannel_default_instance_;
    new (ptr) ::kandan_lg::PUser_PChannelsInUser_PAttachmentsInChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PUser_PChannelsInUser_PAttachmentsInChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PUser_PChannelsInUser_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PUser_PChannelsInUser_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto}, {}};

static void InitDefaultsscc_info_PUserList_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_PUserList_default_instance_;
    new (ptr) ::kandan_lg::PUserList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::PUserList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PUserList_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PUserList_proto_5fkandan_5flg_2eproto}, {
      &scc_info_PUser_proto_5fkandan_5flg_2eproto.base,}};

static void InitDefaultsscc_info_QueryParam_proto_5fkandan_5flg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kandan_lg::_QueryParam_default_instance_;
    new (ptr) ::kandan_lg::QueryParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kandan_lg::QueryParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryParam_proto_5fkandan_5flg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryParam_proto_5fkandan_5flg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_5fkandan_5flg_2eproto[47];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_5fkandan_5flg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_5fkandan_5flg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_5fkandan_5flg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PChannelsInUser_PActivitiesInChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PChannelsInUser_PActivitiesInChannel, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PChannelsInUser_PActivitiesInChannel, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PChannelsInUser_PActivitiesInChannel, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PChannelsInUser_PActivitiesInChannel, action_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PChannelsInUser_PActivitiesInChannel, content_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PChannelsInUser_PActivitiesInChannel, channel_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PChannelsInUser_PActivitiesInChannel, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PChannelsInUser_PAttachmentsInChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PChannelsInUser_PAttachmentsInChannel, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PChannelsInUser_PAttachmentsInChannel, file_file_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PChannelsInUser_PAttachmentsInChannel, file_content_type_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PChannelsInUser_PAttachmentsInChannel, file_file_size_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PChannelsInUser_PAttachmentsInChannel, message_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PChannelsInUser_PAttachmentsInChannel, file_updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PChannelsInUser_PAttachmentsInChannel, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PChannelsInUser_PAttachmentsInChannel, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PChannelsInUser_PAttachmentsInChannel, user_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PChannelsInUser_PAttachmentsInChannel, channel_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PChannelsInUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PChannelsInUser, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PChannelsInUser, name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PChannelsInUser, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PChannelsInUser, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PChannelsInUser, user_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PChannelsInUser, count_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PChannelsInUser, activities_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PChannelsInUser, attachments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel, file_file_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel, file_content_type_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel, file_file_size_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel, message_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel, file_updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel, user_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel, channel_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity, name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity, user_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity, count_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity, attachments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PActivitiesInUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PActivitiesInUser, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PActivitiesInUser, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PActivitiesInUser, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PActivitiesInUser, action_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PActivitiesInUser, content_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PActivitiesInUser, channel_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PActivitiesInUser, user_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PActivitiesInUser, channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel, action_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel, content_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel, channel_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment, name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment, user_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment, count_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment, activities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PAttachmentsInUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PAttachmentsInUser, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PAttachmentsInUser, file_file_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PAttachmentsInUser, file_content_type_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PAttachmentsInUser, file_file_size_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PAttachmentsInUser, message_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PAttachmentsInUser, file_updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PAttachmentsInUser, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PAttachmentsInUser, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PAttachmentsInUser, user_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PAttachmentsInUser, channel_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser_PAttachmentsInUser, channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser, email_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser, encrypted_password_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser, reset_password_token_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser, reset_password_sent_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser, remember_created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser, first_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser, last_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser, signin_count_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser, current_sign_in_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser, current_sign_in_ip_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser, last_sign_in_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser, last_sign_in_ip_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser, auth_token_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser, locale_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser, gravatar_hash_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser, username_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser, regstatus_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser, active_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser, is_admin_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser, avatar_url_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser, channels_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser, activities_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUser, attachments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser, file_file_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser, file_content_type_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser, file_file_size_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser, message_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser, file_updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser, user_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser, channel_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity, email_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity, encrypted_password_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity, reset_password_token_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity, reset_password_sent_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity, remember_created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity, first_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity, last_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity, signin_count_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity, current_sign_in_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity, current_sign_in_ip_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity, last_sign_in_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity, last_sign_in_ip_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity, auth_token_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity, locale_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity, gravatar_hash_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity, username_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity, regstatus_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity, active_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity, is_admin_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity, avatar_url_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity, attachments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel, action_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel, content_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel, channel_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel, user_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PActivitiesInChannel, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel_PActivitiesInUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel_PActivitiesInUser, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel_PActivitiesInUser, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel_PActivitiesInUser, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel_PActivitiesInUser, action_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel_PActivitiesInUser, content_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel_PActivitiesInUser, channel_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel_PActivitiesInUser, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel_PAttachmentsInUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel_PAttachmentsInUser, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel_PAttachmentsInUser, file_file_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel_PAttachmentsInUser, file_content_type_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel_PAttachmentsInUser, file_file_size_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel_PAttachmentsInUser, message_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel_PAttachmentsInUser, file_updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel_PAttachmentsInUser, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel_PAttachmentsInUser, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel_PAttachmentsInUser, user_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel_PAttachmentsInUser, channel_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel, email_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel, encrypted_password_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel, reset_password_token_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel, reset_password_sent_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel, remember_created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel, first_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel, last_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel, signin_count_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel, current_sign_in_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel, current_sign_in_ip_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel, last_sign_in_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel, last_sign_in_ip_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel, auth_token_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel, locale_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel, gravatar_hash_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel, username_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel, regstatus_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel, active_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel, is_admin_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel, avatar_url_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel, activities_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PUserInChannel, attachments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser, action_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser, content_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser, channel_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment, email_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment, encrypted_password_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment, reset_password_token_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment, reset_password_sent_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment, remember_created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment, first_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment, last_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment, signin_count_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment, current_sign_in_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment, current_sign_in_ip_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment, last_sign_in_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment, last_sign_in_ip_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment, auth_token_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment, locale_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment, gravatar_hash_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment, username_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment, regstatus_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment, active_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment, is_admin_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment, avatar_url_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment, activities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel, file_file_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel, file_content_type_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel, file_file_size_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel, message_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel, file_updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel, user_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel, channel_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel_PAttachmentsInChannel, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel, name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel, user_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel, count_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel, activities_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel, user_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannel, attachments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser, file_file_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser, file_content_type_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser, file_file_size_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser, message_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser, file_updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser, user_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser, channel_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel, email_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel, encrypted_password_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel, reset_password_token_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel, reset_password_sent_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel, remember_created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel, first_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel, last_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel, signin_count_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel, current_sign_in_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel, current_sign_in_ip_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel, last_sign_in_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel, last_sign_in_ip_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel, auth_token_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel, locale_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel, gravatar_hash_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel, username_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel, regstatus_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel, active_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel, is_admin_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel, avatar_url_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel, attachments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment, email_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment, encrypted_password_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment, reset_password_token_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment, reset_password_sent_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment, remember_created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment, first_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment, last_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment, signin_count_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment, current_sign_in_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment, current_sign_in_ip_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment, last_sign_in_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment, last_sign_in_ip_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment, auth_token_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment, locale_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment, gravatar_hash_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment, username_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment, regstatus_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment, active_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment, is_admin_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment, avatar_url_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment, updated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel, file_file_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel, file_content_type_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel, file_file_size_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel, message_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel, file_updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel, user_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel, channel_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity, name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity, user_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity, count_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity, user_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PChannelInActivity, attachments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel, file_file_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel, file_content_type_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel, file_file_size_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel, message_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel, file_updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel, user_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel, channel_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PChannelsInUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PChannelsInUser, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PChannelsInUser, name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PChannelsInUser, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PChannelsInUser, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PChannelsInUser, user_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PChannelsInUser, count_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PChannelsInUser, attachments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment, name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment, user_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser, file_file_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser, file_content_type_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser, file_file_size_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser, message_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser, file_updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser, user_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser, channel_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser, channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity, email_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity, encrypted_password_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity, reset_password_token_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity, reset_password_sent_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity, remember_created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity, first_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity, last_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity, signin_count_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity, current_sign_in_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity, current_sign_in_ip_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity, last_sign_in_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity, last_sign_in_ip_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity, auth_token_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity, locale_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity, gravatar_hash_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity, username_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity, regstatus_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity, active_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity, is_admin_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity, avatar_url_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity, channels_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity_PUserInActivity, attachments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity, action_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity, content_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity, channel_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity, user_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity, channel_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivity, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel, action_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel, content_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel, channel_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PChannelsInUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PChannelsInUser, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PChannelsInUser, name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PChannelsInUser, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PChannelsInUser, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PChannelsInUser, user_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PChannelsInUser, count_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PChannelsInUser, activities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity, name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity, user_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser, action_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser, content_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser, channel_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser, user_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser, channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment, email_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment, encrypted_password_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment, reset_password_token_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment, reset_password_sent_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment, remember_created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment, first_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment, last_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment, signin_count_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment, current_sign_in_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment, current_sign_in_ip_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment, last_sign_in_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment, last_sign_in_ip_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment, auth_token_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment, locale_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment, gravatar_hash_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment, username_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment, regstatus_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment, active_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment, is_admin_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment, avatar_url_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment, channels_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PUserInAttachment, activities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity, email_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity, encrypted_password_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity, reset_password_token_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity, reset_password_sent_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity, remember_created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity, first_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity, last_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity, signin_count_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity, current_sign_in_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity, current_sign_in_ip_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity, last_sign_in_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity, last_sign_in_ip_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity, auth_token_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity, locale_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity, gravatar_hash_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity, username_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity, regstatus_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity, active_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity, is_admin_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity, avatar_url_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity, updated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel, action_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel, content_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel, channel_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel, user_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser, action_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser, content_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser, channel_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel, email_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel, encrypted_password_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel, reset_password_token_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel, reset_password_sent_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel, remember_created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel, first_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel, last_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel, signin_count_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel, current_sign_in_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel, current_sign_in_ip_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel, last_sign_in_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel, last_sign_in_ip_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel, auth_token_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel, locale_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel, gravatar_hash_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel, username_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel, regstatus_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel, active_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel, is_admin_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel, avatar_url_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel, activities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment, name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment, user_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment, count_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment, activities_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment_PChannelInAttachment, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment, id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment, file_file_name_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment, file_content_type_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment, file_file_size_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment, message_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment, file_updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment, created_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment, updated_at_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment, user_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment, channel_id_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment, user_),
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachment, channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUserList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PUserList, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannelList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PChannelList, channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivityList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PActivityList, activity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachmentList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::PAttachmentList, attachment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::QueryParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kandan_lg::QueryParam, query_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kandan_lg::PUser_PChannelsInUser_PActivitiesInChannel)},
  { 12, -1, sizeof(::kandan_lg::PUser_PChannelsInUser_PAttachmentsInChannel)},
  { 27, -1, sizeof(::kandan_lg::PUser_PChannelsInUser)},
  { 40, -1, sizeof(::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel)},
  { 55, -1, sizeof(::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity)},
  { 67, -1, sizeof(::kandan_lg::PUser_PActivitiesInUser)},
  { 80, -1, sizeof(::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel)},
  { 92, -1, sizeof(::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment)},
  { 104, -1, sizeof(::kandan_lg::PUser_PAttachmentsInUser)},
  { 120, -1, sizeof(::kandan_lg::PUser)},
  { 151, -1, sizeof(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser)},
  { 166, -1, sizeof(::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity)},
  { 195, -1, sizeof(::kandan_lg::PChannel_PActivitiesInChannel)},
  { 208, -1, sizeof(::kandan_lg::PChannel_PUserInChannel_PActivitiesInUser)},
  { 220, -1, sizeof(::kandan_lg::PChannel_PUserInChannel_PAttachmentsInUser)},
  { 235, -1, sizeof(::kandan_lg::PChannel_PUserInChannel)},
  { 265, -1, sizeof(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser)},
  { 277, -1, sizeof(::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment)},
  { 306, -1, sizeof(::kandan_lg::PChannel_PAttachmentsInChannel)},
  { 322, -1, sizeof(::kandan_lg::PChannel)},
  { 336, -1, sizeof(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser)},
  { 351, -1, sizeof(::kandan_lg::PActivity_PChannelInActivity_PUserInChannel)},
  { 380, -1, sizeof(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment)},
  { 408, -1, sizeof(::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel)},
  { 424, -1, sizeof(::kandan_lg::PActivity_PChannelInActivity)},
  { 437, -1, sizeof(::kandan_lg::PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel)},
  { 452, -1, sizeof(::kandan_lg::PActivity_PUserInActivity_PChannelsInUser)},
  { 464, -1, sizeof(::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment)},
  { 475, -1, sizeof(::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser)},
  { 491, -1, sizeof(::kandan_lg::PActivity_PUserInActivity)},
  { 521, -1, sizeof(::kandan_lg::PActivity)},
  { 535, -1, sizeof(::kandan_lg::PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel)},
  { 547, -1, sizeof(::kandan_lg::PAttachment_PUserInAttachment_PChannelsInUser)},
  { 559, -1, sizeof(::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity)},
  { 570, -1, sizeof(::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser)},
  { 583, -1, sizeof(::kandan_lg::PAttachment_PUserInAttachment)},
  { 613, -1, sizeof(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity)},
  { 641, -1, sizeof(::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel)},
  { 654, -1, sizeof(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser)},
  { 666, -1, sizeof(::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel)},
  { 695, -1, sizeof(::kandan_lg::PAttachment_PChannelInAttachment)},
  { 708, -1, sizeof(::kandan_lg::PAttachment)},
  { 725, -1, sizeof(::kandan_lg::PUserList)},
  { 731, -1, sizeof(::kandan_lg::PChannelList)},
  { 737, -1, sizeof(::kandan_lg::PActivityList)},
  { 743, -1, sizeof(::kandan_lg::PAttachmentList)},
  { 749, -1, sizeof(::kandan_lg::QueryParam)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PUser_PChannelsInUser_PActivitiesInChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PUser_PChannelsInUser_PAttachmentsInChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PUser_PChannelsInUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PUser_PActivitiesInUser_PChannelInActivity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PUser_PActivitiesInUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PUser_PAttachmentsInUser_PChannelInAttachment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PUser_PAttachmentsInUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PChannel_PActivitiesInChannel_PUserInActivity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PChannel_PActivitiesInChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PChannel_PUserInChannel_PActivitiesInUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PChannel_PUserInChannel_PAttachmentsInUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PChannel_PUserInChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PChannel_PAttachmentsInChannel_PUserInAttachment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PChannel_PAttachmentsInChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PActivity_PChannelInActivity_PUserInChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PActivity_PChannelInActivity_PAttachmentsInChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PActivity_PChannelInActivity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PActivity_PUserInActivity_PChannelsInUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PActivity_PUserInActivity_PAttachmentsInUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PActivity_PUserInActivity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PActivity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PAttachment_PUserInAttachment_PChannelsInUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PAttachment_PUserInAttachment_PActivitiesInUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PAttachment_PUserInAttachment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PAttachment_PChannelInAttachment_PActivitiesInChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PAttachment_PChannelInAttachment_PUserInChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PAttachment_PChannelInAttachment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PAttachment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PUserList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PChannelList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PActivityList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_PAttachmentList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kandan_lg::_QueryParam_default_instance_),
};

const char descriptor_table_protodef_proto_5fkandan_5flg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025proto_kandan_lg.proto\022\tkandan_lg\"\362\024\n\005P"
  "User\022\n\n\002id\030\001 \001(\r\022\r\n\005email\030\002 \001(\t\022\032\n\022encry"
  "pted_password\030\003 \001(\t\022\034\n\024reset_password_to"
  "ken\030\004 \001(\t\022\036\n\026reset_password_sent_at\030\005 \001("
  "\r\022\033\n\023remember_created_at\030\006 \001(\r\022\022\n\nfirst_"
  "name\030\007 \001(\t\022\021\n\tlast_name\030\010 \001(\t\022\024\n\014signin_"
  "count\030\t \001(\r\022\032\n\022current_sign_in_at\030\n \001(\r\022"
  "\032\n\022current_sign_in_ip\030\013 \001(\t\022\027\n\017last_sign"
  "_in_at\030\014 \001(\r\022\027\n\017last_sign_in_ip\030\r \001(\t\022\022\n"
  "\nauth_token\030\016 \001(\t\022\016\n\006locale\030\017 \001(\t\022\025\n\rgra"
  "vatar_hash\030\020 \001(\t\022\020\n\010username\030\021 \001(\t\022\021\n\tre"
  "gstatus\030\022 \001(\t\022\016\n\006active\030\023 \001(\010\022\020\n\010is_admi"
  "n\030\024 \001(\010\022\022\n\navatar_url\030\025 \001(\t\022\022\n\ncreated_a"
  "t\030\026 \001(\r\022\022\n\nupdated_at\030\027 \001(\r\0222\n\010channels\030"
  "\030 \003(\0132 .kandan_lg.PUser.PChannelsInUser\022"
  "6\n\nactivities\030\031 \003(\0132\".kandan_lg.PUser.PA"
  "ctivitiesInUser\0228\n\013attachments\030\032 \003(\0132#.k"
  "andan_lg.PUser.PAttachmentsInUser\032\211\005\n\017PC"
  "hannelsInUser\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022"
  "\022\n\ncreated_at\030\003 \001(\r\022\022\n\nupdated_at\030\004 \001(\r\022"
  "\017\n\007user_id\030\005 \001(\r\022\r\n\005count\030\006 \001(\r\022I\n\nactiv"
  "ities\030\007 \003(\01325.kandan_lg.PUser.PChannelsI"
  "nUser.PActivitiesInChannel\022K\n\013attachment"
  "s\030\010 \003(\01326.kandan_lg.PUser.PChannelsInUse"
  "r.PAttachmentsInChannel\032\220\001\n\024PActivitiesI"
  "nChannel\022\n\n\002id\030\001 \001(\r\022\022\n\ncreated_at\030\002 \001(\r"
  "\022\022\n\nupdated_at\030\003 \001(\r\022\016\n\006action\030\004 \001(\t\022\017\n\007"
  "content\030\005 \001(\t\022\022\n\nchannel_id\030\006 \001(\r\022\017\n\007use"
  "r_id\030\007 \001(\r\032\350\001\n\025PAttachmentsInChannel\022\n\n\002"
  "id\030\001 \001(\r\022\026\n\016file_file_name\030\002 \001(\t\022\031\n\021file"
  "_content_type\030\003 \001(\t\022\026\n\016file_file_size\030\004 "
  "\001(\r\022\022\n\nmessage_id\030\005 \001(\r\022\027\n\017file_updated_"
  "at\030\006 \001(\r\022\022\n\ncreated_at\030\007 \001(\r\022\022\n\nupdated_"
  "at\030\010 \001(\r\022\017\n\007user_id\030\t \001(\r\022\022\n\nchannel_id\030"
  "\n \001(\r\032\233\005\n\021PActivitiesInUser\022\n\n\002id\030\001 \001(\r\022"
  "\022\n\ncreated_at\030\002 \001(\r\022\022\n\nupdated_at\030\003 \001(\r\022"
  "\016\n\006action\030\004 \001(\t\022\017\n\007content\030\005 \001(\t\022\022\n\nchan"
  "nel_id\030\006 \001(\r\022\017\n\007user_id\030\007 \001(\r\022F\n\007channel"
  "\030\010 \001(\01325.kandan_lg.PUser.PActivitiesInUs"
  "er.PChannelInActivity\032\303\003\n\022PChannelInActi"
  "vity\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\022\n\ncreate"
  "d_at\030\003 \001(\r\022\022\n\nupdated_at\030\004 \001(\r\022\017\n\007user_i"
  "d\030\005 \001(\r\022\r\n\005count\030\006 \001(\r\022`\n\013attachments\030\007 "
  "\003(\0132K.kandan_lg.PUser.PActivitiesInUser."
  "PChannelInActivity.PAttachmentsInChannel"
  "\032\350\001\n\025PAttachmentsInChannel\022\n\n\002id\030\001 \001(\r\022\026"
  "\n\016file_file_name\030\002 \001(\t\022\031\n\021file_content_t"
  "ype\030\003 \001(\t\022\026\n\016file_file_size\030\004 \001(\r\022\022\n\nmes"
  "sage_id\030\005 \001(\r\022\027\n\017file_updated_at\030\006 \001(\r\022\022"
  "\n\ncreated_at\030\007 \001(\r\022\022\n\nupdated_at\030\010 \001(\r\022\017"
  "\n\007user_id\030\t \001(\r\022\022\n\nchannel_id\030\n \001(\r\032\241\005\n\022"
  "PAttachmentsInUser\022\n\n\002id\030\001 \001(\r\022\026\n\016file_f"
  "ile_name\030\002 \001(\t\022\031\n\021file_content_type\030\003 \001("
  "\t\022\026\n\016file_file_size\030\004 \001(\r\022\022\n\nmessage_id\030"
  "\005 \001(\r\022\027\n\017file_updated_at\030\006 \001(\r\022\022\n\ncreate"
  "d_at\030\007 \001(\r\022\022\n\nupdated_at\030\010 \001(\r\022\017\n\007user_i"
  "d\030\t \001(\r\022\022\n\nchannel_id\030\n \001(\r\022I\n\007channel\030\013"
  " \001(\01328.kandan_lg.PUser.PAttachmentsInUse"
  "r.PChannelInAttachment\032\356\002\n\024PChannelInAtt"
  "achment\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\022\n\ncre"
  "ated_at\030\003 \001(\r\022\022\n\nupdated_at\030\004 \001(\r\022\017\n\007use"
  "r_id\030\005 \001(\r\022\r\n\005count\030\006 \001(\r\022a\n\nactivities\030"
  "\007 \003(\0132M.kandan_lg.PUser.PAttachmentsInUs"
  "er.PChannelInAttachment.PActivitiesInCha"
  "nnel\032\220\001\n\024PActivitiesInChannel\022\n\n\002id\030\001 \001("
  "\r\022\022\n\ncreated_at\030\002 \001(\r\022\022\n\nupdated_at\030\003 \001("
  "\r\022\016\n\006action\030\004 \001(\t\022\017\n\007content\030\005 \001(\t\022\022\n\nch"
  "annel_id\030\006 \001(\r\022\017\n\007user_id\030\007 \001(\r\"\232\033\n\010PCha"
  "nnel\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\022\n\ncreate"
  "d_at\030\003 \001(\r\022\022\n\nupdated_at\030\004 \001(\r\022\017\n\007user_i"
  "d\030\005 \001(\r\022\r\n\005count\030\006 \001(\r\022<\n\nactivities\030\007 \003"
  "(\0132(.kandan_lg.PChannel.PActivitiesInCha"
  "nnel\0220\n\004user\030\010 \001(\0132\".kandan_lg.PChannel."
  "PUserInChannel\022>\n\013attachments\030\t \003(\0132).ka"
  "ndan_lg.PChannel.PAttachmentsInChannel\032\255"
  "\010\n\024PActivitiesInChannel\022\n\n\002id\030\001 \001(\r\022\022\n\nc"
  "reated_at\030\002 \001(\r\022\022\n\nupdated_at\030\003 \001(\r\022\016\n\006a"
  "ction\030\004 \001(\t\022\017\n\007content\030\005 \001(\t\022\022\n\nchannel_"
  "id\030\006 \001(\r\022\017\n\007user_id\030\007 \001(\r\022F\n\004user\030\010 \001(\0132"
  "8.kandan_lg.PChannel.PActivitiesInChanne"
  "l.PUserInActivity\032\322\006\n\017PUserInActivity\022\n\n"
  "\002id\030\001 \001(\r\022\r\n\005email\030\002 \001(\t\022\032\n\022encrypted_pa"
  "ssword\030\003 \001(\t\022\034\n\024reset_password_token\030\004 \001"
  "(\t\022\036\n\026reset_password_sent_at\030\005 \001(\r\022\033\n\023re"
  "member_created_at\030\006 \001(\r\022\022\n\nfirst_name\030\007 "
  "\001(\t\022\021\n\tlast_name\030\010 \001(\t\022\024\n\014signin_count\030\t"
  " \001(\r\022\032\n\022current_sign_in_at\030\n \001(\r\022\032\n\022curr"
  "ent_sign_in_ip\030\013 \001(\t\022\027\n\017last_sign_in_at\030"
  "\014 \001(\r\022\027\n\017last_sign_in_ip\030\r \001(\t\022\022\n\nauth_t"
  "oken\030\016 \001(\t\022\016\n\006locale\030\017 \001(\t\022\025\n\rgravatar_h"
  "ash\030\020 \001(\t\022\020\n\010username\030\021 \001(\t\022\021\n\tregstatus"
  "\030\022 \001(\t\022\016\n\006active\030\023 \001(\010\022\020\n\010is_admin\030\024 \001(\010"
  "\022\022\n\navatar_url\030\025 \001(\t\022\022\n\ncreated_at\030\026 \001(\r"
  "\022\022\n\nupdated_at\030\027 \001(\r\022`\n\013attachments\030\030 \003("
  "\0132K.kandan_lg.PChannel.PActivitiesInChan"
  "nel.PUserInActivity.PAttachmentsInUser\032\345"
  "\001\n\022PAttachmentsInUser\022\n\n\002id\030\001 \001(\r\022\026\n\016fil"
  "e_file_name\030\002 \001(\t\022\031\n\021file_content_type\030\003"
  " \001(\t\022\026\n\016file_file_size\030\004 \001(\r\022\022\n\nmessage_"
  "id\030\005 \001(\r\022\027\n\017file_updated_at\030\006 \001(\r\022\022\n\ncre"
  "ated_at\030\007 \001(\r\022\022\n\nupdated_at\030\010 \001(\r\022\017\n\007use"
  "r_id\030\t \001(\r\022\022\n\nchannel_id\030\n \001(\r\032\225\010\n\016PUser"
  "InChannel\022\n\n\002id\030\001 \001(\r\022\r\n\005email\030\002 \001(\t\022\032\n\022"
  "encrypted_password\030\003 \001(\t\022\034\n\024reset_passwo"
  "rd_token\030\004 \001(\t\022\036\n\026reset_password_sent_at"
  "\030\005 \001(\r\022\033\n\023remember_created_at\030\006 \001(\r\022\022\n\nf"
  "irst_name\030\007 \001(\t\022\021\n\tlast_name\030\010 \001(\t\022\024\n\014si"
  "gnin_count\030\t \001(\r\022\032\n\022current_sign_in_at\030\n"
  " \001(\r\022\032\n\022current_sign_in_ip\030\013 \001(\t\022\027\n\017last"
  "_sign_in_at\030\014 \001(\r\022\027\n\017last_sign_in_ip\030\r \001"
  "(\t\022\022\n\nauth_token\030\016 \001(\t\022\016\n\006locale\030\017 \001(\t\022\025"
  "\n\rgravatar_hash\030\020 \001(\t\022\020\n\010username\030\021 \001(\t\022"
  "\021\n\tregstatus\030\022 \001(\t\022\016\n\006active\030\023 \001(\010\022\020\n\010is"
  "_admin\030\024 \001(\010\022\022\n\navatar_url\030\025 \001(\t\022\022\n\ncrea"
  "ted_at\030\026 \001(\r\022\022\n\nupdated_at\030\027 \001(\r\022H\n\nacti"
  "vities\030\030 \003(\01324.kandan_lg.PChannel.PUserI"
  "nChannel.PActivitiesInUser\022J\n\013attachment"
  "s\030\031 \003(\01325.kandan_lg.PChannel.PUserInChan"
  "nel.PAttachmentsInUser\032\215\001\n\021PActivitiesIn"
  "User\022\n\n\002id\030\001 \001(\r\022\022\n\ncreated_at\030\002 \001(\r\022\022\n\n"
  "updated_at\030\003 \001(\r\022\016\n\006action\030\004 \001(\t\022\017\n\007cont"
  "ent\030\005 \001(\t\022\022\n\nchannel_id\030\006 \001(\r\022\017\n\007user_id"
  "\030\007 \001(\r\032\345\001\n\022PAttachmentsInUser\022\n\n\002id\030\001 \001("
  "\r\022\026\n\016file_file_name\030\002 \001(\t\022\031\n\021file_conten"
  "t_type\030\003 \001(\t\022\026\n\016file_file_size\030\004 \001(\r\022\022\n\n"
  "message_id\030\005 \001(\r\022\027\n\017file_updated_at\030\006 \001("
  "\r\022\022\n\ncreated_at\030\007 \001(\r\022\022\n\nupdated_at\030\010 \001("
  "\r\022\017\n\007user_id\030\t \001(\r\022\022\n\nchannel_id\030\n \001(\r\032\263"
  "\010\n\025PAttachmentsInChannel\022\n\n\002id\030\001 \001(\r\022\026\n\016"
  "file_file_name\030\002 \001(\t\022\031\n\021file_content_typ"
  "e\030\003 \001(\t\022\026\n\016file_file_size\030\004 \001(\r\022\022\n\nmessa"
  "ge_id\030\005 \001(\r\022\027\n\017file_updated_at\030\006 \001(\r\022\022\n\n"
  "created_at\030\007 \001(\r\022\022\n\nupdated_at\030\010 \001(\r\022\017\n\007"
  "user_id\030\t \001(\r\022\022\n\nchannel_id\030\n \001(\r\022I\n\004use"
  "r\030\013 \001(\0132;.kandan_lg.PChannel.PAttachment"
  "sInChannel.PUserInAttachment\032\375\005\n\021PUserIn"
  "Attachment\022\n\n\002id\030\001 \001(\r\022\r\n\005email\030\002 \001(\t\022\032\n"
  "\022encrypted_password\030\003 \001(\t\022\034\n\024reset_passw"
  "ord_token\030\004 \001(\t\022\036\n\026reset_password_sent_a"
  "t\030\005 \001(\r\022\033\n\023remember_created_at\030\006 \001(\r\022\022\n\n"
  "first_name\030\007 \001(\t\022\021\n\tlast_name\030\010 \001(\t\022\024\n\014s"
  "ignin_count\030\t \001(\r\022\032\n\022current_sign_in_at\030"
  "\n \001(\r\022\032\n\022current_sign_in_ip\030\013 \001(\t\022\027\n\017las"
  "t_sign_in_at\030\014 \001(\r\022\027\n\017last_sign_in_ip\030\r "
  "\001(\t\022\022\n\nauth_token\030\016 \001(\t\022\016\n\006locale\030\017 \001(\t\022"
  "\025\n\rgravatar_hash\030\020 \001(\t\022\020\n\010username\030\021 \001(\t"
  "\022\021\n\tregstatus\030\022 \001(\t\022\016\n\006active\030\023 \001(\010\022\020\n\010i"
  "s_admin\030\024 \001(\010\022\022\n\navatar_url\030\025 \001(\t\022\022\n\ncre"
  "ated_at\030\026 \001(\r\022\022\n\nupdated_at\030\027 \001(\r\022a\n\nact"
  "ivities\030\030 \003(\0132M.kandan_lg.PChannel.PAtta"
  "chmentsInChannel.PUserInAttachment.PActi"
  "vitiesInUser\032\215\001\n\021PActivitiesInUser\022\n\n\002id"
  "\030\001 \001(\r\022\022\n\ncreated_at\030\002 \001(\r\022\022\n\nupdated_at"
  "\030\003 \001(\r\022\016\n\006action\030\004 \001(\t\022\017\n\007content\030\005 \001(\t\022"
  "\022\n\nchannel_id\030\006 \001(\r\022\017\n\007user_id\030\007 \001(\r\"\323\035\n"
  "\tPActivity\022\n\n\002id\030\001 \001(\r\022\022\n\ncreated_at\030\002 \001"
  "(\r\022\022\n\nupdated_at\030\003 \001(\r\022\016\n\006action\030\004 \001(\t\022\017"
  "\n\007content\030\005 \001(\t\022\022\n\nchannel_id\030\006 \001(\r\022\017\n\007u"
  "ser_id\030\007 \001(\r\0228\n\007channel\030\010 \001(\0132\'.kandan_l"
  "g.PActivity.PChannelInActivity\0222\n\004user\030\t"
  " \001(\0132$.kandan_lg.PActivity.PUserInActivi"
  "ty\032\271\017\n\022PChannelInActivity\022\n\n\002id\030\001 \001(\r\022\014\n"
  "\004name\030\002 \001(\t\022\022\n\ncreated_at\030\003 \001(\r\022\022\n\nupdat"
  "ed_at\030\004 \001(\r\022\017\n\007user_id\030\005 \001(\r\022\r\n\005count\030\006 "
  "\001(\r\022D\n\004user\030\007 \001(\01326.kandan_lg.PActivity."
  "PChannelInActivity.PUserInChannel\022R\n\013att"
  "achments\030\010 \003(\0132=.kandan_lg.PActivity.PCh"
  "annelInActivity.PAttachmentsInChannel\032\317\006"
  "\n\016PUserInChannel\022\n\n\002id\030\001 \001(\r\022\r\n\005email\030\002 "
  "\001(\t\022\032\n\022encrypted_password\030\003 \001(\t\022\034\n\024reset"
  "_password_token\030\004 \001(\t\022\036\n\026reset_password_"
  "sent_at\030\005 \001(\r\022\033\n\023remember_created_at\030\006 \001"
  "(\r\022\022\n\nfirst_name\030\007 \001(\t\022\021\n\tlast_name\030\010 \001("
  "\t\022\024\n\014signin_count\030\t \001(\r\022\032\n\022current_sign_"
  "in_at\030\n \001(\r\022\032\n\022current_sign_in_ip\030\013 \001(\t\022"
  "\027\n\017last_sign_in_at\030\014 \001(\r\022\027\n\017last_sign_in"
  "_ip\030\r \001(\t\022\022\n\nauth_token\030\016 \001(\t\022\016\n\006locale\030"
  "\017 \001(\t\022\025\n\rgravatar_hash\030\020 \001(\t\022\020\n\010username"
  "\030\021 \001(\t\022\021\n\tregstatus\030\022 \001(\t\022\016\n\006active\030\023 \001("
  "\010\022\020\n\010is_admin\030\024 \001(\010\022\022\n\navatar_url\030\025 \001(\t\022"
  "\022\n\ncreated_at\030\026 \001(\r\022\022\n\nupdated_at\030\027 \001(\r\022"
  "^\n\013attachments\030\030 \003(\0132I.kandan_lg.PActivi"
  "ty.PChannelInActivity.PUserInChannel.PAt"
  "tachmentsInUser\032\345\001\n\022PAttachmentsInUser\022\n"
  "\n\002id\030\001 \001(\r\022\026\n\016file_file_name\030\002 \001(\t\022\031\n\021fi"
  "le_content_type\030\003 \001(\t\022\026\n\016file_file_size\030"
  "\004 \001(\r\022\022\n\nmessage_id\030\005 \001(\r\022\027\n\017file_update"
  "d_at\030\006 \001(\r\022\022\n\ncreated_at\030\007 \001(\r\022\022\n\nupdate"
  "d_at\030\010 \001(\r\022\017\n\007user_id\030\t \001(\r\022\022\n\nchannel_i"
  "d\030\n \001(\r\032\324\006\n\025PAttachmentsInChannel\022\n\n\002id\030"
  "\001 \001(\r\022\026\n\016file_file_name\030\002 \001(\t\022\031\n\021file_co"
  "ntent_type\030\003 \001(\t\022\026\n\016file_file_size\030\004 \001(\r"
  "\022\022\n\nmessage_id\030\005 \001(\r\022\027\n\017file_updated_at\030"
  "\006 \001(\r\022\022\n\ncreated_at\030\007 \001(\r\022\022\n\nupdated_at\030"
  "\010 \001(\r\022\017\n\007user_id\030\t \001(\r\022\022\n\nchannel_id\030\n \001"
  "(\r\022]\n\004user\030\013 \001(\0132O.kandan_lg.PActivity.P"
  "ChannelInActivity.PAttachmentsInChannel."
  "PUserInAttachment\032\212\004\n\021PUserInAttachment\022"
  "\n\n\002id\030\001 \001(\r\022\r\n\005email\030\002 \001(\t\022\032\n\022encrypted_"
  "password\030\003 \001(\t\022\034\n\024reset_password_token\030\004"
  " \001(\t\022\036\n\026reset_password_sent_at\030\005 \001(\r\022\033\n\023"
  "remember_created_at\030\006 \001(\r\022\022\n\nfirst_name\030"
  "\007 \001(\t\022\021\n\tlast_name\030\010 \001(\t\022\024\n\014signin_count"
  "\030\t \001(\r\022\032\n\022current_sign_in_at\030\n \001(\r\022\032\n\022cu"
  "rrent_sign_in_ip\030\013 \001(\t\022\027\n\017last_sign_in_a"
  "t\030\014 \001(\r\022\027\n\017last_sign_in_ip\030\r \001(\t\022\022\n\nauth"
  "_token\030\016 \001(\t\022\016\n\006locale\030\017 \001(\t\022\025\n\rgravatar"
  "_hash\030\020 \001(\t\022\020\n\010username\030\021 \001(\t\022\021\n\tregstat"
  "us\030\022 \001(\t\022\016\n\006active\030\023 \001(\010\022\020\n\010is_admin\030\024 \001"
  "(\010\022\022\n\navatar_url\030\025 \001(\t\022\022\n\ncreated_at\030\026 \001"
  "(\r\022\022\n\nupdated_at\030\027 \001(\r\032\241\014\n\017PUserInActivi"
  "ty\022\n\n\002id\030\001 \001(\r\022\r\n\005email\030\002 \001(\t\022\032\n\022encrypt"
  "ed_password\030\003 \001(\t\022\034\n\024reset_password_toke"
  "n\030\004 \001(\t\022\036\n\026reset_password_sent_at\030\005 \001(\r\022"
  "\033\n\023remember_created_at\030\006 \001(\r\022\022\n\nfirst_na"
  "me\030\007 \001(\t\022\021\n\tlast_name\030\010 \001(\t\022\024\n\014signin_co"
  "unt\030\t \001(\r\022\032\n\022current_sign_in_at\030\n \001(\r\022\032\n"
  "\022current_sign_in_ip\030\013 \001(\t\022\027\n\017last_sign_i"
  "n_at\030\014 \001(\r\022\027\n\017last_sign_in_ip\030\r \001(\t\022\022\n\na"
  "uth_token\030\016 \001(\t\022\016\n\006locale\030\017 \001(\t\022\025\n\rgrava"
  "tar_hash\030\020 \001(\t\022\020\n\010username\030\021 \001(\t\022\021\n\tregs"
  "tatus\030\022 \001(\t\022\016\n\006active\030\023 \001(\010\022\020\n\010is_admin\030"
  "\024 \001(\010\022\022\n\navatar_url\030\025 \001(\t\022\022\n\ncreated_at\030"
  "\026 \001(\r\022\022\n\nupdated_at\030\027 \001(\r\022F\n\010channels\030\030 "
  "\003(\01324.kandan_lg.PActivity.PUserInActivit"
  "y.PChannelsInUser\022L\n\013attachments\030\031 \003(\01327"
  ".kandan_lg.PActivity.PUserInActivity.PAt"
  "tachmentsInUser\032\277\003\n\017PChannelsInUser\022\n\n\002i"
  "d\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\022\n\ncreated_at\030\003 \001("
  "\r\022\022\n\nupdated_at\030\004 \001(\r\022\017\n\007user_id\030\005 \001(\r\022\r"
  "\n\005count\030\006 \001(\r\022_\n\013attachments\030\007 \003(\0132J.kan"
  "dan_lg.PActivity.PUserInActivity.PChanne"
  "lsInUser.PAttachmentsInChannel\032\350\001\n\025PAtta"
  "chmentsInChannel\022\n\n\002id\030\001 \001(\r\022\026\n\016file_fil"
  "e_name\030\002 \001(\t\022\031\n\021file_content_type\030\003 \001(\t\022"
  "\026\n\016file_file_size\030\004 \001(\r\022\022\n\nmessage_id\030\005 "
  "\001(\r\022\027\n\017file_updated_at\030\006 \001(\r\022\022\n\ncreated_"
  "at\030\007 \001(\r\022\022\n\nupdated_at\030\010 \001(\r\022\017\n\007user_id\030"
  "\t \001(\r\022\022\n\nchannel_id\030\n \001(\r\032\276\003\n\022PAttachmen"
  "tsInUser\022\n\n\002id\030\001 \001(\r\022\026\n\016file_file_name\030\002"
  " \001(\t\022\031\n\021file_content_type\030\003 \001(\t\022\026\n\016file_"
  "file_size\030\004 \001(\r\022\022\n\nmessage_id\030\005 \001(\r\022\027\n\017f"
  "ile_updated_at\030\006 \001(\r\022\022\n\ncreated_at\030\007 \001(\r"
  "\022\022\n\nupdated_at\030\010 \001(\r\022\017\n\007user_id\030\t \001(\r\022\022\n"
  "\nchannel_id\030\n \001(\r\022]\n\007channel\030\013 \001(\0132L.kan"
  "dan_lg.PActivity.PUserInActivity.PAttach"
  "mentsInUser.PChannelInAttachment\032x\n\024PCha"
  "nnelInAttachment\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001"
  "(\t\022\022\n\ncreated_at\030\003 \001(\r\022\022\n\nupdated_at\030\004 \001"
  "(\r\022\017\n\007user_id\030\005 \001(\r\022\r\n\005count\030\006 \001(\r\"\346\033\n\013P"
  "Attachment\022\n\n\002id\030\001 \001(\r\022\026\n\016file_file_name"
  "\030\002 \001(\t\022\031\n\021file_content_type\030\003 \001(\t\022\026\n\016fil"
  "e_file_size\030\004 \001(\r\022\022\n\nmessage_id\030\005 \001(\r\022\027\n"
  "\017file_updated_at\030\006 \001(\r\022\022\n\ncreated_at\030\007 \001"
  "(\r\022\022\n\nupdated_at\030\010 \001(\r\022\017\n\007user_id\030\t \001(\r\022"
  "\022\n\nchannel_id\030\n \001(\r\0226\n\004user\030\013 \001(\0132(.kand"
  "an_lg.PAttachment.PUserInAttachment\022<\n\007c"
  "hannel\030\014 \001(\0132+.kandan_lg.PAttachment.PCh"
  "annelInAttachment\032\372\n\n\021PUserInAttachment\022"
  "\n\n\002id\030\001 \001(\r\022\r\n\005email\030\002 \001(\t\022\032\n\022encrypted_"
  "password\030\003 \001(\t\022\034\n\024reset_password_token\030\004"
  " \001(\t\022\036\n\026reset_password_sent_at\030\005 \001(\r\022\033\n\023"
  "remember_created_at\030\006 \001(\r\022\022\n\nfirst_name\030"
  "\007 \001(\t\022\021\n\tlast_name\030\010 \001(\t\022\024\n\014signin_count"
  "\030\t \001(\r\022\032\n\022current_sign_in_at\030\n \001(\r\022\032\n\022cu"
  "rrent_sign_in_ip\030\013 \001(\t\022\027\n\017last_sign_in_a"
  "t\030\014 \001(\r\022\027\n\017last_sign_in_ip\030\r \001(\t\022\022\n\nauth"
  "_token\030\016 \001(\t\022\016\n\006locale\030\017 \001(\t\022\025\n\rgravatar"
  "_hash\030\020 \001(\t\022\020\n\010username\030\021 \001(\t\022\021\n\tregstat"
  "us\030\022 \001(\t\022\016\n\006active\030\023 \001(\010\022\020\n\010is_admin\030\024 \001"
  "(\010\022\022\n\navatar_url\030\025 \001(\t\022\022\n\ncreated_at\030\026 \001"
  "(\r\022\022\n\nupdated_at\030\027 \001(\r\022J\n\010channels\030\030 \003(\013"
  "28.kandan_lg.PAttachment.PUserInAttachme"
  "nt.PChannelsInUser\022N\n\nactivities\030\031 \003(\0132:"
  ".kandan_lg.PAttachment.PUserInAttachment"
  ".PActivitiesInUser\032\351\002\n\017PChannelsInUser\022\n"
  "\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\022\n\ncreated_at\030\003"
  " \001(\r\022\022\n\nupdated_at\030\004 \001(\r\022\017\n\007user_id\030\005 \001("
  "\r\022\r\n\005count\030\006 \001(\r\022a\n\nactivities\030\007 \003(\0132M.k"
  "andan_lg.PAttachment.PUserInAttachment.P"
  "ChannelsInUser.PActivitiesInChannel\032\220\001\n\024"
  "PActivitiesInChannel\022\n\n\002id\030\001 \001(\r\022\022\n\ncrea"
  "ted_at\030\002 \001(\r\022\022\n\nupdated_at\030\003 \001(\r\022\016\n\006acti"
  "on\030\004 \001(\t\022\017\n\007content\030\005 \001(\t\022\022\n\nchannel_id\030"
  "\006 \001(\r\022\017\n\007user_id\030\007 \001(\r\032\345\002\n\021PActivitiesIn"
  "User\022\n\n\002id\030\001 \001(\r\022\022\n\ncreated_at\030\002 \001(\r\022\022\n\n"
  "updated_at\030\003 \001(\r\022\016\n\006action\030\004 \001(\t\022\017\n\007cont"
  "ent\030\005 \001(\t\022\022\n\nchannel_id\030\006 \001(\r\022\017\n\007user_id"
  "\030\007 \001(\r\022^\n\007channel\030\010 \001(\0132M.kandan_lg.PAtt"
  "achment.PUserInAttachment.PActivitiesInU"
  "ser.PChannelInActivity\032v\n\022PChannelInActi"
  "vity\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\022\n\ncreate"
  "d_at\030\003 \001(\r\022\022\n\nupdated_at\030\004 \001(\r\022\017\n\007user_i"
  "d\030\005 \001(\r\022\r\n\005count\030\006 \001(\r\032\222\016\n\024PChannelInAtt"
  "achment\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\022\n\ncre"
  "ated_at\030\003 \001(\r\022\022\n\nupdated_at\030\004 \001(\r\022\017\n\007use"
  "r_id\030\005 \001(\r\022\r\n\005count\030\006 \001(\r\022T\n\nactivities\030"
  "\007 \003(\0132@.kandan_lg.PAttachment.PChannelIn"
  "Attachment.PActivitiesInChannel\022H\n\004user\030"
  "\010 \001(\0132:.kandan_lg.PAttachment.PChannelIn"
  "Attachment.PUserInChannel\032\373\005\n\024PActivitie"
  "sInChannel\022\n\n\002id\030\001 \001(\r\022\022\n\ncreated_at\030\002 \001"
  "(\r\022\022\n\nupdated_at\030\003 \001(\r\022\016\n\006action\030\004 \001(\t\022\017"
  "\n\007content\030\005 \001(\t\022\022\n\nchannel_id\030\006 \001(\r\022\017\n\007u"
  "ser_id\030\007 \001(\r\022^\n\004user\030\010 \001(\0132P.kandan_lg.P"
  "Attachment.PChannelInAttachment.PActivit"
  "iesInChannel.PUserInActivity\032\210\004\n\017PUserIn"
  "Activity\022\n\n\002id\030\001 \001(\r\022\r\n\005email\030\002 \001(\t\022\032\n\022e"
  "ncrypted_password\030\003 \001(\t\022\034\n\024reset_passwor"
  "d_token\030\004 \001(\t\022\036\n\026reset_password_sent_at\030"
  "\005 \001(\r\022\033\n\023remember_created_at\030\006 \001(\r\022\022\n\nfi"
  "rst_name\030\007 \001(\t\022\021\n\tlast_name\030\010 \001(\t\022\024\n\014sig"
  "nin_count\030\t \001(\r\022\032\n\022current_sign_in_at\030\n "
  "\001(\r\022\032\n\022current_sign_in_ip\030\013 \001(\t\022\027\n\017last_"
  "sign_in_at\030\014 \001(\r\022\027\n\017last_sign_in_ip\030\r \001("
  "\t\022\022\n\nauth_token\030\016 \001(\t\022\016\n\006locale\030\017 \001(\t\022\025\n"
  "\rgravatar_hash\030\020 \001(\t\022\020\n\010username\030\021 \001(\t\022\021"
  "\n\tregstatus\030\022 \001(\t\022\016\n\006active\030\023 \001(\010\022\020\n\010is_"
  "admin\030\024 \001(\010\022\022\n\navatar_url\030\025 \001(\t\022\022\n\ncreat"
  "ed_at\030\026 \001(\r\022\022\n\nupdated_at\030\027 \001(\r\032\371\005\n\016PUse"
  "rInChannel\022\n\n\002id\030\001 \001(\r\022\r\n\005email\030\002 \001(\t\022\032\n"
  "\022encrypted_password\030\003 \001(\t\022\034\n\024reset_passw"
  "ord_token\030\004 \001(\t\022\036\n\026reset_password_sent_a"
  "t\030\005 \001(\r\022\033\n\023remember_created_at\030\006 \001(\r\022\022\n\n"
  "first_name\030\007 \001(\t\022\021\n\tlast_name\030\010 \001(\t\022\024\n\014s"
  "ignin_count\030\t \001(\r\022\032\n\022current_sign_in_at\030"
  "\n \001(\r\022\032\n\022current_sign_in_ip\030\013 \001(\t\022\027\n\017las"
  "t_sign_in_at\030\014 \001(\r\022\027\n\017last_sign_in_ip\030\r "
  "\001(\t\022\022\n\nauth_token\030\016 \001(\t\022\016\n\006locale\030\017 \001(\t\022"
  "\025\n\rgravatar_hash\030\020 \001(\t\022\020\n\010username\030\021 \001(\t"
  "\022\021\n\tregstatus\030\022 \001(\t\022\016\n\006active\030\023 \001(\010\022\020\n\010i"
  "s_admin\030\024 \001(\010\022\022\n\navatar_url\030\025 \001(\t\022\022\n\ncre"
  "ated_at\030\026 \001(\r\022\022\n\nupdated_at\030\027 \001(\r\022`\n\nact"
  "ivities\030\030 \003(\0132L.kandan_lg.PAttachment.PC"
  "hannelInAttachment.PUserInChannel.PActiv"
  "itiesInUser\032\215\001\n\021PActivitiesInUser\022\n\n\002id\030"
  "\001 \001(\r\022\022\n\ncreated_at\030\002 \001(\r\022\022\n\nupdated_at\030"
  "\003 \001(\r\022\016\n\006action\030\004 \001(\t\022\017\n\007content\030\005 \001(\t\022\022"
  "\n\nchannel_id\030\006 \001(\r\022\017\n\007user_id\030\007 \001(\r\"+\n\tP"
  "UserList\022\036\n\004user\030\001 \003(\0132\020.kandan_lg.PUser"
  "\"4\n\014PChannelList\022$\n\007channel\030\001 \003(\0132\023.kand"
  "an_lg.PChannel\"7\n\rPActivityList\022&\n\010activ"
  "ity\030\001 \003(\0132\024.kandan_lg.PActivity\"=\n\017PAtta"
  "chmentList\022*\n\nattachment\030\001 \003(\0132\026.kandan_"
  "lg.PAttachment\"\036\n\nQueryParam\022\020\n\010query_id"
  "\030\001 \001(\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_5fkandan_5flg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_5fkandan_5flg_2eproto_sccs[47] = {
  &scc_info_PActivity_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PActivity_PChannelInActivity_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PActivity_PChannelInActivity_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PActivity_PChannelInActivity_PUserInChannel_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PActivity_PUserInActivity_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PActivity_PUserInActivity_PAttachmentsInUser_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PActivity_PUserInActivity_PChannelsInUser_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PActivityList_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PAttachment_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PAttachment_PChannelInAttachment_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PAttachment_PChannelInAttachment_PActivitiesInChannel_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PAttachment_PChannelInAttachment_PUserInChannel_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PAttachment_PUserInAttachment_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PAttachment_PUserInAttachment_PActivitiesInUser_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PAttachment_PUserInAttachment_PChannelsInUser_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PAttachmentList_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PChannel_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PChannel_PActivitiesInChannel_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PChannel_PActivitiesInChannel_PUserInActivity_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PChannel_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PChannel_PAttachmentsInChannel_PUserInAttachment_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PChannel_PUserInChannel_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PChannel_PUserInChannel_PActivitiesInUser_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PChannel_PUserInChannel_PAttachmentsInUser_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PChannelList_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PUser_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PUser_PActivitiesInUser_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PUser_PActivitiesInUser_PChannelInActivity_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PUser_PAttachmentsInUser_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PUser_PAttachmentsInUser_PChannelInAttachment_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PUser_PChannelsInUser_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PUser_PChannelsInUser_PActivitiesInChannel_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PUser_PChannelsInUser_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto.base,
  &scc_info_PUserList_proto_5fkandan_5flg_2eproto.base,
  &scc_info_QueryParam_proto_5fkandan_5flg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_5fkandan_5flg_2eproto_once;
static bool descriptor_table_proto_5fkandan_5flg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_5fkandan_5flg_2eproto = {
  &descriptor_table_proto_5fkandan_5flg_2eproto_initialized, descriptor_table_protodef_proto_5fkandan_5flg_2eproto, "proto_kandan_lg.proto", 13814,
  &descriptor_table_proto_5fkandan_5flg_2eproto_once, descriptor_table_proto_5fkandan_5flg_2eproto_sccs, descriptor_table_proto_5fkandan_5flg_2eproto_deps, 47, 0,
  schemas, file_default_instances, TableStruct_proto_5fkandan_5flg_2eproto::offsets,
  file_level_metadata_proto_5fkandan_5flg_2eproto, 47, file_level_enum_descriptors_proto_5fkandan_5flg_2eproto, file_level_service_descriptors_proto_5fkandan_5flg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_5fkandan_5flg_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_5fkandan_5flg_2eproto), true);
namespace kandan_lg {

// ===================================================================

void PUser_PChannelsInUser_PActivitiesInChannel::InitAsDefaultInstance() {
}
class PUser_PChannelsInUser_PActivitiesInChannel::_Internal {
 public:
};

PUser_PChannelsInUser_PActivitiesInChannel::PUser_PChannelsInUser_PActivitiesInChannel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PUser.PChannelsInUser.PActivitiesInChannel)
}
PUser_PChannelsInUser_PActivitiesInChannel::PUser_PChannelsInUser_PActivitiesInChannel(const PUser_PChannelsInUser_PActivitiesInChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PUser.PChannelsInUser.PActivitiesInChannel)
}

void PUser_PChannelsInUser_PActivitiesInChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PUser_PChannelsInUser_PActivitiesInChannel_proto_5fkandan_5flg_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(user_id_));
}

PUser_PChannelsInUser_PActivitiesInChannel::~PUser_PChannelsInUser_PActivitiesInChannel() {
  // @@protoc_insertion_point(destructor:kandan_lg.PUser.PChannelsInUser.PActivitiesInChannel)
  SharedDtor();
}

void PUser_PChannelsInUser_PActivitiesInChannel::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PUser_PChannelsInUser_PActivitiesInChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PUser_PChannelsInUser_PActivitiesInChannel& PUser_PChannelsInUser_PActivitiesInChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PUser_PChannelsInUser_PActivitiesInChannel_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PUser_PChannelsInUser_PActivitiesInChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PUser.PChannelsInUser.PActivitiesInChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(user_id_));
  _internal_metadata_.Clear();
}

const char* PUser_PChannelsInUser_PActivitiesInChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PUser.PChannelsInUser.PActivitiesInChannel.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PUser.PChannelsInUser.PActivitiesInChannel.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 channel_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PUser_PChannelsInUser_PActivitiesInChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PUser.PChannelsInUser.PActivitiesInChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 created_at = 2;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 3;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_updated_at(), target);
  }

  // string action = 4;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PUser.PChannelsInUser.PActivitiesInChannel.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  // string content = 5;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PUser.PChannelsInUser.PActivitiesInChannel.content");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_content(), target);
  }

  // uint32 channel_id = 6;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_channel_id(), target);
  }

  // uint32 user_id = 7;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PUser.PChannelsInUser.PActivitiesInChannel)
  return target;
}

size_t PUser_PChannelsInUser_PActivitiesInChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PUser.PChannelsInUser.PActivitiesInChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action = 4;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // string content = 5;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 created_at = 2;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 3;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 channel_id = 6;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel_id());
  }

  // uint32 user_id = 7;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PUser_PChannelsInUser_PActivitiesInChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PUser.PChannelsInUser.PActivitiesInChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const PUser_PChannelsInUser_PActivitiesInChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PUser_PChannelsInUser_PActivitiesInChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PUser.PChannelsInUser.PActivitiesInChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PUser.PChannelsInUser.PActivitiesInChannel)
    MergeFrom(*source);
  }
}

void PUser_PChannelsInUser_PActivitiesInChannel::MergeFrom(const PUser_PChannelsInUser_PActivitiesInChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PUser.PChannelsInUser.PActivitiesInChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void PUser_PChannelsInUser_PActivitiesInChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PUser.PChannelsInUser.PActivitiesInChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PUser_PChannelsInUser_PActivitiesInChannel::CopyFrom(const PUser_PChannelsInUser_PActivitiesInChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PUser.PChannelsInUser.PActivitiesInChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PUser_PChannelsInUser_PActivitiesInChannel::IsInitialized() const {
  return true;
}

void PUser_PChannelsInUser_PActivitiesInChannel::InternalSwap(PUser_PChannelsInUser_PActivitiesInChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(channel_id_, other->channel_id_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PUser_PChannelsInUser_PActivitiesInChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PUser_PChannelsInUser_PAttachmentsInChannel::InitAsDefaultInstance() {
}
class PUser_PChannelsInUser_PAttachmentsInChannel::_Internal {
 public:
};

PUser_PChannelsInUser_PAttachmentsInChannel::PUser_PChannelsInUser_PAttachmentsInChannel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PUser.PChannelsInUser.PAttachmentsInChannel)
}
PUser_PChannelsInUser_PAttachmentsInChannel::PUser_PChannelsInUser_PAttachmentsInChannel(const PUser_PChannelsInUser_PAttachmentsInChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_file_name().empty()) {
    file_file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_file_name_);
  }
  file_content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_content_type().empty()) {
    file_content_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_content_type_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(channel_id_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PUser.PChannelsInUser.PAttachmentsInChannel)
}

void PUser_PChannelsInUser_PAttachmentsInChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PUser_PChannelsInUser_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto.base);
  file_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(channel_id_));
}

PUser_PChannelsInUser_PAttachmentsInChannel::~PUser_PChannelsInUser_PAttachmentsInChannel() {
  // @@protoc_insertion_point(destructor:kandan_lg.PUser.PChannelsInUser.PAttachmentsInChannel)
  SharedDtor();
}

void PUser_PChannelsInUser_PAttachmentsInChannel::SharedDtor() {
  file_file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PUser_PChannelsInUser_PAttachmentsInChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PUser_PChannelsInUser_PAttachmentsInChannel& PUser_PChannelsInUser_PAttachmentsInChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PUser_PChannelsInUser_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PUser_PChannelsInUser_PAttachmentsInChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PUser.PChannelsInUser.PAttachmentsInChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(channel_id_));
  _internal_metadata_.Clear();
}

const char* PUser_PChannelsInUser_PAttachmentsInChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PUser.PChannelsInUser.PAttachmentsInChannel.file_file_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_content_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_file_content_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PUser.PChannelsInUser.PAttachmentsInChannel.file_content_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_file_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          file_file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 message_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_updated_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          file_updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 channel_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PUser_PChannelsInUser_PAttachmentsInChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PUser.PChannelsInUser.PAttachmentsInChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string file_file_name = 2;
  if (this->file_file_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_file_name().data(), static_cast<int>(this->_internal_file_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PUser.PChannelsInUser.PAttachmentsInChannel.file_file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_file_name(), target);
  }

  // string file_content_type = 3;
  if (this->file_content_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_content_type().data(), static_cast<int>(this->_internal_file_content_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PUser.PChannelsInUser.PAttachmentsInChannel.file_content_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_content_type(), target);
  }

  // uint32 file_file_size = 4;
  if (this->file_file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_file_file_size(), target);
  }

  // uint32 message_id = 5;
  if (this->message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_message_id(), target);
  }

  // uint32 file_updated_at = 6;
  if (this->file_updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_file_updated_at(), target);
  }

  // uint32 created_at = 7;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 8;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_updated_at(), target);
  }

  // uint32 user_id = 9;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_user_id(), target);
  }

  // uint32 channel_id = 10;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PUser.PChannelsInUser.PAttachmentsInChannel)
  return target;
}

size_t PUser_PChannelsInUser_PAttachmentsInChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PUser.PChannelsInUser.PAttachmentsInChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_file_name = 2;
  if (this->file_file_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_file_name());
  }

  // string file_content_type = 3;
  if (this->file_content_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_content_type());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 file_file_size = 4;
  if (this->file_file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_file_size());
  }

  // uint32 message_id = 5;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_message_id());
  }

  // uint32 file_updated_at = 6;
  if (this->file_updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_updated_at());
  }

  // uint32 created_at = 7;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 8;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 user_id = 9;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  // uint32 channel_id = 10;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PUser_PChannelsInUser_PAttachmentsInChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PUser.PChannelsInUser.PAttachmentsInChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const PUser_PChannelsInUser_PAttachmentsInChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PUser_PChannelsInUser_PAttachmentsInChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PUser.PChannelsInUser.PAttachmentsInChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PUser.PChannelsInUser.PAttachmentsInChannel)
    MergeFrom(*source);
  }
}

void PUser_PChannelsInUser_PAttachmentsInChannel::MergeFrom(const PUser_PChannelsInUser_PAttachmentsInChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PUser.PChannelsInUser.PAttachmentsInChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_file_name().size() > 0) {

    file_file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_file_name_);
  }
  if (from.file_content_type().size() > 0) {

    file_content_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_content_type_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.file_file_size() != 0) {
    _internal_set_file_file_size(from._internal_file_file_size());
  }
  if (from.message_id() != 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from.file_updated_at() != 0) {
    _internal_set_file_updated_at(from._internal_file_updated_at());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
}

void PUser_PChannelsInUser_PAttachmentsInChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PUser.PChannelsInUser.PAttachmentsInChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PUser_PChannelsInUser_PAttachmentsInChannel::CopyFrom(const PUser_PChannelsInUser_PAttachmentsInChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PUser.PChannelsInUser.PAttachmentsInChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PUser_PChannelsInUser_PAttachmentsInChannel::IsInitialized() const {
  return true;
}

void PUser_PChannelsInUser_PAttachmentsInChannel::InternalSwap(PUser_PChannelsInUser_PAttachmentsInChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_file_name_.Swap(&other->file_file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_content_type_.Swap(&other->file_content_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(file_file_size_, other->file_file_size_);
  swap(message_id_, other->message_id_);
  swap(file_updated_at_, other->file_updated_at_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(user_id_, other->user_id_);
  swap(channel_id_, other->channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PUser_PChannelsInUser_PAttachmentsInChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PUser_PChannelsInUser::InitAsDefaultInstance() {
}
class PUser_PChannelsInUser::_Internal {
 public:
};

PUser_PChannelsInUser::PUser_PChannelsInUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PUser.PChannelsInUser)
}
PUser_PChannelsInUser::PUser_PChannelsInUser(const PUser_PChannelsInUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      activities_(from.activities_),
      attachments_(from.attachments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&id_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PUser.PChannelsInUser)
}

void PUser_PChannelsInUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PUser_PChannelsInUser_proto_5fkandan_5flg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&id_)) + sizeof(count_));
}

PUser_PChannelsInUser::~PUser_PChannelsInUser() {
  // @@protoc_insertion_point(destructor:kandan_lg.PUser.PChannelsInUser)
  SharedDtor();
}

void PUser_PChannelsInUser::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PUser_PChannelsInUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PUser_PChannelsInUser& PUser_PChannelsInUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PUser_PChannelsInUser_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PUser_PChannelsInUser::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PUser.PChannelsInUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activities_.Clear();
  attachments_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&id_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

const char* PUser_PChannelsInUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PUser.PChannelsInUser.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kandan_lg.PUser.PChannelsInUser.PActivitiesInChannel activities = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_activities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kandan_lg.PUser.PChannelsInUser.PAttachmentsInChannel attachments = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attachments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PUser_PChannelsInUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PUser.PChannelsInUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PUser.PChannelsInUser.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 created_at = 3;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 4;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_updated_at(), target);
  }

  // uint32 user_id = 5;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_user_id(), target);
  }

  // uint32 count = 6;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_count(), target);
  }

  // repeated .kandan_lg.PUser.PChannelsInUser.PActivitiesInChannel activities = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_activities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_activities(i), target, stream);
  }

  // repeated .kandan_lg.PUser.PChannelsInUser.PAttachmentsInChannel attachments = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attachments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_attachments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PUser.PChannelsInUser)
  return target;
}

size_t PUser_PChannelsInUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PUser.PChannelsInUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kandan_lg.PUser.PChannelsInUser.PActivitiesInChannel activities = 7;
  total_size += 1UL * this->_internal_activities_size();
  for (const auto& msg : this->activities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kandan_lg.PUser.PChannelsInUser.PAttachmentsInChannel attachments = 8;
  total_size += 1UL * this->_internal_attachments_size();
  for (const auto& msg : this->attachments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 created_at = 3;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 4;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 user_id = 5;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  // uint32 count = 6;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PUser_PChannelsInUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PUser.PChannelsInUser)
  GOOGLE_DCHECK_NE(&from, this);
  const PUser_PChannelsInUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PUser_PChannelsInUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PUser.PChannelsInUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PUser.PChannelsInUser)
    MergeFrom(*source);
  }
}

void PUser_PChannelsInUser::MergeFrom(const PUser_PChannelsInUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PUser.PChannelsInUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  activities_.MergeFrom(from.activities_);
  attachments_.MergeFrom(from.attachments_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void PUser_PChannelsInUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PUser.PChannelsInUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PUser_PChannelsInUser::CopyFrom(const PUser_PChannelsInUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PUser.PChannelsInUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PUser_PChannelsInUser::IsInitialized() const {
  return true;
}

void PUser_PChannelsInUser::InternalSwap(PUser_PChannelsInUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  activities_.InternalSwap(&other->activities_);
  attachments_.InternalSwap(&other->attachments_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(user_id_, other->user_id_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PUser_PChannelsInUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel::InitAsDefaultInstance() {
}
class PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel::_Internal {
 public:
};

PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel::PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PUser.PActivitiesInUser.PChannelInActivity.PAttachmentsInChannel)
}
PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel::PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel(const PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_file_name().empty()) {
    file_file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_file_name_);
  }
  file_content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_content_type().empty()) {
    file_content_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_content_type_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(channel_id_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PUser.PActivitiesInUser.PChannelInActivity.PAttachmentsInChannel)
}

void PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto.base);
  file_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(channel_id_));
}

PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel::~PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel() {
  // @@protoc_insertion_point(destructor:kandan_lg.PUser.PActivitiesInUser.PChannelInActivity.PAttachmentsInChannel)
  SharedDtor();
}

void PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel::SharedDtor() {
  file_file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel& PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PUser.PActivitiesInUser.PChannelInActivity.PAttachmentsInChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(channel_id_));
  _internal_metadata_.Clear();
}

const char* PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PUser.PActivitiesInUser.PChannelInActivity.PAttachmentsInChannel.file_file_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_content_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_file_content_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PUser.PActivitiesInUser.PChannelInActivity.PAttachmentsInChannel.file_content_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_file_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          file_file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 message_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_updated_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          file_updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 channel_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PUser.PActivitiesInUser.PChannelInActivity.PAttachmentsInChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string file_file_name = 2;
  if (this->file_file_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_file_name().data(), static_cast<int>(this->_internal_file_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PUser.PActivitiesInUser.PChannelInActivity.PAttachmentsInChannel.file_file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_file_name(), target);
  }

  // string file_content_type = 3;
  if (this->file_content_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_content_type().data(), static_cast<int>(this->_internal_file_content_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PUser.PActivitiesInUser.PChannelInActivity.PAttachmentsInChannel.file_content_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_content_type(), target);
  }

  // uint32 file_file_size = 4;
  if (this->file_file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_file_file_size(), target);
  }

  // uint32 message_id = 5;
  if (this->message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_message_id(), target);
  }

  // uint32 file_updated_at = 6;
  if (this->file_updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_file_updated_at(), target);
  }

  // uint32 created_at = 7;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 8;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_updated_at(), target);
  }

  // uint32 user_id = 9;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_user_id(), target);
  }

  // uint32 channel_id = 10;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PUser.PActivitiesInUser.PChannelInActivity.PAttachmentsInChannel)
  return target;
}

size_t PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PUser.PActivitiesInUser.PChannelInActivity.PAttachmentsInChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_file_name = 2;
  if (this->file_file_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_file_name());
  }

  // string file_content_type = 3;
  if (this->file_content_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_content_type());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 file_file_size = 4;
  if (this->file_file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_file_size());
  }

  // uint32 message_id = 5;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_message_id());
  }

  // uint32 file_updated_at = 6;
  if (this->file_updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_updated_at());
  }

  // uint32 created_at = 7;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 8;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 user_id = 9;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  // uint32 channel_id = 10;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PUser.PActivitiesInUser.PChannelInActivity.PAttachmentsInChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PUser.PActivitiesInUser.PChannelInActivity.PAttachmentsInChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PUser.PActivitiesInUser.PChannelInActivity.PAttachmentsInChannel)
    MergeFrom(*source);
  }
}

void PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel::MergeFrom(const PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PUser.PActivitiesInUser.PChannelInActivity.PAttachmentsInChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_file_name().size() > 0) {

    file_file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_file_name_);
  }
  if (from.file_content_type().size() > 0) {

    file_content_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_content_type_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.file_file_size() != 0) {
    _internal_set_file_file_size(from._internal_file_file_size());
  }
  if (from.message_id() != 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from.file_updated_at() != 0) {
    _internal_set_file_updated_at(from._internal_file_updated_at());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
}

void PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PUser.PActivitiesInUser.PChannelInActivity.PAttachmentsInChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel::CopyFrom(const PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PUser.PActivitiesInUser.PChannelInActivity.PAttachmentsInChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel::IsInitialized() const {
  return true;
}

void PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel::InternalSwap(PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_file_name_.Swap(&other->file_file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_content_type_.Swap(&other->file_content_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(file_file_size_, other->file_file_size_);
  swap(message_id_, other->message_id_);
  swap(file_updated_at_, other->file_updated_at_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(user_id_, other->user_id_);
  swap(channel_id_, other->channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PUser_PActivitiesInUser_PChannelInActivity::InitAsDefaultInstance() {
}
class PUser_PActivitiesInUser_PChannelInActivity::_Internal {
 public:
};

PUser_PActivitiesInUser_PChannelInActivity::PUser_PActivitiesInUser_PChannelInActivity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PUser.PActivitiesInUser.PChannelInActivity)
}
PUser_PActivitiesInUser_PChannelInActivity::PUser_PActivitiesInUser_PChannelInActivity(const PUser_PActivitiesInUser_PChannelInActivity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      attachments_(from.attachments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&id_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PUser.PActivitiesInUser.PChannelInActivity)
}

void PUser_PActivitiesInUser_PChannelInActivity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PUser_PActivitiesInUser_PChannelInActivity_proto_5fkandan_5flg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&id_)) + sizeof(count_));
}

PUser_PActivitiesInUser_PChannelInActivity::~PUser_PActivitiesInUser_PChannelInActivity() {
  // @@protoc_insertion_point(destructor:kandan_lg.PUser.PActivitiesInUser.PChannelInActivity)
  SharedDtor();
}

void PUser_PActivitiesInUser_PChannelInActivity::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PUser_PActivitiesInUser_PChannelInActivity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PUser_PActivitiesInUser_PChannelInActivity& PUser_PActivitiesInUser_PChannelInActivity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PUser_PActivitiesInUser_PChannelInActivity_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PUser_PActivitiesInUser_PChannelInActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PUser.PActivitiesInUser.PChannelInActivity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attachments_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&id_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

const char* PUser_PActivitiesInUser_PChannelInActivity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PUser.PActivitiesInUser.PChannelInActivity.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kandan_lg.PUser.PActivitiesInUser.PChannelInActivity.PAttachmentsInChannel attachments = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attachments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PUser_PActivitiesInUser_PChannelInActivity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PUser.PActivitiesInUser.PChannelInActivity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PUser.PActivitiesInUser.PChannelInActivity.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 created_at = 3;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 4;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_updated_at(), target);
  }

  // uint32 user_id = 5;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_user_id(), target);
  }

  // uint32 count = 6;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_count(), target);
  }

  // repeated .kandan_lg.PUser.PActivitiesInUser.PChannelInActivity.PAttachmentsInChannel attachments = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attachments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_attachments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PUser.PActivitiesInUser.PChannelInActivity)
  return target;
}

size_t PUser_PActivitiesInUser_PChannelInActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PUser.PActivitiesInUser.PChannelInActivity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kandan_lg.PUser.PActivitiesInUser.PChannelInActivity.PAttachmentsInChannel attachments = 7;
  total_size += 1UL * this->_internal_attachments_size();
  for (const auto& msg : this->attachments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 created_at = 3;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 4;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 user_id = 5;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  // uint32 count = 6;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PUser_PActivitiesInUser_PChannelInActivity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PUser.PActivitiesInUser.PChannelInActivity)
  GOOGLE_DCHECK_NE(&from, this);
  const PUser_PActivitiesInUser_PChannelInActivity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PUser_PActivitiesInUser_PChannelInActivity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PUser.PActivitiesInUser.PChannelInActivity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PUser.PActivitiesInUser.PChannelInActivity)
    MergeFrom(*source);
  }
}

void PUser_PActivitiesInUser_PChannelInActivity::MergeFrom(const PUser_PActivitiesInUser_PChannelInActivity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PUser.PActivitiesInUser.PChannelInActivity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attachments_.MergeFrom(from.attachments_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void PUser_PActivitiesInUser_PChannelInActivity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PUser.PActivitiesInUser.PChannelInActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PUser_PActivitiesInUser_PChannelInActivity::CopyFrom(const PUser_PActivitiesInUser_PChannelInActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PUser.PActivitiesInUser.PChannelInActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PUser_PActivitiesInUser_PChannelInActivity::IsInitialized() const {
  return true;
}

void PUser_PActivitiesInUser_PChannelInActivity::InternalSwap(PUser_PActivitiesInUser_PChannelInActivity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  attachments_.InternalSwap(&other->attachments_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(user_id_, other->user_id_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PUser_PActivitiesInUser_PChannelInActivity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PUser_PActivitiesInUser::InitAsDefaultInstance() {
  ::kandan_lg::_PUser_PActivitiesInUser_default_instance_._instance.get_mutable()->channel_ = const_cast< ::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity*>(
      ::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity::internal_default_instance());
}
class PUser_PActivitiesInUser::_Internal {
 public:
  static const ::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity& channel(const PUser_PActivitiesInUser* msg);
};

const ::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity&
PUser_PActivitiesInUser::_Internal::channel(const PUser_PActivitiesInUser* msg) {
  return *msg->channel_;
}
PUser_PActivitiesInUser::PUser_PActivitiesInUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PUser.PActivitiesInUser)
}
PUser_PActivitiesInUser::PUser_PActivitiesInUser(const PUser_PActivitiesInUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from._internal_has_channel()) {
    channel_ = new ::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PUser.PActivitiesInUser)
}

void PUser_PActivitiesInUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PUser_PActivitiesInUser_proto_5fkandan_5flg_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(user_id_));
}

PUser_PActivitiesInUser::~PUser_PActivitiesInUser() {
  // @@protoc_insertion_point(destructor:kandan_lg.PUser.PActivitiesInUser)
  SharedDtor();
}

void PUser_PActivitiesInUser::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete channel_;
}

void PUser_PActivitiesInUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PUser_PActivitiesInUser& PUser_PActivitiesInUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PUser_PActivitiesInUser_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PUser_PActivitiesInUser::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PUser.PActivitiesInUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(user_id_));
  _internal_metadata_.Clear();
}

const char* PUser_PActivitiesInUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PUser.PActivitiesInUser.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PUser.PActivitiesInUser.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 channel_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kandan_lg.PUser.PActivitiesInUser.PChannelInActivity channel = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PUser_PActivitiesInUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PUser.PActivitiesInUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 created_at = 2;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 3;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_updated_at(), target);
  }

  // string action = 4;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PUser.PActivitiesInUser.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  // string content = 5;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PUser.PActivitiesInUser.content");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_content(), target);
  }

  // uint32 channel_id = 6;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_channel_id(), target);
  }

  // uint32 user_id = 7;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_user_id(), target);
  }

  // .kandan_lg.PUser.PActivitiesInUser.PChannelInActivity channel = 8;
  if (this->has_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::channel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PUser.PActivitiesInUser)
  return target;
}

size_t PUser_PActivitiesInUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PUser.PActivitiesInUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action = 4;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // string content = 5;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // .kandan_lg.PUser.PActivitiesInUser.PChannelInActivity channel = 8;
  if (this->has_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 created_at = 2;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 3;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 channel_id = 6;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel_id());
  }

  // uint32 user_id = 7;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PUser_PActivitiesInUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PUser.PActivitiesInUser)
  GOOGLE_DCHECK_NE(&from, this);
  const PUser_PActivitiesInUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PUser_PActivitiesInUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PUser.PActivitiesInUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PUser.PActivitiesInUser)
    MergeFrom(*source);
  }
}

void PUser_PActivitiesInUser::MergeFrom(const PUser_PActivitiesInUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PUser.PActivitiesInUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_channel()) {
    _internal_mutable_channel()->::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity::MergeFrom(from._internal_channel());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void PUser_PActivitiesInUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PUser.PActivitiesInUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PUser_PActivitiesInUser::CopyFrom(const PUser_PActivitiesInUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PUser.PActivitiesInUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PUser_PActivitiesInUser::IsInitialized() const {
  return true;
}

void PUser_PActivitiesInUser::InternalSwap(PUser_PActivitiesInUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_, other->channel_);
  swap(id_, other->id_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(channel_id_, other->channel_id_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PUser_PActivitiesInUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel::InitAsDefaultInstance() {
}
class PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel::_Internal {
 public:
};

PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel::PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment.PActivitiesInChannel)
}
PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel::PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel(const PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment.PActivitiesInChannel)
}

void PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel_proto_5fkandan_5flg_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(user_id_));
}

PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel::~PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel() {
  // @@protoc_insertion_point(destructor:kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment.PActivitiesInChannel)
  SharedDtor();
}

void PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel& PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment.PActivitiesInChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(user_id_));
  _internal_metadata_.Clear();
}

const char* PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment.PActivitiesInChannel.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment.PActivitiesInChannel.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 channel_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment.PActivitiesInChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 created_at = 2;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 3;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_updated_at(), target);
  }

  // string action = 4;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment.PActivitiesInChannel.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  // string content = 5;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment.PActivitiesInChannel.content");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_content(), target);
  }

  // uint32 channel_id = 6;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_channel_id(), target);
  }

  // uint32 user_id = 7;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment.PActivitiesInChannel)
  return target;
}

size_t PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment.PActivitiesInChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action = 4;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // string content = 5;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 created_at = 2;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 3;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 channel_id = 6;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel_id());
  }

  // uint32 user_id = 7;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment.PActivitiesInChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment.PActivitiesInChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment.PActivitiesInChannel)
    MergeFrom(*source);
  }
}

void PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel::MergeFrom(const PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment.PActivitiesInChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment.PActivitiesInChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel::CopyFrom(const PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment.PActivitiesInChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel::IsInitialized() const {
  return true;
}

void PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel::InternalSwap(PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(channel_id_, other->channel_id_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PUser_PAttachmentsInUser_PChannelInAttachment::InitAsDefaultInstance() {
}
class PUser_PAttachmentsInUser_PChannelInAttachment::_Internal {
 public:
};

PUser_PAttachmentsInUser_PChannelInAttachment::PUser_PAttachmentsInUser_PChannelInAttachment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment)
}
PUser_PAttachmentsInUser_PChannelInAttachment::PUser_PAttachmentsInUser_PChannelInAttachment(const PUser_PAttachmentsInUser_PChannelInAttachment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      activities_(from.activities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&id_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment)
}

void PUser_PAttachmentsInUser_PChannelInAttachment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PUser_PAttachmentsInUser_PChannelInAttachment_proto_5fkandan_5flg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&id_)) + sizeof(count_));
}

PUser_PAttachmentsInUser_PChannelInAttachment::~PUser_PAttachmentsInUser_PChannelInAttachment() {
  // @@protoc_insertion_point(destructor:kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment)
  SharedDtor();
}

void PUser_PAttachmentsInUser_PChannelInAttachment::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PUser_PAttachmentsInUser_PChannelInAttachment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PUser_PAttachmentsInUser_PChannelInAttachment& PUser_PAttachmentsInUser_PChannelInAttachment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PUser_PAttachmentsInUser_PChannelInAttachment_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PUser_PAttachmentsInUser_PChannelInAttachment::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activities_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&id_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

const char* PUser_PAttachmentsInUser_PChannelInAttachment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment.PActivitiesInChannel activities = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_activities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PUser_PAttachmentsInUser_PChannelInAttachment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 created_at = 3;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 4;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_updated_at(), target);
  }

  // uint32 user_id = 5;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_user_id(), target);
  }

  // uint32 count = 6;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_count(), target);
  }

  // repeated .kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment.PActivitiesInChannel activities = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_activities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_activities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment)
  return target;
}

size_t PUser_PAttachmentsInUser_PChannelInAttachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment.PActivitiesInChannel activities = 7;
  total_size += 1UL * this->_internal_activities_size();
  for (const auto& msg : this->activities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 created_at = 3;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 4;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 user_id = 5;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  // uint32 count = 6;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PUser_PAttachmentsInUser_PChannelInAttachment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  const PUser_PAttachmentsInUser_PChannelInAttachment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PUser_PAttachmentsInUser_PChannelInAttachment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment)
    MergeFrom(*source);
  }
}

void PUser_PAttachmentsInUser_PChannelInAttachment::MergeFrom(const PUser_PAttachmentsInUser_PChannelInAttachment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  activities_.MergeFrom(from.activities_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void PUser_PAttachmentsInUser_PChannelInAttachment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PUser_PAttachmentsInUser_PChannelInAttachment::CopyFrom(const PUser_PAttachmentsInUser_PChannelInAttachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PUser_PAttachmentsInUser_PChannelInAttachment::IsInitialized() const {
  return true;
}

void PUser_PAttachmentsInUser_PChannelInAttachment::InternalSwap(PUser_PAttachmentsInUser_PChannelInAttachment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  activities_.InternalSwap(&other->activities_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(user_id_, other->user_id_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PUser_PAttachmentsInUser_PChannelInAttachment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PUser_PAttachmentsInUser::InitAsDefaultInstance() {
  ::kandan_lg::_PUser_PAttachmentsInUser_default_instance_._instance.get_mutable()->channel_ = const_cast< ::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment*>(
      ::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment::internal_default_instance());
}
class PUser_PAttachmentsInUser::_Internal {
 public:
  static const ::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment& channel(const PUser_PAttachmentsInUser* msg);
};

const ::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment&
PUser_PAttachmentsInUser::_Internal::channel(const PUser_PAttachmentsInUser* msg) {
  return *msg->channel_;
}
PUser_PAttachmentsInUser::PUser_PAttachmentsInUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PUser.PAttachmentsInUser)
}
PUser_PAttachmentsInUser::PUser_PAttachmentsInUser(const PUser_PAttachmentsInUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_file_name().empty()) {
    file_file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_file_name_);
  }
  file_content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_content_type().empty()) {
    file_content_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_content_type_);
  }
  if (from._internal_has_channel()) {
    channel_ = new ::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(channel_id_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PUser.PAttachmentsInUser)
}

void PUser_PAttachmentsInUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PUser_PAttachmentsInUser_proto_5fkandan_5flg_2eproto.base);
  file_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(channel_id_));
}

PUser_PAttachmentsInUser::~PUser_PAttachmentsInUser() {
  // @@protoc_insertion_point(destructor:kandan_lg.PUser.PAttachmentsInUser)
  SharedDtor();
}

void PUser_PAttachmentsInUser::SharedDtor() {
  file_file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete channel_;
}

void PUser_PAttachmentsInUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PUser_PAttachmentsInUser& PUser_PAttachmentsInUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PUser_PAttachmentsInUser_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PUser_PAttachmentsInUser::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PUser.PAttachmentsInUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(channel_id_));
  _internal_metadata_.Clear();
}

const char* PUser_PAttachmentsInUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PUser.PAttachmentsInUser.file_file_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_content_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_file_content_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PUser.PAttachmentsInUser.file_content_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_file_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          file_file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 message_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_updated_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          file_updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 channel_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment channel = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PUser_PAttachmentsInUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PUser.PAttachmentsInUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string file_file_name = 2;
  if (this->file_file_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_file_name().data(), static_cast<int>(this->_internal_file_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PUser.PAttachmentsInUser.file_file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_file_name(), target);
  }

  // string file_content_type = 3;
  if (this->file_content_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_content_type().data(), static_cast<int>(this->_internal_file_content_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PUser.PAttachmentsInUser.file_content_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_content_type(), target);
  }

  // uint32 file_file_size = 4;
  if (this->file_file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_file_file_size(), target);
  }

  // uint32 message_id = 5;
  if (this->message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_message_id(), target);
  }

  // uint32 file_updated_at = 6;
  if (this->file_updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_file_updated_at(), target);
  }

  // uint32 created_at = 7;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 8;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_updated_at(), target);
  }

  // uint32 user_id = 9;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_user_id(), target);
  }

  // uint32 channel_id = 10;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_channel_id(), target);
  }

  // .kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment channel = 11;
  if (this->has_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::channel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PUser.PAttachmentsInUser)
  return target;
}

size_t PUser_PAttachmentsInUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PUser.PAttachmentsInUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_file_name = 2;
  if (this->file_file_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_file_name());
  }

  // string file_content_type = 3;
  if (this->file_content_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_content_type());
  }

  // .kandan_lg.PUser.PAttachmentsInUser.PChannelInAttachment channel = 11;
  if (this->has_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 file_file_size = 4;
  if (this->file_file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_file_size());
  }

  // uint32 message_id = 5;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_message_id());
  }

  // uint32 file_updated_at = 6;
  if (this->file_updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_updated_at());
  }

  // uint32 created_at = 7;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 8;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 user_id = 9;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  // uint32 channel_id = 10;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PUser_PAttachmentsInUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PUser.PAttachmentsInUser)
  GOOGLE_DCHECK_NE(&from, this);
  const PUser_PAttachmentsInUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PUser_PAttachmentsInUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PUser.PAttachmentsInUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PUser.PAttachmentsInUser)
    MergeFrom(*source);
  }
}

void PUser_PAttachmentsInUser::MergeFrom(const PUser_PAttachmentsInUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PUser.PAttachmentsInUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_file_name().size() > 0) {

    file_file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_file_name_);
  }
  if (from.file_content_type().size() > 0) {

    file_content_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_content_type_);
  }
  if (from.has_channel()) {
    _internal_mutable_channel()->::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment::MergeFrom(from._internal_channel());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.file_file_size() != 0) {
    _internal_set_file_file_size(from._internal_file_file_size());
  }
  if (from.message_id() != 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from.file_updated_at() != 0) {
    _internal_set_file_updated_at(from._internal_file_updated_at());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
}

void PUser_PAttachmentsInUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PUser.PAttachmentsInUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PUser_PAttachmentsInUser::CopyFrom(const PUser_PAttachmentsInUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PUser.PAttachmentsInUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PUser_PAttachmentsInUser::IsInitialized() const {
  return true;
}

void PUser_PAttachmentsInUser::InternalSwap(PUser_PAttachmentsInUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_file_name_.Swap(&other->file_file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_content_type_.Swap(&other->file_content_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_, other->channel_);
  swap(id_, other->id_);
  swap(file_file_size_, other->file_file_size_);
  swap(message_id_, other->message_id_);
  swap(file_updated_at_, other->file_updated_at_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(user_id_, other->user_id_);
  swap(channel_id_, other->channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PUser_PAttachmentsInUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PUser::InitAsDefaultInstance() {
}
class PUser::_Internal {
 public:
};

PUser::PUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PUser)
}
PUser::PUser(const PUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      channels_(from.channels_),
      activities_(from.activities_),
      attachments_(from.attachments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  encrypted_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encrypted_password().empty()) {
    encrypted_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encrypted_password_);
  }
  reset_password_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reset_password_token().empty()) {
    reset_password_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reset_password_token_);
  }
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_first_name().empty()) {
    first_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_name().empty()) {
    last_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_name_);
  }
  current_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_current_sign_in_ip().empty()) {
    current_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.current_sign_in_ip_);
  }
  last_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_sign_in_ip().empty()) {
    last_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_sign_in_ip_);
  }
  auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth_token().empty()) {
    auth_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_token_);
  }
  locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_locale().empty()) {
    locale_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locale_);
  }
  gravatar_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gravatar_hash().empty()) {
    gravatar_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gravatar_hash_);
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  regstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_regstatus().empty()) {
    regstatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regstatus_);
  }
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_url().empty()) {
    avatar_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&updated_at_) -
    reinterpret_cast<char*>(&id_)) + sizeof(updated_at_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PUser)
}

void PUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PUser_proto_5fkandan_5flg_2eproto.base);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_password_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gravatar_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updated_at_) -
      reinterpret_cast<char*>(&id_)) + sizeof(updated_at_));
}

PUser::~PUser() {
  // @@protoc_insertion_point(destructor:kandan_lg.PUser)
  SharedDtor();
}

void PUser::SharedDtor() {
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_password_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gravatar_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regstatus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PUser& PUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PUser_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PUser::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  activities_.Clear();
  attachments_.Clear();
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_password_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gravatar_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regstatus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updated_at_) -
      reinterpret_cast<char*>(&id_)) + sizeof(updated_at_));
  _internal_metadata_.Clear();
}

const char* PUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PUser.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string encrypted_password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_encrypted_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PUser.encrypted_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reset_password_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reset_password_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PUser.reset_password_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 reset_password_sent_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          reset_password_sent_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 remember_created_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          remember_created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string first_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_first_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PUser.first_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_last_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PUser.last_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 signin_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          signin_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 current_sign_in_at = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          current_sign_in_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string current_sign_in_ip = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_current_sign_in_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PUser.current_sign_in_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 last_sign_in_at = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          last_sign_in_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_sign_in_ip = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_last_sign_in_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PUser.last_sign_in_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string auth_token = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_auth_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PUser.auth_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string locale = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_locale();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PUser.locale"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gravatar_hash = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_gravatar_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PUser.gravatar_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PUser.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string regstatus = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_regstatus();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PUser.regstatus"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool active = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_admin = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          is_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar_url = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PUser.avatar_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kandan_lg.PUser.PChannelsInUser channels = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kandan_lg.PUser.PActivitiesInUser activities = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_activities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kandan_lg.PUser.PAttachmentsInUser attachments = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_attachments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string email = 2;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PUser.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // string encrypted_password = 3;
  if (this->encrypted_password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encrypted_password().data(), static_cast<int>(this->_internal_encrypted_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PUser.encrypted_password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_encrypted_password(), target);
  }

  // string reset_password_token = 4;
  if (this->reset_password_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reset_password_token().data(), static_cast<int>(this->_internal_reset_password_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PUser.reset_password_token");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reset_password_token(), target);
  }

  // uint32 reset_password_sent_at = 5;
  if (this->reset_password_sent_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_reset_password_sent_at(), target);
  }

  // uint32 remember_created_at = 6;
  if (this->remember_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_remember_created_at(), target);
  }

  // string first_name = 7;
  if (this->first_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_name().data(), static_cast<int>(this->_internal_first_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PUser.first_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_first_name(), target);
  }

  // string last_name = 8;
  if (this->last_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_name().data(), static_cast<int>(this->_internal_last_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PUser.last_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_last_name(), target);
  }

  // uint32 signin_count = 9;
  if (this->signin_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_signin_count(), target);
  }

  // uint32 current_sign_in_at = 10;
  if (this->current_sign_in_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_current_sign_in_at(), target);
  }

  // string current_sign_in_ip = 11;
  if (this->current_sign_in_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_sign_in_ip().data(), static_cast<int>(this->_internal_current_sign_in_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PUser.current_sign_in_ip");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_current_sign_in_ip(), target);
  }

  // uint32 last_sign_in_at = 12;
  if (this->last_sign_in_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_last_sign_in_at(), target);
  }

  // string last_sign_in_ip = 13;
  if (this->last_sign_in_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_sign_in_ip().data(), static_cast<int>(this->_internal_last_sign_in_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PUser.last_sign_in_ip");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_last_sign_in_ip(), target);
  }

  // string auth_token = 14;
  if (this->auth_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_token().data(), static_cast<int>(this->_internal_auth_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PUser.auth_token");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_auth_token(), target);
  }

  // string locale = 15;
  if (this->locale().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_locale().data(), static_cast<int>(this->_internal_locale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PUser.locale");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_locale(), target);
  }

  // string gravatar_hash = 16;
  if (this->gravatar_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gravatar_hash().data(), static_cast<int>(this->_internal_gravatar_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PUser.gravatar_hash");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_gravatar_hash(), target);
  }

  // string username = 17;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PUser.username");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_username(), target);
  }

  // string regstatus = 18;
  if (this->regstatus().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_regstatus().data(), static_cast<int>(this->_internal_regstatus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PUser.regstatus");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_regstatus(), target);
  }

  // bool active = 19;
  if (this->active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_active(), target);
  }

  // bool is_admin = 20;
  if (this->is_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_is_admin(), target);
  }

  // string avatar_url = 21;
  if (this->avatar_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PUser.avatar_url");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_avatar_url(), target);
  }

  // uint32 created_at = 22;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 23;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_updated_at(), target);
  }

  // repeated .kandan_lg.PUser.PChannelsInUser channels = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_channels(i), target, stream);
  }

  // repeated .kandan_lg.PUser.PActivitiesInUser activities = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_activities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, this->_internal_activities(i), target, stream);
  }

  // repeated .kandan_lg.PUser.PAttachmentsInUser attachments = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attachments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_attachments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PUser)
  return target;
}

size_t PUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kandan_lg.PUser.PChannelsInUser channels = 24;
  total_size += 2UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kandan_lg.PUser.PActivitiesInUser activities = 25;
  total_size += 2UL * this->_internal_activities_size();
  for (const auto& msg : this->activities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kandan_lg.PUser.PAttachmentsInUser attachments = 26;
  total_size += 2UL * this->_internal_attachments_size();
  for (const auto& msg : this->attachments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string email = 2;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string encrypted_password = 3;
  if (this->encrypted_password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encrypted_password());
  }

  // string reset_password_token = 4;
  if (this->reset_password_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reset_password_token());
  }

  // string first_name = 7;
  if (this->first_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_name());
  }

  // string last_name = 8;
  if (this->last_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_name());
  }

  // string current_sign_in_ip = 11;
  if (this->current_sign_in_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_sign_in_ip());
  }

  // string last_sign_in_ip = 13;
  if (this->last_sign_in_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_sign_in_ip());
  }

  // string auth_token = 14;
  if (this->auth_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_token());
  }

  // string locale = 15;
  if (this->locale().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locale());
  }

  // string gravatar_hash = 16;
  if (this->gravatar_hash().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gravatar_hash());
  }

  // string username = 17;
  if (this->username().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string regstatus = 18;
  if (this->regstatus().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regstatus());
  }

  // string avatar_url = 21;
  if (this->avatar_url().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar_url());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 reset_password_sent_at = 5;
  if (this->reset_password_sent_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reset_password_sent_at());
  }

  // uint32 remember_created_at = 6;
  if (this->remember_created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_remember_created_at());
  }

  // uint32 signin_count = 9;
  if (this->signin_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_signin_count());
  }

  // uint32 current_sign_in_at = 10;
  if (this->current_sign_in_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_current_sign_in_at());
  }

  // uint32 last_sign_in_at = 12;
  if (this->last_sign_in_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_sign_in_at());
  }

  // bool active = 19;
  if (this->active() != 0) {
    total_size += 2 + 1;
  }

  // bool is_admin = 20;
  if (this->is_admin() != 0) {
    total_size += 2 + 1;
  }

  // uint32 created_at = 22;
  if (this->created_at() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 23;
  if (this->updated_at() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PUser)
  GOOGLE_DCHECK_NE(&from, this);
  const PUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PUser)
    MergeFrom(*source);
  }
}

void PUser::MergeFrom(const PUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  activities_.MergeFrom(from.activities_);
  attachments_.MergeFrom(from.attachments_);
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.encrypted_password().size() > 0) {

    encrypted_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encrypted_password_);
  }
  if (from.reset_password_token().size() > 0) {

    reset_password_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reset_password_token_);
  }
  if (from.first_name().size() > 0) {

    first_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  if (from.last_name().size() > 0) {

    last_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_name_);
  }
  if (from.current_sign_in_ip().size() > 0) {

    current_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.current_sign_in_ip_);
  }
  if (from.last_sign_in_ip().size() > 0) {

    last_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_sign_in_ip_);
  }
  if (from.auth_token().size() > 0) {

    auth_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_token_);
  }
  if (from.locale().size() > 0) {

    locale_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locale_);
  }
  if (from.gravatar_hash().size() > 0) {

    gravatar_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gravatar_hash_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.regstatus().size() > 0) {

    regstatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regstatus_);
  }
  if (from.avatar_url().size() > 0) {

    avatar_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.reset_password_sent_at() != 0) {
    _internal_set_reset_password_sent_at(from._internal_reset_password_sent_at());
  }
  if (from.remember_created_at() != 0) {
    _internal_set_remember_created_at(from._internal_remember_created_at());
  }
  if (from.signin_count() != 0) {
    _internal_set_signin_count(from._internal_signin_count());
  }
  if (from.current_sign_in_at() != 0) {
    _internal_set_current_sign_in_at(from._internal_current_sign_in_at());
  }
  if (from.last_sign_in_at() != 0) {
    _internal_set_last_sign_in_at(from._internal_last_sign_in_at());
  }
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
  if (from.is_admin() != 0) {
    _internal_set_is_admin(from._internal_is_admin());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
}

void PUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PUser::CopyFrom(const PUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PUser::IsInitialized() const {
  return true;
}

void PUser::InternalSwap(PUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
  activities_.InternalSwap(&other->activities_);
  attachments_.InternalSwap(&other->attachments_);
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  encrypted_password_.Swap(&other->encrypted_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reset_password_token_.Swap(&other->reset_password_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  first_name_.Swap(&other->first_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_name_.Swap(&other->last_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  current_sign_in_ip_.Swap(&other->current_sign_in_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_sign_in_ip_.Swap(&other->last_sign_in_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  auth_token_.Swap(&other->auth_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  locale_.Swap(&other->locale_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gravatar_hash_.Swap(&other->gravatar_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  regstatus_.Swap(&other->regstatus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatar_url_.Swap(&other->avatar_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(reset_password_sent_at_, other->reset_password_sent_at_);
  swap(remember_created_at_, other->remember_created_at_);
  swap(signin_count_, other->signin_count_);
  swap(current_sign_in_at_, other->current_sign_in_at_);
  swap(last_sign_in_at_, other->last_sign_in_at_);
  swap(active_, other->active_);
  swap(is_admin_, other->is_admin_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser::InitAsDefaultInstance() {
}
class PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser::_Internal {
 public:
};

PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser::PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.PAttachmentsInUser)
}
PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser::PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser(const PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_file_name().empty()) {
    file_file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_file_name_);
  }
  file_content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_content_type().empty()) {
    file_content_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_content_type_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(channel_id_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.PAttachmentsInUser)
}

void PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser_proto_5fkandan_5flg_2eproto.base);
  file_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(channel_id_));
}

PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser::~PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser() {
  // @@protoc_insertion_point(destructor:kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.PAttachmentsInUser)
  SharedDtor();
}

void PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser::SharedDtor() {
  file_file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser& PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.PAttachmentsInUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(channel_id_));
  _internal_metadata_.Clear();
}

const char* PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.PAttachmentsInUser.file_file_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_content_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_file_content_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.PAttachmentsInUser.file_content_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_file_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          file_file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 message_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_updated_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          file_updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 channel_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.PAttachmentsInUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string file_file_name = 2;
  if (this->file_file_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_file_name().data(), static_cast<int>(this->_internal_file_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.PAttachmentsInUser.file_file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_file_name(), target);
  }

  // string file_content_type = 3;
  if (this->file_content_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_content_type().data(), static_cast<int>(this->_internal_file_content_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.PAttachmentsInUser.file_content_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_content_type(), target);
  }

  // uint32 file_file_size = 4;
  if (this->file_file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_file_file_size(), target);
  }

  // uint32 message_id = 5;
  if (this->message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_message_id(), target);
  }

  // uint32 file_updated_at = 6;
  if (this->file_updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_file_updated_at(), target);
  }

  // uint32 created_at = 7;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 8;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_updated_at(), target);
  }

  // uint32 user_id = 9;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_user_id(), target);
  }

  // uint32 channel_id = 10;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.PAttachmentsInUser)
  return target;
}

size_t PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.PAttachmentsInUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_file_name = 2;
  if (this->file_file_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_file_name());
  }

  // string file_content_type = 3;
  if (this->file_content_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_content_type());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 file_file_size = 4;
  if (this->file_file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_file_size());
  }

  // uint32 message_id = 5;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_message_id());
  }

  // uint32 file_updated_at = 6;
  if (this->file_updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_updated_at());
  }

  // uint32 created_at = 7;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 8;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 user_id = 9;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  // uint32 channel_id = 10;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.PAttachmentsInUser)
  GOOGLE_DCHECK_NE(&from, this);
  const PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.PAttachmentsInUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.PAttachmentsInUser)
    MergeFrom(*source);
  }
}

void PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser::MergeFrom(const PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.PAttachmentsInUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_file_name().size() > 0) {

    file_file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_file_name_);
  }
  if (from.file_content_type().size() > 0) {

    file_content_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_content_type_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.file_file_size() != 0) {
    _internal_set_file_file_size(from._internal_file_file_size());
  }
  if (from.message_id() != 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from.file_updated_at() != 0) {
    _internal_set_file_updated_at(from._internal_file_updated_at());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
}

void PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.PAttachmentsInUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser::CopyFrom(const PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.PAttachmentsInUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser::IsInitialized() const {
  return true;
}

void PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser::InternalSwap(PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_file_name_.Swap(&other->file_file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_content_type_.Swap(&other->file_content_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(file_file_size_, other->file_file_size_);
  swap(message_id_, other->message_id_);
  swap(file_updated_at_, other->file_updated_at_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(user_id_, other->user_id_);
  swap(channel_id_, other->channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PChannel_PActivitiesInChannel_PUserInActivity::InitAsDefaultInstance() {
}
class PChannel_PActivitiesInChannel_PUserInActivity::_Internal {
 public:
};

PChannel_PActivitiesInChannel_PUserInActivity::PChannel_PActivitiesInChannel_PUserInActivity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity)
}
PChannel_PActivitiesInChannel_PUserInActivity::PChannel_PActivitiesInChannel_PUserInActivity(const PChannel_PActivitiesInChannel_PUserInActivity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      attachments_(from.attachments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  encrypted_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encrypted_password().empty()) {
    encrypted_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encrypted_password_);
  }
  reset_password_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reset_password_token().empty()) {
    reset_password_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reset_password_token_);
  }
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_first_name().empty()) {
    first_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_name().empty()) {
    last_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_name_);
  }
  current_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_current_sign_in_ip().empty()) {
    current_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.current_sign_in_ip_);
  }
  last_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_sign_in_ip().empty()) {
    last_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_sign_in_ip_);
  }
  auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth_token().empty()) {
    auth_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_token_);
  }
  locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_locale().empty()) {
    locale_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locale_);
  }
  gravatar_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gravatar_hash().empty()) {
    gravatar_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gravatar_hash_);
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  regstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_regstatus().empty()) {
    regstatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regstatus_);
  }
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_url().empty()) {
    avatar_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&updated_at_) -
    reinterpret_cast<char*>(&id_)) + sizeof(updated_at_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity)
}

void PChannel_PActivitiesInChannel_PUserInActivity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PChannel_PActivitiesInChannel_PUserInActivity_proto_5fkandan_5flg_2eproto.base);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_password_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gravatar_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updated_at_) -
      reinterpret_cast<char*>(&id_)) + sizeof(updated_at_));
}

PChannel_PActivitiesInChannel_PUserInActivity::~PChannel_PActivitiesInChannel_PUserInActivity() {
  // @@protoc_insertion_point(destructor:kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity)
  SharedDtor();
}

void PChannel_PActivitiesInChannel_PUserInActivity::SharedDtor() {
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_password_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gravatar_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regstatus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PChannel_PActivitiesInChannel_PUserInActivity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PChannel_PActivitiesInChannel_PUserInActivity& PChannel_PActivitiesInChannel_PUserInActivity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PChannel_PActivitiesInChannel_PUserInActivity_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PChannel_PActivitiesInChannel_PUserInActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attachments_.Clear();
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_password_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gravatar_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regstatus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updated_at_) -
      reinterpret_cast<char*>(&id_)) + sizeof(updated_at_));
  _internal_metadata_.Clear();
}

const char* PChannel_PActivitiesInChannel_PUserInActivity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string encrypted_password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_encrypted_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.encrypted_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reset_password_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reset_password_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.reset_password_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 reset_password_sent_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          reset_password_sent_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 remember_created_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          remember_created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string first_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_first_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.first_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_last_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.last_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 signin_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          signin_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 current_sign_in_at = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          current_sign_in_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string current_sign_in_ip = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_current_sign_in_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.current_sign_in_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 last_sign_in_at = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          last_sign_in_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_sign_in_ip = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_last_sign_in_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.last_sign_in_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string auth_token = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_auth_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.auth_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string locale = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_locale();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.locale"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gravatar_hash = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_gravatar_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.gravatar_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string regstatus = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_regstatus();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.regstatus"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool active = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_admin = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          is_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar_url = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.avatar_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.PAttachmentsInUser attachments = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_attachments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PChannel_PActivitiesInChannel_PUserInActivity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string email = 2;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // string encrypted_password = 3;
  if (this->encrypted_password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encrypted_password().data(), static_cast<int>(this->_internal_encrypted_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.encrypted_password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_encrypted_password(), target);
  }

  // string reset_password_token = 4;
  if (this->reset_password_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reset_password_token().data(), static_cast<int>(this->_internal_reset_password_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.reset_password_token");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reset_password_token(), target);
  }

  // uint32 reset_password_sent_at = 5;
  if (this->reset_password_sent_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_reset_password_sent_at(), target);
  }

  // uint32 remember_created_at = 6;
  if (this->remember_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_remember_created_at(), target);
  }

  // string first_name = 7;
  if (this->first_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_name().data(), static_cast<int>(this->_internal_first_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.first_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_first_name(), target);
  }

  // string last_name = 8;
  if (this->last_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_name().data(), static_cast<int>(this->_internal_last_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.last_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_last_name(), target);
  }

  // uint32 signin_count = 9;
  if (this->signin_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_signin_count(), target);
  }

  // uint32 current_sign_in_at = 10;
  if (this->current_sign_in_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_current_sign_in_at(), target);
  }

  // string current_sign_in_ip = 11;
  if (this->current_sign_in_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_sign_in_ip().data(), static_cast<int>(this->_internal_current_sign_in_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.current_sign_in_ip");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_current_sign_in_ip(), target);
  }

  // uint32 last_sign_in_at = 12;
  if (this->last_sign_in_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_last_sign_in_at(), target);
  }

  // string last_sign_in_ip = 13;
  if (this->last_sign_in_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_sign_in_ip().data(), static_cast<int>(this->_internal_last_sign_in_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.last_sign_in_ip");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_last_sign_in_ip(), target);
  }

  // string auth_token = 14;
  if (this->auth_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_token().data(), static_cast<int>(this->_internal_auth_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.auth_token");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_auth_token(), target);
  }

  // string locale = 15;
  if (this->locale().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_locale().data(), static_cast<int>(this->_internal_locale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.locale");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_locale(), target);
  }

  // string gravatar_hash = 16;
  if (this->gravatar_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gravatar_hash().data(), static_cast<int>(this->_internal_gravatar_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.gravatar_hash");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_gravatar_hash(), target);
  }

  // string username = 17;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.username");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_username(), target);
  }

  // string regstatus = 18;
  if (this->regstatus().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_regstatus().data(), static_cast<int>(this->_internal_regstatus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.regstatus");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_regstatus(), target);
  }

  // bool active = 19;
  if (this->active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_active(), target);
  }

  // bool is_admin = 20;
  if (this->is_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_is_admin(), target);
  }

  // string avatar_url = 21;
  if (this->avatar_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.avatar_url");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_avatar_url(), target);
  }

  // uint32 created_at = 22;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 23;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_updated_at(), target);
  }

  // repeated .kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.PAttachmentsInUser attachments = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attachments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_attachments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity)
  return target;
}

size_t PChannel_PActivitiesInChannel_PUserInActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity.PAttachmentsInUser attachments = 24;
  total_size += 2UL * this->_internal_attachments_size();
  for (const auto& msg : this->attachments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string email = 2;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string encrypted_password = 3;
  if (this->encrypted_password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encrypted_password());
  }

  // string reset_password_token = 4;
  if (this->reset_password_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reset_password_token());
  }

  // string first_name = 7;
  if (this->first_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_name());
  }

  // string last_name = 8;
  if (this->last_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_name());
  }

  // string current_sign_in_ip = 11;
  if (this->current_sign_in_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_sign_in_ip());
  }

  // string last_sign_in_ip = 13;
  if (this->last_sign_in_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_sign_in_ip());
  }

  // string auth_token = 14;
  if (this->auth_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_token());
  }

  // string locale = 15;
  if (this->locale().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locale());
  }

  // string gravatar_hash = 16;
  if (this->gravatar_hash().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gravatar_hash());
  }

  // string username = 17;
  if (this->username().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string regstatus = 18;
  if (this->regstatus().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regstatus());
  }

  // string avatar_url = 21;
  if (this->avatar_url().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar_url());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 reset_password_sent_at = 5;
  if (this->reset_password_sent_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reset_password_sent_at());
  }

  // uint32 remember_created_at = 6;
  if (this->remember_created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_remember_created_at());
  }

  // uint32 signin_count = 9;
  if (this->signin_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_signin_count());
  }

  // uint32 current_sign_in_at = 10;
  if (this->current_sign_in_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_current_sign_in_at());
  }

  // uint32 last_sign_in_at = 12;
  if (this->last_sign_in_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_sign_in_at());
  }

  // bool active = 19;
  if (this->active() != 0) {
    total_size += 2 + 1;
  }

  // bool is_admin = 20;
  if (this->is_admin() != 0) {
    total_size += 2 + 1;
  }

  // uint32 created_at = 22;
  if (this->created_at() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 23;
  if (this->updated_at() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PChannel_PActivitiesInChannel_PUserInActivity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity)
  GOOGLE_DCHECK_NE(&from, this);
  const PChannel_PActivitiesInChannel_PUserInActivity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PChannel_PActivitiesInChannel_PUserInActivity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity)
    MergeFrom(*source);
  }
}

void PChannel_PActivitiesInChannel_PUserInActivity::MergeFrom(const PChannel_PActivitiesInChannel_PUserInActivity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attachments_.MergeFrom(from.attachments_);
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.encrypted_password().size() > 0) {

    encrypted_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encrypted_password_);
  }
  if (from.reset_password_token().size() > 0) {

    reset_password_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reset_password_token_);
  }
  if (from.first_name().size() > 0) {

    first_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  if (from.last_name().size() > 0) {

    last_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_name_);
  }
  if (from.current_sign_in_ip().size() > 0) {

    current_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.current_sign_in_ip_);
  }
  if (from.last_sign_in_ip().size() > 0) {

    last_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_sign_in_ip_);
  }
  if (from.auth_token().size() > 0) {

    auth_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_token_);
  }
  if (from.locale().size() > 0) {

    locale_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locale_);
  }
  if (from.gravatar_hash().size() > 0) {

    gravatar_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gravatar_hash_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.regstatus().size() > 0) {

    regstatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regstatus_);
  }
  if (from.avatar_url().size() > 0) {

    avatar_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.reset_password_sent_at() != 0) {
    _internal_set_reset_password_sent_at(from._internal_reset_password_sent_at());
  }
  if (from.remember_created_at() != 0) {
    _internal_set_remember_created_at(from._internal_remember_created_at());
  }
  if (from.signin_count() != 0) {
    _internal_set_signin_count(from._internal_signin_count());
  }
  if (from.current_sign_in_at() != 0) {
    _internal_set_current_sign_in_at(from._internal_current_sign_in_at());
  }
  if (from.last_sign_in_at() != 0) {
    _internal_set_last_sign_in_at(from._internal_last_sign_in_at());
  }
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
  if (from.is_admin() != 0) {
    _internal_set_is_admin(from._internal_is_admin());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
}

void PChannel_PActivitiesInChannel_PUserInActivity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PChannel_PActivitiesInChannel_PUserInActivity::CopyFrom(const PChannel_PActivitiesInChannel_PUserInActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PChannel_PActivitiesInChannel_PUserInActivity::IsInitialized() const {
  return true;
}

void PChannel_PActivitiesInChannel_PUserInActivity::InternalSwap(PChannel_PActivitiesInChannel_PUserInActivity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  attachments_.InternalSwap(&other->attachments_);
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  encrypted_password_.Swap(&other->encrypted_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reset_password_token_.Swap(&other->reset_password_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  first_name_.Swap(&other->first_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_name_.Swap(&other->last_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  current_sign_in_ip_.Swap(&other->current_sign_in_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_sign_in_ip_.Swap(&other->last_sign_in_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  auth_token_.Swap(&other->auth_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  locale_.Swap(&other->locale_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gravatar_hash_.Swap(&other->gravatar_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  regstatus_.Swap(&other->regstatus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatar_url_.Swap(&other->avatar_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(reset_password_sent_at_, other->reset_password_sent_at_);
  swap(remember_created_at_, other->remember_created_at_);
  swap(signin_count_, other->signin_count_);
  swap(current_sign_in_at_, other->current_sign_in_at_);
  swap(last_sign_in_at_, other->last_sign_in_at_);
  swap(active_, other->active_);
  swap(is_admin_, other->is_admin_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PChannel_PActivitiesInChannel_PUserInActivity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PChannel_PActivitiesInChannel::InitAsDefaultInstance() {
  ::kandan_lg::_PChannel_PActivitiesInChannel_default_instance_._instance.get_mutable()->user_ = const_cast< ::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity*>(
      ::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity::internal_default_instance());
}
class PChannel_PActivitiesInChannel::_Internal {
 public:
  static const ::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity& user(const PChannel_PActivitiesInChannel* msg);
};

const ::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity&
PChannel_PActivitiesInChannel::_Internal::user(const PChannel_PActivitiesInChannel* msg) {
  return *msg->user_;
}
PChannel_PActivitiesInChannel::PChannel_PActivitiesInChannel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PChannel.PActivitiesInChannel)
}
PChannel_PActivitiesInChannel::PChannel_PActivitiesInChannel(const PChannel_PActivitiesInChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from._internal_has_user()) {
    user_ = new ::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity(*from.user_);
  } else {
    user_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PChannel.PActivitiesInChannel)
}

void PChannel_PActivitiesInChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PChannel_PActivitiesInChannel_proto_5fkandan_5flg_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&user_)) + sizeof(user_id_));
}

PChannel_PActivitiesInChannel::~PChannel_PActivitiesInChannel() {
  // @@protoc_insertion_point(destructor:kandan_lg.PChannel.PActivitiesInChannel)
  SharedDtor();
}

void PChannel_PActivitiesInChannel::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_;
}

void PChannel_PActivitiesInChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PChannel_PActivitiesInChannel& PChannel_PActivitiesInChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PChannel_PActivitiesInChannel_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PChannel_PActivitiesInChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PChannel.PActivitiesInChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(user_id_));
  _internal_metadata_.Clear();
}

const char* PChannel_PActivitiesInChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PActivitiesInChannel.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PActivitiesInChannel.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 channel_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity user = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PChannel_PActivitiesInChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PChannel.PActivitiesInChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 created_at = 2;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 3;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_updated_at(), target);
  }

  // string action = 4;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PActivitiesInChannel.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  // string content = 5;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PActivitiesInChannel.content");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_content(), target);
  }

  // uint32 channel_id = 6;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_channel_id(), target);
  }

  // uint32 user_id = 7;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_user_id(), target);
  }

  // .kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity user = 8;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PChannel.PActivitiesInChannel)
  return target;
}

size_t PChannel_PActivitiesInChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PChannel.PActivitiesInChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action = 4;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // string content = 5;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // .kandan_lg.PChannel.PActivitiesInChannel.PUserInActivity user = 8;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 created_at = 2;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 3;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 channel_id = 6;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel_id());
  }

  // uint32 user_id = 7;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PChannel_PActivitiesInChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PChannel.PActivitiesInChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const PChannel_PActivitiesInChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PChannel_PActivitiesInChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PChannel.PActivitiesInChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PChannel.PActivitiesInChannel)
    MergeFrom(*source);
  }
}

void PChannel_PActivitiesInChannel::MergeFrom(const PChannel_PActivitiesInChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PChannel.PActivitiesInChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_user()) {
    _internal_mutable_user()->::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity::MergeFrom(from._internal_user());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void PChannel_PActivitiesInChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PChannel.PActivitiesInChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PChannel_PActivitiesInChannel::CopyFrom(const PChannel_PActivitiesInChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PChannel.PActivitiesInChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PChannel_PActivitiesInChannel::IsInitialized() const {
  return true;
}

void PChannel_PActivitiesInChannel::InternalSwap(PChannel_PActivitiesInChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_, other->user_);
  swap(id_, other->id_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(channel_id_, other->channel_id_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PChannel_PActivitiesInChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PChannel_PUserInChannel_PActivitiesInUser::InitAsDefaultInstance() {
}
class PChannel_PUserInChannel_PActivitiesInUser::_Internal {
 public:
};

PChannel_PUserInChannel_PActivitiesInUser::PChannel_PUserInChannel_PActivitiesInUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PChannel.PUserInChannel.PActivitiesInUser)
}
PChannel_PUserInChannel_PActivitiesInUser::PChannel_PUserInChannel_PActivitiesInUser(const PChannel_PUserInChannel_PActivitiesInUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PChannel.PUserInChannel.PActivitiesInUser)
}

void PChannel_PUserInChannel_PActivitiesInUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PChannel_PUserInChannel_PActivitiesInUser_proto_5fkandan_5flg_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(user_id_));
}

PChannel_PUserInChannel_PActivitiesInUser::~PChannel_PUserInChannel_PActivitiesInUser() {
  // @@protoc_insertion_point(destructor:kandan_lg.PChannel.PUserInChannel.PActivitiesInUser)
  SharedDtor();
}

void PChannel_PUserInChannel_PActivitiesInUser::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PChannel_PUserInChannel_PActivitiesInUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PChannel_PUserInChannel_PActivitiesInUser& PChannel_PUserInChannel_PActivitiesInUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PChannel_PUserInChannel_PActivitiesInUser_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PChannel_PUserInChannel_PActivitiesInUser::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PChannel.PUserInChannel.PActivitiesInUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(user_id_));
  _internal_metadata_.Clear();
}

const char* PChannel_PUserInChannel_PActivitiesInUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PUserInChannel.PActivitiesInUser.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PUserInChannel.PActivitiesInUser.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 channel_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PChannel_PUserInChannel_PActivitiesInUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PChannel.PUserInChannel.PActivitiesInUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 created_at = 2;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 3;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_updated_at(), target);
  }

  // string action = 4;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PUserInChannel.PActivitiesInUser.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  // string content = 5;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PUserInChannel.PActivitiesInUser.content");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_content(), target);
  }

  // uint32 channel_id = 6;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_channel_id(), target);
  }

  // uint32 user_id = 7;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PChannel.PUserInChannel.PActivitiesInUser)
  return target;
}

size_t PChannel_PUserInChannel_PActivitiesInUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PChannel.PUserInChannel.PActivitiesInUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action = 4;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // string content = 5;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 created_at = 2;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 3;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 channel_id = 6;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel_id());
  }

  // uint32 user_id = 7;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PChannel_PUserInChannel_PActivitiesInUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PChannel.PUserInChannel.PActivitiesInUser)
  GOOGLE_DCHECK_NE(&from, this);
  const PChannel_PUserInChannel_PActivitiesInUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PChannel_PUserInChannel_PActivitiesInUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PChannel.PUserInChannel.PActivitiesInUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PChannel.PUserInChannel.PActivitiesInUser)
    MergeFrom(*source);
  }
}

void PChannel_PUserInChannel_PActivitiesInUser::MergeFrom(const PChannel_PUserInChannel_PActivitiesInUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PChannel.PUserInChannel.PActivitiesInUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void PChannel_PUserInChannel_PActivitiesInUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PChannel.PUserInChannel.PActivitiesInUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PChannel_PUserInChannel_PActivitiesInUser::CopyFrom(const PChannel_PUserInChannel_PActivitiesInUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PChannel.PUserInChannel.PActivitiesInUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PChannel_PUserInChannel_PActivitiesInUser::IsInitialized() const {
  return true;
}

void PChannel_PUserInChannel_PActivitiesInUser::InternalSwap(PChannel_PUserInChannel_PActivitiesInUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(channel_id_, other->channel_id_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PChannel_PUserInChannel_PActivitiesInUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PChannel_PUserInChannel_PAttachmentsInUser::InitAsDefaultInstance() {
}
class PChannel_PUserInChannel_PAttachmentsInUser::_Internal {
 public:
};

PChannel_PUserInChannel_PAttachmentsInUser::PChannel_PUserInChannel_PAttachmentsInUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PChannel.PUserInChannel.PAttachmentsInUser)
}
PChannel_PUserInChannel_PAttachmentsInUser::PChannel_PUserInChannel_PAttachmentsInUser(const PChannel_PUserInChannel_PAttachmentsInUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_file_name().empty()) {
    file_file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_file_name_);
  }
  file_content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_content_type().empty()) {
    file_content_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_content_type_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(channel_id_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PChannel.PUserInChannel.PAttachmentsInUser)
}

void PChannel_PUserInChannel_PAttachmentsInUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PChannel_PUserInChannel_PAttachmentsInUser_proto_5fkandan_5flg_2eproto.base);
  file_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(channel_id_));
}

PChannel_PUserInChannel_PAttachmentsInUser::~PChannel_PUserInChannel_PAttachmentsInUser() {
  // @@protoc_insertion_point(destructor:kandan_lg.PChannel.PUserInChannel.PAttachmentsInUser)
  SharedDtor();
}

void PChannel_PUserInChannel_PAttachmentsInUser::SharedDtor() {
  file_file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PChannel_PUserInChannel_PAttachmentsInUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PChannel_PUserInChannel_PAttachmentsInUser& PChannel_PUserInChannel_PAttachmentsInUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PChannel_PUserInChannel_PAttachmentsInUser_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PChannel_PUserInChannel_PAttachmentsInUser::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PChannel.PUserInChannel.PAttachmentsInUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(channel_id_));
  _internal_metadata_.Clear();
}

const char* PChannel_PUserInChannel_PAttachmentsInUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PUserInChannel.PAttachmentsInUser.file_file_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_content_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_file_content_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PUserInChannel.PAttachmentsInUser.file_content_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_file_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          file_file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 message_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_updated_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          file_updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 channel_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PChannel_PUserInChannel_PAttachmentsInUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PChannel.PUserInChannel.PAttachmentsInUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string file_file_name = 2;
  if (this->file_file_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_file_name().data(), static_cast<int>(this->_internal_file_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PUserInChannel.PAttachmentsInUser.file_file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_file_name(), target);
  }

  // string file_content_type = 3;
  if (this->file_content_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_content_type().data(), static_cast<int>(this->_internal_file_content_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PUserInChannel.PAttachmentsInUser.file_content_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_content_type(), target);
  }

  // uint32 file_file_size = 4;
  if (this->file_file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_file_file_size(), target);
  }

  // uint32 message_id = 5;
  if (this->message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_message_id(), target);
  }

  // uint32 file_updated_at = 6;
  if (this->file_updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_file_updated_at(), target);
  }

  // uint32 created_at = 7;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 8;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_updated_at(), target);
  }

  // uint32 user_id = 9;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_user_id(), target);
  }

  // uint32 channel_id = 10;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PChannel.PUserInChannel.PAttachmentsInUser)
  return target;
}

size_t PChannel_PUserInChannel_PAttachmentsInUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PChannel.PUserInChannel.PAttachmentsInUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_file_name = 2;
  if (this->file_file_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_file_name());
  }

  // string file_content_type = 3;
  if (this->file_content_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_content_type());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 file_file_size = 4;
  if (this->file_file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_file_size());
  }

  // uint32 message_id = 5;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_message_id());
  }

  // uint32 file_updated_at = 6;
  if (this->file_updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_updated_at());
  }

  // uint32 created_at = 7;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 8;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 user_id = 9;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  // uint32 channel_id = 10;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PChannel_PUserInChannel_PAttachmentsInUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PChannel.PUserInChannel.PAttachmentsInUser)
  GOOGLE_DCHECK_NE(&from, this);
  const PChannel_PUserInChannel_PAttachmentsInUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PChannel_PUserInChannel_PAttachmentsInUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PChannel.PUserInChannel.PAttachmentsInUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PChannel.PUserInChannel.PAttachmentsInUser)
    MergeFrom(*source);
  }
}

void PChannel_PUserInChannel_PAttachmentsInUser::MergeFrom(const PChannel_PUserInChannel_PAttachmentsInUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PChannel.PUserInChannel.PAttachmentsInUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_file_name().size() > 0) {

    file_file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_file_name_);
  }
  if (from.file_content_type().size() > 0) {

    file_content_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_content_type_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.file_file_size() != 0) {
    _internal_set_file_file_size(from._internal_file_file_size());
  }
  if (from.message_id() != 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from.file_updated_at() != 0) {
    _internal_set_file_updated_at(from._internal_file_updated_at());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
}

void PChannel_PUserInChannel_PAttachmentsInUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PChannel.PUserInChannel.PAttachmentsInUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PChannel_PUserInChannel_PAttachmentsInUser::CopyFrom(const PChannel_PUserInChannel_PAttachmentsInUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PChannel.PUserInChannel.PAttachmentsInUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PChannel_PUserInChannel_PAttachmentsInUser::IsInitialized() const {
  return true;
}

void PChannel_PUserInChannel_PAttachmentsInUser::InternalSwap(PChannel_PUserInChannel_PAttachmentsInUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_file_name_.Swap(&other->file_file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_content_type_.Swap(&other->file_content_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(file_file_size_, other->file_file_size_);
  swap(message_id_, other->message_id_);
  swap(file_updated_at_, other->file_updated_at_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(user_id_, other->user_id_);
  swap(channel_id_, other->channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PChannel_PUserInChannel_PAttachmentsInUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PChannel_PUserInChannel::InitAsDefaultInstance() {
}
class PChannel_PUserInChannel::_Internal {
 public:
};

PChannel_PUserInChannel::PChannel_PUserInChannel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PChannel.PUserInChannel)
}
PChannel_PUserInChannel::PChannel_PUserInChannel(const PChannel_PUserInChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      activities_(from.activities_),
      attachments_(from.attachments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  encrypted_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encrypted_password().empty()) {
    encrypted_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encrypted_password_);
  }
  reset_password_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reset_password_token().empty()) {
    reset_password_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reset_password_token_);
  }
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_first_name().empty()) {
    first_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_name().empty()) {
    last_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_name_);
  }
  current_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_current_sign_in_ip().empty()) {
    current_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.current_sign_in_ip_);
  }
  last_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_sign_in_ip().empty()) {
    last_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_sign_in_ip_);
  }
  auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth_token().empty()) {
    auth_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_token_);
  }
  locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_locale().empty()) {
    locale_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locale_);
  }
  gravatar_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gravatar_hash().empty()) {
    gravatar_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gravatar_hash_);
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  regstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_regstatus().empty()) {
    regstatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regstatus_);
  }
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_url().empty()) {
    avatar_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&updated_at_) -
    reinterpret_cast<char*>(&id_)) + sizeof(updated_at_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PChannel.PUserInChannel)
}

void PChannel_PUserInChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PChannel_PUserInChannel_proto_5fkandan_5flg_2eproto.base);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_password_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gravatar_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updated_at_) -
      reinterpret_cast<char*>(&id_)) + sizeof(updated_at_));
}

PChannel_PUserInChannel::~PChannel_PUserInChannel() {
  // @@protoc_insertion_point(destructor:kandan_lg.PChannel.PUserInChannel)
  SharedDtor();
}

void PChannel_PUserInChannel::SharedDtor() {
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_password_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gravatar_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regstatus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PChannel_PUserInChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PChannel_PUserInChannel& PChannel_PUserInChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PChannel_PUserInChannel_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PChannel_PUserInChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PChannel.PUserInChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activities_.Clear();
  attachments_.Clear();
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_password_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gravatar_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regstatus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updated_at_) -
      reinterpret_cast<char*>(&id_)) + sizeof(updated_at_));
  _internal_metadata_.Clear();
}

const char* PChannel_PUserInChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PUserInChannel.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string encrypted_password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_encrypted_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PUserInChannel.encrypted_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reset_password_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reset_password_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PUserInChannel.reset_password_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 reset_password_sent_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          reset_password_sent_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 remember_created_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          remember_created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string first_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_first_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PUserInChannel.first_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_last_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PUserInChannel.last_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 signin_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          signin_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 current_sign_in_at = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          current_sign_in_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string current_sign_in_ip = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_current_sign_in_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PUserInChannel.current_sign_in_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 last_sign_in_at = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          last_sign_in_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_sign_in_ip = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_last_sign_in_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PUserInChannel.last_sign_in_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string auth_token = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_auth_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PUserInChannel.auth_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string locale = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_locale();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PUserInChannel.locale"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gravatar_hash = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_gravatar_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PUserInChannel.gravatar_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PUserInChannel.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string regstatus = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_regstatus();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PUserInChannel.regstatus"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool active = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_admin = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          is_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar_url = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PUserInChannel.avatar_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kandan_lg.PChannel.PUserInChannel.PActivitiesInUser activities = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_activities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kandan_lg.PChannel.PUserInChannel.PAttachmentsInUser attachments = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_attachments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PChannel_PUserInChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PChannel.PUserInChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string email = 2;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PUserInChannel.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // string encrypted_password = 3;
  if (this->encrypted_password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encrypted_password().data(), static_cast<int>(this->_internal_encrypted_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PUserInChannel.encrypted_password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_encrypted_password(), target);
  }

  // string reset_password_token = 4;
  if (this->reset_password_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reset_password_token().data(), static_cast<int>(this->_internal_reset_password_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PUserInChannel.reset_password_token");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reset_password_token(), target);
  }

  // uint32 reset_password_sent_at = 5;
  if (this->reset_password_sent_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_reset_password_sent_at(), target);
  }

  // uint32 remember_created_at = 6;
  if (this->remember_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_remember_created_at(), target);
  }

  // string first_name = 7;
  if (this->first_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_name().data(), static_cast<int>(this->_internal_first_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PUserInChannel.first_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_first_name(), target);
  }

  // string last_name = 8;
  if (this->last_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_name().data(), static_cast<int>(this->_internal_last_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PUserInChannel.last_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_last_name(), target);
  }

  // uint32 signin_count = 9;
  if (this->signin_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_signin_count(), target);
  }

  // uint32 current_sign_in_at = 10;
  if (this->current_sign_in_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_current_sign_in_at(), target);
  }

  // string current_sign_in_ip = 11;
  if (this->current_sign_in_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_sign_in_ip().data(), static_cast<int>(this->_internal_current_sign_in_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PUserInChannel.current_sign_in_ip");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_current_sign_in_ip(), target);
  }

  // uint32 last_sign_in_at = 12;
  if (this->last_sign_in_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_last_sign_in_at(), target);
  }

  // string last_sign_in_ip = 13;
  if (this->last_sign_in_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_sign_in_ip().data(), static_cast<int>(this->_internal_last_sign_in_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PUserInChannel.last_sign_in_ip");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_last_sign_in_ip(), target);
  }

  // string auth_token = 14;
  if (this->auth_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_token().data(), static_cast<int>(this->_internal_auth_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PUserInChannel.auth_token");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_auth_token(), target);
  }

  // string locale = 15;
  if (this->locale().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_locale().data(), static_cast<int>(this->_internal_locale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PUserInChannel.locale");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_locale(), target);
  }

  // string gravatar_hash = 16;
  if (this->gravatar_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gravatar_hash().data(), static_cast<int>(this->_internal_gravatar_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PUserInChannel.gravatar_hash");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_gravatar_hash(), target);
  }

  // string username = 17;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PUserInChannel.username");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_username(), target);
  }

  // string regstatus = 18;
  if (this->regstatus().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_regstatus().data(), static_cast<int>(this->_internal_regstatus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PUserInChannel.regstatus");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_regstatus(), target);
  }

  // bool active = 19;
  if (this->active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_active(), target);
  }

  // bool is_admin = 20;
  if (this->is_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_is_admin(), target);
  }

  // string avatar_url = 21;
  if (this->avatar_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PUserInChannel.avatar_url");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_avatar_url(), target);
  }

  // uint32 created_at = 22;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 23;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_updated_at(), target);
  }

  // repeated .kandan_lg.PChannel.PUserInChannel.PActivitiesInUser activities = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_activities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_activities(i), target, stream);
  }

  // repeated .kandan_lg.PChannel.PUserInChannel.PAttachmentsInUser attachments = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attachments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, this->_internal_attachments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PChannel.PUserInChannel)
  return target;
}

size_t PChannel_PUserInChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PChannel.PUserInChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kandan_lg.PChannel.PUserInChannel.PActivitiesInUser activities = 24;
  total_size += 2UL * this->_internal_activities_size();
  for (const auto& msg : this->activities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kandan_lg.PChannel.PUserInChannel.PAttachmentsInUser attachments = 25;
  total_size += 2UL * this->_internal_attachments_size();
  for (const auto& msg : this->attachments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string email = 2;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string encrypted_password = 3;
  if (this->encrypted_password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encrypted_password());
  }

  // string reset_password_token = 4;
  if (this->reset_password_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reset_password_token());
  }

  // string first_name = 7;
  if (this->first_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_name());
  }

  // string last_name = 8;
  if (this->last_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_name());
  }

  // string current_sign_in_ip = 11;
  if (this->current_sign_in_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_sign_in_ip());
  }

  // string last_sign_in_ip = 13;
  if (this->last_sign_in_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_sign_in_ip());
  }

  // string auth_token = 14;
  if (this->auth_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_token());
  }

  // string locale = 15;
  if (this->locale().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locale());
  }

  // string gravatar_hash = 16;
  if (this->gravatar_hash().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gravatar_hash());
  }

  // string username = 17;
  if (this->username().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string regstatus = 18;
  if (this->regstatus().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regstatus());
  }

  // string avatar_url = 21;
  if (this->avatar_url().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar_url());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 reset_password_sent_at = 5;
  if (this->reset_password_sent_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reset_password_sent_at());
  }

  // uint32 remember_created_at = 6;
  if (this->remember_created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_remember_created_at());
  }

  // uint32 signin_count = 9;
  if (this->signin_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_signin_count());
  }

  // uint32 current_sign_in_at = 10;
  if (this->current_sign_in_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_current_sign_in_at());
  }

  // uint32 last_sign_in_at = 12;
  if (this->last_sign_in_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_sign_in_at());
  }

  // bool active = 19;
  if (this->active() != 0) {
    total_size += 2 + 1;
  }

  // bool is_admin = 20;
  if (this->is_admin() != 0) {
    total_size += 2 + 1;
  }

  // uint32 created_at = 22;
  if (this->created_at() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 23;
  if (this->updated_at() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PChannel_PUserInChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PChannel.PUserInChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const PChannel_PUserInChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PChannel_PUserInChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PChannel.PUserInChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PChannel.PUserInChannel)
    MergeFrom(*source);
  }
}

void PChannel_PUserInChannel::MergeFrom(const PChannel_PUserInChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PChannel.PUserInChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  activities_.MergeFrom(from.activities_);
  attachments_.MergeFrom(from.attachments_);
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.encrypted_password().size() > 0) {

    encrypted_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encrypted_password_);
  }
  if (from.reset_password_token().size() > 0) {

    reset_password_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reset_password_token_);
  }
  if (from.first_name().size() > 0) {

    first_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  if (from.last_name().size() > 0) {

    last_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_name_);
  }
  if (from.current_sign_in_ip().size() > 0) {

    current_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.current_sign_in_ip_);
  }
  if (from.last_sign_in_ip().size() > 0) {

    last_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_sign_in_ip_);
  }
  if (from.auth_token().size() > 0) {

    auth_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_token_);
  }
  if (from.locale().size() > 0) {

    locale_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locale_);
  }
  if (from.gravatar_hash().size() > 0) {

    gravatar_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gravatar_hash_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.regstatus().size() > 0) {

    regstatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regstatus_);
  }
  if (from.avatar_url().size() > 0) {

    avatar_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.reset_password_sent_at() != 0) {
    _internal_set_reset_password_sent_at(from._internal_reset_password_sent_at());
  }
  if (from.remember_created_at() != 0) {
    _internal_set_remember_created_at(from._internal_remember_created_at());
  }
  if (from.signin_count() != 0) {
    _internal_set_signin_count(from._internal_signin_count());
  }
  if (from.current_sign_in_at() != 0) {
    _internal_set_current_sign_in_at(from._internal_current_sign_in_at());
  }
  if (from.last_sign_in_at() != 0) {
    _internal_set_last_sign_in_at(from._internal_last_sign_in_at());
  }
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
  if (from.is_admin() != 0) {
    _internal_set_is_admin(from._internal_is_admin());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
}

void PChannel_PUserInChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PChannel.PUserInChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PChannel_PUserInChannel::CopyFrom(const PChannel_PUserInChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PChannel.PUserInChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PChannel_PUserInChannel::IsInitialized() const {
  return true;
}

void PChannel_PUserInChannel::InternalSwap(PChannel_PUserInChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  activities_.InternalSwap(&other->activities_);
  attachments_.InternalSwap(&other->attachments_);
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  encrypted_password_.Swap(&other->encrypted_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reset_password_token_.Swap(&other->reset_password_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  first_name_.Swap(&other->first_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_name_.Swap(&other->last_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  current_sign_in_ip_.Swap(&other->current_sign_in_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_sign_in_ip_.Swap(&other->last_sign_in_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  auth_token_.Swap(&other->auth_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  locale_.Swap(&other->locale_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gravatar_hash_.Swap(&other->gravatar_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  regstatus_.Swap(&other->regstatus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatar_url_.Swap(&other->avatar_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(reset_password_sent_at_, other->reset_password_sent_at_);
  swap(remember_created_at_, other->remember_created_at_);
  swap(signin_count_, other->signin_count_);
  swap(current_sign_in_at_, other->current_sign_in_at_);
  swap(last_sign_in_at_, other->last_sign_in_at_);
  swap(active_, other->active_);
  swap(is_admin_, other->is_admin_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PChannel_PUserInChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser::InitAsDefaultInstance() {
}
class PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser::_Internal {
 public:
};

PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser::PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.PActivitiesInUser)
}
PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser::PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser(const PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.PActivitiesInUser)
}

void PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser_proto_5fkandan_5flg_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(user_id_));
}

PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser::~PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser() {
  // @@protoc_insertion_point(destructor:kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.PActivitiesInUser)
  SharedDtor();
}

void PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser& PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.PActivitiesInUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(user_id_));
  _internal_metadata_.Clear();
}

const char* PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.PActivitiesInUser.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.PActivitiesInUser.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 channel_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.PActivitiesInUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 created_at = 2;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 3;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_updated_at(), target);
  }

  // string action = 4;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.PActivitiesInUser.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  // string content = 5;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.PActivitiesInUser.content");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_content(), target);
  }

  // uint32 channel_id = 6;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_channel_id(), target);
  }

  // uint32 user_id = 7;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.PActivitiesInUser)
  return target;
}

size_t PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.PActivitiesInUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action = 4;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // string content = 5;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 created_at = 2;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 3;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 channel_id = 6;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel_id());
  }

  // uint32 user_id = 7;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.PActivitiesInUser)
  GOOGLE_DCHECK_NE(&from, this);
  const PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.PActivitiesInUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.PActivitiesInUser)
    MergeFrom(*source);
  }
}

void PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser::MergeFrom(const PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.PActivitiesInUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.PActivitiesInUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser::CopyFrom(const PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.PActivitiesInUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser::IsInitialized() const {
  return true;
}

void PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser::InternalSwap(PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(channel_id_, other->channel_id_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PChannel_PAttachmentsInChannel_PUserInAttachment::InitAsDefaultInstance() {
}
class PChannel_PAttachmentsInChannel_PUserInAttachment::_Internal {
 public:
};

PChannel_PAttachmentsInChannel_PUserInAttachment::PChannel_PAttachmentsInChannel_PUserInAttachment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment)
}
PChannel_PAttachmentsInChannel_PUserInAttachment::PChannel_PAttachmentsInChannel_PUserInAttachment(const PChannel_PAttachmentsInChannel_PUserInAttachment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      activities_(from.activities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  encrypted_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encrypted_password().empty()) {
    encrypted_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encrypted_password_);
  }
  reset_password_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reset_password_token().empty()) {
    reset_password_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reset_password_token_);
  }
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_first_name().empty()) {
    first_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_name().empty()) {
    last_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_name_);
  }
  current_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_current_sign_in_ip().empty()) {
    current_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.current_sign_in_ip_);
  }
  last_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_sign_in_ip().empty()) {
    last_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_sign_in_ip_);
  }
  auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth_token().empty()) {
    auth_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_token_);
  }
  locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_locale().empty()) {
    locale_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locale_);
  }
  gravatar_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gravatar_hash().empty()) {
    gravatar_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gravatar_hash_);
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  regstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_regstatus().empty()) {
    regstatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regstatus_);
  }
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_url().empty()) {
    avatar_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&updated_at_) -
    reinterpret_cast<char*>(&id_)) + sizeof(updated_at_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment)
}

void PChannel_PAttachmentsInChannel_PUserInAttachment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PChannel_PAttachmentsInChannel_PUserInAttachment_proto_5fkandan_5flg_2eproto.base);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_password_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gravatar_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updated_at_) -
      reinterpret_cast<char*>(&id_)) + sizeof(updated_at_));
}

PChannel_PAttachmentsInChannel_PUserInAttachment::~PChannel_PAttachmentsInChannel_PUserInAttachment() {
  // @@protoc_insertion_point(destructor:kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment)
  SharedDtor();
}

void PChannel_PAttachmentsInChannel_PUserInAttachment::SharedDtor() {
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_password_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gravatar_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regstatus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PChannel_PAttachmentsInChannel_PUserInAttachment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PChannel_PAttachmentsInChannel_PUserInAttachment& PChannel_PAttachmentsInChannel_PUserInAttachment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PChannel_PAttachmentsInChannel_PUserInAttachment_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PChannel_PAttachmentsInChannel_PUserInAttachment::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activities_.Clear();
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_password_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gravatar_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regstatus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updated_at_) -
      reinterpret_cast<char*>(&id_)) + sizeof(updated_at_));
  _internal_metadata_.Clear();
}

const char* PChannel_PAttachmentsInChannel_PUserInAttachment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string encrypted_password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_encrypted_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.encrypted_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reset_password_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reset_password_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.reset_password_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 reset_password_sent_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          reset_password_sent_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 remember_created_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          remember_created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string first_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_first_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.first_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_last_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.last_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 signin_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          signin_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 current_sign_in_at = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          current_sign_in_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string current_sign_in_ip = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_current_sign_in_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.current_sign_in_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 last_sign_in_at = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          last_sign_in_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_sign_in_ip = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_last_sign_in_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.last_sign_in_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string auth_token = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_auth_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.auth_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string locale = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_locale();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.locale"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gravatar_hash = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_gravatar_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.gravatar_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string regstatus = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_regstatus();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.regstatus"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool active = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_admin = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          is_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar_url = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.avatar_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.PActivitiesInUser activities = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_activities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PChannel_PAttachmentsInChannel_PUserInAttachment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string email = 2;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // string encrypted_password = 3;
  if (this->encrypted_password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encrypted_password().data(), static_cast<int>(this->_internal_encrypted_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.encrypted_password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_encrypted_password(), target);
  }

  // string reset_password_token = 4;
  if (this->reset_password_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reset_password_token().data(), static_cast<int>(this->_internal_reset_password_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.reset_password_token");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reset_password_token(), target);
  }

  // uint32 reset_password_sent_at = 5;
  if (this->reset_password_sent_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_reset_password_sent_at(), target);
  }

  // uint32 remember_created_at = 6;
  if (this->remember_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_remember_created_at(), target);
  }

  // string first_name = 7;
  if (this->first_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_name().data(), static_cast<int>(this->_internal_first_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.first_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_first_name(), target);
  }

  // string last_name = 8;
  if (this->last_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_name().data(), static_cast<int>(this->_internal_last_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.last_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_last_name(), target);
  }

  // uint32 signin_count = 9;
  if (this->signin_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_signin_count(), target);
  }

  // uint32 current_sign_in_at = 10;
  if (this->current_sign_in_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_current_sign_in_at(), target);
  }

  // string current_sign_in_ip = 11;
  if (this->current_sign_in_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_sign_in_ip().data(), static_cast<int>(this->_internal_current_sign_in_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.current_sign_in_ip");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_current_sign_in_ip(), target);
  }

  // uint32 last_sign_in_at = 12;
  if (this->last_sign_in_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_last_sign_in_at(), target);
  }

  // string last_sign_in_ip = 13;
  if (this->last_sign_in_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_sign_in_ip().data(), static_cast<int>(this->_internal_last_sign_in_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.last_sign_in_ip");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_last_sign_in_ip(), target);
  }

  // string auth_token = 14;
  if (this->auth_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_token().data(), static_cast<int>(this->_internal_auth_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.auth_token");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_auth_token(), target);
  }

  // string locale = 15;
  if (this->locale().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_locale().data(), static_cast<int>(this->_internal_locale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.locale");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_locale(), target);
  }

  // string gravatar_hash = 16;
  if (this->gravatar_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gravatar_hash().data(), static_cast<int>(this->_internal_gravatar_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.gravatar_hash");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_gravatar_hash(), target);
  }

  // string username = 17;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.username");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_username(), target);
  }

  // string regstatus = 18;
  if (this->regstatus().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_regstatus().data(), static_cast<int>(this->_internal_regstatus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.regstatus");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_regstatus(), target);
  }

  // bool active = 19;
  if (this->active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_active(), target);
  }

  // bool is_admin = 20;
  if (this->is_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_is_admin(), target);
  }

  // string avatar_url = 21;
  if (this->avatar_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.avatar_url");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_avatar_url(), target);
  }

  // uint32 created_at = 22;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 23;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_updated_at(), target);
  }

  // repeated .kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.PActivitiesInUser activities = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_activities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_activities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment)
  return target;
}

size_t PChannel_PAttachmentsInChannel_PUserInAttachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment.PActivitiesInUser activities = 24;
  total_size += 2UL * this->_internal_activities_size();
  for (const auto& msg : this->activities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string email = 2;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string encrypted_password = 3;
  if (this->encrypted_password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encrypted_password());
  }

  // string reset_password_token = 4;
  if (this->reset_password_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reset_password_token());
  }

  // string first_name = 7;
  if (this->first_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_name());
  }

  // string last_name = 8;
  if (this->last_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_name());
  }

  // string current_sign_in_ip = 11;
  if (this->current_sign_in_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_sign_in_ip());
  }

  // string last_sign_in_ip = 13;
  if (this->last_sign_in_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_sign_in_ip());
  }

  // string auth_token = 14;
  if (this->auth_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_token());
  }

  // string locale = 15;
  if (this->locale().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locale());
  }

  // string gravatar_hash = 16;
  if (this->gravatar_hash().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gravatar_hash());
  }

  // string username = 17;
  if (this->username().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string regstatus = 18;
  if (this->regstatus().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regstatus());
  }

  // string avatar_url = 21;
  if (this->avatar_url().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar_url());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 reset_password_sent_at = 5;
  if (this->reset_password_sent_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reset_password_sent_at());
  }

  // uint32 remember_created_at = 6;
  if (this->remember_created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_remember_created_at());
  }

  // uint32 signin_count = 9;
  if (this->signin_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_signin_count());
  }

  // uint32 current_sign_in_at = 10;
  if (this->current_sign_in_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_current_sign_in_at());
  }

  // uint32 last_sign_in_at = 12;
  if (this->last_sign_in_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_sign_in_at());
  }

  // bool active = 19;
  if (this->active() != 0) {
    total_size += 2 + 1;
  }

  // bool is_admin = 20;
  if (this->is_admin() != 0) {
    total_size += 2 + 1;
  }

  // uint32 created_at = 22;
  if (this->created_at() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 23;
  if (this->updated_at() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PChannel_PAttachmentsInChannel_PUserInAttachment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  const PChannel_PAttachmentsInChannel_PUserInAttachment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PChannel_PAttachmentsInChannel_PUserInAttachment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment)
    MergeFrom(*source);
  }
}

void PChannel_PAttachmentsInChannel_PUserInAttachment::MergeFrom(const PChannel_PAttachmentsInChannel_PUserInAttachment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  activities_.MergeFrom(from.activities_);
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.encrypted_password().size() > 0) {

    encrypted_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encrypted_password_);
  }
  if (from.reset_password_token().size() > 0) {

    reset_password_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reset_password_token_);
  }
  if (from.first_name().size() > 0) {

    first_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  if (from.last_name().size() > 0) {

    last_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_name_);
  }
  if (from.current_sign_in_ip().size() > 0) {

    current_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.current_sign_in_ip_);
  }
  if (from.last_sign_in_ip().size() > 0) {

    last_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_sign_in_ip_);
  }
  if (from.auth_token().size() > 0) {

    auth_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_token_);
  }
  if (from.locale().size() > 0) {

    locale_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locale_);
  }
  if (from.gravatar_hash().size() > 0) {

    gravatar_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gravatar_hash_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.regstatus().size() > 0) {

    regstatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regstatus_);
  }
  if (from.avatar_url().size() > 0) {

    avatar_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.reset_password_sent_at() != 0) {
    _internal_set_reset_password_sent_at(from._internal_reset_password_sent_at());
  }
  if (from.remember_created_at() != 0) {
    _internal_set_remember_created_at(from._internal_remember_created_at());
  }
  if (from.signin_count() != 0) {
    _internal_set_signin_count(from._internal_signin_count());
  }
  if (from.current_sign_in_at() != 0) {
    _internal_set_current_sign_in_at(from._internal_current_sign_in_at());
  }
  if (from.last_sign_in_at() != 0) {
    _internal_set_last_sign_in_at(from._internal_last_sign_in_at());
  }
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
  if (from.is_admin() != 0) {
    _internal_set_is_admin(from._internal_is_admin());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
}

void PChannel_PAttachmentsInChannel_PUserInAttachment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PChannel_PAttachmentsInChannel_PUserInAttachment::CopyFrom(const PChannel_PAttachmentsInChannel_PUserInAttachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PChannel_PAttachmentsInChannel_PUserInAttachment::IsInitialized() const {
  return true;
}

void PChannel_PAttachmentsInChannel_PUserInAttachment::InternalSwap(PChannel_PAttachmentsInChannel_PUserInAttachment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  activities_.InternalSwap(&other->activities_);
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  encrypted_password_.Swap(&other->encrypted_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reset_password_token_.Swap(&other->reset_password_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  first_name_.Swap(&other->first_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_name_.Swap(&other->last_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  current_sign_in_ip_.Swap(&other->current_sign_in_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_sign_in_ip_.Swap(&other->last_sign_in_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  auth_token_.Swap(&other->auth_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  locale_.Swap(&other->locale_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gravatar_hash_.Swap(&other->gravatar_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  regstatus_.Swap(&other->regstatus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatar_url_.Swap(&other->avatar_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(reset_password_sent_at_, other->reset_password_sent_at_);
  swap(remember_created_at_, other->remember_created_at_);
  swap(signin_count_, other->signin_count_);
  swap(current_sign_in_at_, other->current_sign_in_at_);
  swap(last_sign_in_at_, other->last_sign_in_at_);
  swap(active_, other->active_);
  swap(is_admin_, other->is_admin_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PChannel_PAttachmentsInChannel_PUserInAttachment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PChannel_PAttachmentsInChannel::InitAsDefaultInstance() {
  ::kandan_lg::_PChannel_PAttachmentsInChannel_default_instance_._instance.get_mutable()->user_ = const_cast< ::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment*>(
      ::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment::internal_default_instance());
}
class PChannel_PAttachmentsInChannel::_Internal {
 public:
  static const ::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment& user(const PChannel_PAttachmentsInChannel* msg);
};

const ::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment&
PChannel_PAttachmentsInChannel::_Internal::user(const PChannel_PAttachmentsInChannel* msg) {
  return *msg->user_;
}
PChannel_PAttachmentsInChannel::PChannel_PAttachmentsInChannel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PChannel.PAttachmentsInChannel)
}
PChannel_PAttachmentsInChannel::PChannel_PAttachmentsInChannel(const PChannel_PAttachmentsInChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_file_name().empty()) {
    file_file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_file_name_);
  }
  file_content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_content_type().empty()) {
    file_content_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_content_type_);
  }
  if (from._internal_has_user()) {
    user_ = new ::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment(*from.user_);
  } else {
    user_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(channel_id_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PChannel.PAttachmentsInChannel)
}

void PChannel_PAttachmentsInChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PChannel_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto.base);
  file_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&user_)) + sizeof(channel_id_));
}

PChannel_PAttachmentsInChannel::~PChannel_PAttachmentsInChannel() {
  // @@protoc_insertion_point(destructor:kandan_lg.PChannel.PAttachmentsInChannel)
  SharedDtor();
}

void PChannel_PAttachmentsInChannel::SharedDtor() {
  file_file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_;
}

void PChannel_PAttachmentsInChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PChannel_PAttachmentsInChannel& PChannel_PAttachmentsInChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PChannel_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PChannel_PAttachmentsInChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PChannel.PAttachmentsInChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(channel_id_));
  _internal_metadata_.Clear();
}

const char* PChannel_PAttachmentsInChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PAttachmentsInChannel.file_file_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_content_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_file_content_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.PAttachmentsInChannel.file_content_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_file_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          file_file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 message_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_updated_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          file_updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 channel_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment user = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PChannel_PAttachmentsInChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PChannel.PAttachmentsInChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string file_file_name = 2;
  if (this->file_file_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_file_name().data(), static_cast<int>(this->_internal_file_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PAttachmentsInChannel.file_file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_file_name(), target);
  }

  // string file_content_type = 3;
  if (this->file_content_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_content_type().data(), static_cast<int>(this->_internal_file_content_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.PAttachmentsInChannel.file_content_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_content_type(), target);
  }

  // uint32 file_file_size = 4;
  if (this->file_file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_file_file_size(), target);
  }

  // uint32 message_id = 5;
  if (this->message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_message_id(), target);
  }

  // uint32 file_updated_at = 6;
  if (this->file_updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_file_updated_at(), target);
  }

  // uint32 created_at = 7;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 8;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_updated_at(), target);
  }

  // uint32 user_id = 9;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_user_id(), target);
  }

  // uint32 channel_id = 10;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_channel_id(), target);
  }

  // .kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment user = 11;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PChannel.PAttachmentsInChannel)
  return target;
}

size_t PChannel_PAttachmentsInChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PChannel.PAttachmentsInChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_file_name = 2;
  if (this->file_file_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_file_name());
  }

  // string file_content_type = 3;
  if (this->file_content_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_content_type());
  }

  // .kandan_lg.PChannel.PAttachmentsInChannel.PUserInAttachment user = 11;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 file_file_size = 4;
  if (this->file_file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_file_size());
  }

  // uint32 message_id = 5;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_message_id());
  }

  // uint32 file_updated_at = 6;
  if (this->file_updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_updated_at());
  }

  // uint32 created_at = 7;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 8;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 user_id = 9;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  // uint32 channel_id = 10;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PChannel_PAttachmentsInChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PChannel.PAttachmentsInChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const PChannel_PAttachmentsInChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PChannel_PAttachmentsInChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PChannel.PAttachmentsInChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PChannel.PAttachmentsInChannel)
    MergeFrom(*source);
  }
}

void PChannel_PAttachmentsInChannel::MergeFrom(const PChannel_PAttachmentsInChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PChannel.PAttachmentsInChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_file_name().size() > 0) {

    file_file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_file_name_);
  }
  if (from.file_content_type().size() > 0) {

    file_content_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_content_type_);
  }
  if (from.has_user()) {
    _internal_mutable_user()->::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment::MergeFrom(from._internal_user());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.file_file_size() != 0) {
    _internal_set_file_file_size(from._internal_file_file_size());
  }
  if (from.message_id() != 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from.file_updated_at() != 0) {
    _internal_set_file_updated_at(from._internal_file_updated_at());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
}

void PChannel_PAttachmentsInChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PChannel.PAttachmentsInChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PChannel_PAttachmentsInChannel::CopyFrom(const PChannel_PAttachmentsInChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PChannel.PAttachmentsInChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PChannel_PAttachmentsInChannel::IsInitialized() const {
  return true;
}

void PChannel_PAttachmentsInChannel::InternalSwap(PChannel_PAttachmentsInChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_file_name_.Swap(&other->file_file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_content_type_.Swap(&other->file_content_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_, other->user_);
  swap(id_, other->id_);
  swap(file_file_size_, other->file_file_size_);
  swap(message_id_, other->message_id_);
  swap(file_updated_at_, other->file_updated_at_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(user_id_, other->user_id_);
  swap(channel_id_, other->channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PChannel_PAttachmentsInChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PChannel::InitAsDefaultInstance() {
  ::kandan_lg::_PChannel_default_instance_._instance.get_mutable()->user_ = const_cast< ::kandan_lg::PChannel_PUserInChannel*>(
      ::kandan_lg::PChannel_PUserInChannel::internal_default_instance());
}
class PChannel::_Internal {
 public:
  static const ::kandan_lg::PChannel_PUserInChannel& user(const PChannel* msg);
};

const ::kandan_lg::PChannel_PUserInChannel&
PChannel::_Internal::user(const PChannel* msg) {
  return *msg->user_;
}
PChannel::PChannel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PChannel)
}
PChannel::PChannel(const PChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      activities_(from.activities_),
      attachments_(from.attachments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_user()) {
    user_ = new ::kandan_lg::PChannel_PUserInChannel(*from.user_);
  } else {
    user_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&id_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PChannel)
}

void PChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PChannel_proto_5fkandan_5flg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&user_)) + sizeof(count_));
}

PChannel::~PChannel() {
  // @@protoc_insertion_point(destructor:kandan_lg.PChannel)
  SharedDtor();
}

void PChannel::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_;
}

void PChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PChannel& PChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PChannel_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activities_.Clear();
  attachments_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&id_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

const char* PChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PChannel.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kandan_lg.PChannel.PActivitiesInChannel activities = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_activities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .kandan_lg.PChannel.PUserInChannel user = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kandan_lg.PChannel.PAttachmentsInChannel attachments = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attachments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PChannel.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 created_at = 3;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 4;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_updated_at(), target);
  }

  // uint32 user_id = 5;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_user_id(), target);
  }

  // uint32 count = 6;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_count(), target);
  }

  // repeated .kandan_lg.PChannel.PActivitiesInChannel activities = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_activities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_activities(i), target, stream);
  }

  // .kandan_lg.PChannel.PUserInChannel user = 8;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::user(this), target, stream);
  }

  // repeated .kandan_lg.PChannel.PAttachmentsInChannel attachments = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attachments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_attachments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PChannel)
  return target;
}

size_t PChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kandan_lg.PChannel.PActivitiesInChannel activities = 7;
  total_size += 1UL * this->_internal_activities_size();
  for (const auto& msg : this->activities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kandan_lg.PChannel.PAttachmentsInChannel attachments = 9;
  total_size += 1UL * this->_internal_attachments_size();
  for (const auto& msg : this->attachments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .kandan_lg.PChannel.PUserInChannel user = 8;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 created_at = 3;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 4;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 user_id = 5;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  // uint32 count = 6;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const PChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PChannel)
    MergeFrom(*source);
  }
}

void PChannel::MergeFrom(const PChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  activities_.MergeFrom(from.activities_);
  attachments_.MergeFrom(from.attachments_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_user()) {
    _internal_mutable_user()->::kandan_lg::PChannel_PUserInChannel::MergeFrom(from._internal_user());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void PChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PChannel::CopyFrom(const PChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PChannel::IsInitialized() const {
  return true;
}

void PChannel::InternalSwap(PChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  activities_.InternalSwap(&other->activities_);
  attachments_.InternalSwap(&other->attachments_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_, other->user_);
  swap(id_, other->id_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(user_id_, other->user_id_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser::InitAsDefaultInstance() {
}
class PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser::_Internal {
 public:
};

PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser::PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PActivity.PChannelInActivity.PUserInChannel.PAttachmentsInUser)
}
PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser::PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser(const PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_file_name().empty()) {
    file_file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_file_name_);
  }
  file_content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_content_type().empty()) {
    file_content_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_content_type_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(channel_id_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PActivity.PChannelInActivity.PUserInChannel.PAttachmentsInUser)
}

void PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser_proto_5fkandan_5flg_2eproto.base);
  file_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(channel_id_));
}

PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser::~PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser() {
  // @@protoc_insertion_point(destructor:kandan_lg.PActivity.PChannelInActivity.PUserInChannel.PAttachmentsInUser)
  SharedDtor();
}

void PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser::SharedDtor() {
  file_file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser& PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PActivity.PChannelInActivity.PUserInChannel.PAttachmentsInUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(channel_id_));
  _internal_metadata_.Clear();
}

const char* PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.PUserInChannel.PAttachmentsInUser.file_file_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_content_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_file_content_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.PUserInChannel.PAttachmentsInUser.file_content_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_file_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          file_file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 message_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_updated_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          file_updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 channel_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PActivity.PChannelInActivity.PUserInChannel.PAttachmentsInUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string file_file_name = 2;
  if (this->file_file_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_file_name().data(), static_cast<int>(this->_internal_file_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.PUserInChannel.PAttachmentsInUser.file_file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_file_name(), target);
  }

  // string file_content_type = 3;
  if (this->file_content_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_content_type().data(), static_cast<int>(this->_internal_file_content_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.PUserInChannel.PAttachmentsInUser.file_content_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_content_type(), target);
  }

  // uint32 file_file_size = 4;
  if (this->file_file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_file_file_size(), target);
  }

  // uint32 message_id = 5;
  if (this->message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_message_id(), target);
  }

  // uint32 file_updated_at = 6;
  if (this->file_updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_file_updated_at(), target);
  }

  // uint32 created_at = 7;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 8;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_updated_at(), target);
  }

  // uint32 user_id = 9;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_user_id(), target);
  }

  // uint32 channel_id = 10;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PActivity.PChannelInActivity.PUserInChannel.PAttachmentsInUser)
  return target;
}

size_t PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PActivity.PChannelInActivity.PUserInChannel.PAttachmentsInUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_file_name = 2;
  if (this->file_file_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_file_name());
  }

  // string file_content_type = 3;
  if (this->file_content_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_content_type());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 file_file_size = 4;
  if (this->file_file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_file_size());
  }

  // uint32 message_id = 5;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_message_id());
  }

  // uint32 file_updated_at = 6;
  if (this->file_updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_updated_at());
  }

  // uint32 created_at = 7;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 8;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 user_id = 9;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  // uint32 channel_id = 10;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PActivity.PChannelInActivity.PUserInChannel.PAttachmentsInUser)
  GOOGLE_DCHECK_NE(&from, this);
  const PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PActivity.PChannelInActivity.PUserInChannel.PAttachmentsInUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PActivity.PChannelInActivity.PUserInChannel.PAttachmentsInUser)
    MergeFrom(*source);
  }
}

void PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser::MergeFrom(const PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PActivity.PChannelInActivity.PUserInChannel.PAttachmentsInUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_file_name().size() > 0) {

    file_file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_file_name_);
  }
  if (from.file_content_type().size() > 0) {

    file_content_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_content_type_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.file_file_size() != 0) {
    _internal_set_file_file_size(from._internal_file_file_size());
  }
  if (from.message_id() != 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from.file_updated_at() != 0) {
    _internal_set_file_updated_at(from._internal_file_updated_at());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
}

void PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PActivity.PChannelInActivity.PUserInChannel.PAttachmentsInUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser::CopyFrom(const PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PActivity.PChannelInActivity.PUserInChannel.PAttachmentsInUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser::IsInitialized() const {
  return true;
}

void PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser::InternalSwap(PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_file_name_.Swap(&other->file_file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_content_type_.Swap(&other->file_content_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(file_file_size_, other->file_file_size_);
  swap(message_id_, other->message_id_);
  swap(file_updated_at_, other->file_updated_at_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(user_id_, other->user_id_);
  swap(channel_id_, other->channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PActivity_PChannelInActivity_PUserInChannel::InitAsDefaultInstance() {
}
class PActivity_PChannelInActivity_PUserInChannel::_Internal {
 public:
};

PActivity_PChannelInActivity_PUserInChannel::PActivity_PChannelInActivity_PUserInChannel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PActivity.PChannelInActivity.PUserInChannel)
}
PActivity_PChannelInActivity_PUserInChannel::PActivity_PChannelInActivity_PUserInChannel(const PActivity_PChannelInActivity_PUserInChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      attachments_(from.attachments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  encrypted_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encrypted_password().empty()) {
    encrypted_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encrypted_password_);
  }
  reset_password_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reset_password_token().empty()) {
    reset_password_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reset_password_token_);
  }
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_first_name().empty()) {
    first_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_name().empty()) {
    last_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_name_);
  }
  current_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_current_sign_in_ip().empty()) {
    current_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.current_sign_in_ip_);
  }
  last_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_sign_in_ip().empty()) {
    last_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_sign_in_ip_);
  }
  auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth_token().empty()) {
    auth_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_token_);
  }
  locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_locale().empty()) {
    locale_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locale_);
  }
  gravatar_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gravatar_hash().empty()) {
    gravatar_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gravatar_hash_);
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  regstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_regstatus().empty()) {
    regstatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regstatus_);
  }
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_url().empty()) {
    avatar_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&updated_at_) -
    reinterpret_cast<char*>(&id_)) + sizeof(updated_at_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PActivity.PChannelInActivity.PUserInChannel)
}

void PActivity_PChannelInActivity_PUserInChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PActivity_PChannelInActivity_PUserInChannel_proto_5fkandan_5flg_2eproto.base);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_password_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gravatar_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updated_at_) -
      reinterpret_cast<char*>(&id_)) + sizeof(updated_at_));
}

PActivity_PChannelInActivity_PUserInChannel::~PActivity_PChannelInActivity_PUserInChannel() {
  // @@protoc_insertion_point(destructor:kandan_lg.PActivity.PChannelInActivity.PUserInChannel)
  SharedDtor();
}

void PActivity_PChannelInActivity_PUserInChannel::SharedDtor() {
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_password_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gravatar_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regstatus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PActivity_PChannelInActivity_PUserInChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PActivity_PChannelInActivity_PUserInChannel& PActivity_PChannelInActivity_PUserInChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PActivity_PChannelInActivity_PUserInChannel_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PActivity_PChannelInActivity_PUserInChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PActivity.PChannelInActivity.PUserInChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attachments_.Clear();
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_password_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gravatar_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regstatus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updated_at_) -
      reinterpret_cast<char*>(&id_)) + sizeof(updated_at_));
  _internal_metadata_.Clear();
}

const char* PActivity_PChannelInActivity_PUserInChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.PUserInChannel.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string encrypted_password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_encrypted_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.PUserInChannel.encrypted_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reset_password_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reset_password_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.PUserInChannel.reset_password_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 reset_password_sent_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          reset_password_sent_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 remember_created_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          remember_created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string first_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_first_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.PUserInChannel.first_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_last_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.PUserInChannel.last_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 signin_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          signin_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 current_sign_in_at = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          current_sign_in_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string current_sign_in_ip = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_current_sign_in_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.PUserInChannel.current_sign_in_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 last_sign_in_at = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          last_sign_in_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_sign_in_ip = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_last_sign_in_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.PUserInChannel.last_sign_in_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string auth_token = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_auth_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.PUserInChannel.auth_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string locale = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_locale();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.PUserInChannel.locale"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gravatar_hash = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_gravatar_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.PUserInChannel.gravatar_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.PUserInChannel.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string regstatus = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_regstatus();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.PUserInChannel.regstatus"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool active = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_admin = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          is_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar_url = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.PUserInChannel.avatar_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kandan_lg.PActivity.PChannelInActivity.PUserInChannel.PAttachmentsInUser attachments = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_attachments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PActivity_PChannelInActivity_PUserInChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PActivity.PChannelInActivity.PUserInChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string email = 2;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.PUserInChannel.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // string encrypted_password = 3;
  if (this->encrypted_password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encrypted_password().data(), static_cast<int>(this->_internal_encrypted_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.PUserInChannel.encrypted_password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_encrypted_password(), target);
  }

  // string reset_password_token = 4;
  if (this->reset_password_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reset_password_token().data(), static_cast<int>(this->_internal_reset_password_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.PUserInChannel.reset_password_token");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reset_password_token(), target);
  }

  // uint32 reset_password_sent_at = 5;
  if (this->reset_password_sent_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_reset_password_sent_at(), target);
  }

  // uint32 remember_created_at = 6;
  if (this->remember_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_remember_created_at(), target);
  }

  // string first_name = 7;
  if (this->first_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_name().data(), static_cast<int>(this->_internal_first_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.PUserInChannel.first_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_first_name(), target);
  }

  // string last_name = 8;
  if (this->last_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_name().data(), static_cast<int>(this->_internal_last_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.PUserInChannel.last_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_last_name(), target);
  }

  // uint32 signin_count = 9;
  if (this->signin_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_signin_count(), target);
  }

  // uint32 current_sign_in_at = 10;
  if (this->current_sign_in_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_current_sign_in_at(), target);
  }

  // string current_sign_in_ip = 11;
  if (this->current_sign_in_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_sign_in_ip().data(), static_cast<int>(this->_internal_current_sign_in_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.PUserInChannel.current_sign_in_ip");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_current_sign_in_ip(), target);
  }

  // uint32 last_sign_in_at = 12;
  if (this->last_sign_in_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_last_sign_in_at(), target);
  }

  // string last_sign_in_ip = 13;
  if (this->last_sign_in_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_sign_in_ip().data(), static_cast<int>(this->_internal_last_sign_in_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.PUserInChannel.last_sign_in_ip");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_last_sign_in_ip(), target);
  }

  // string auth_token = 14;
  if (this->auth_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_token().data(), static_cast<int>(this->_internal_auth_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.PUserInChannel.auth_token");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_auth_token(), target);
  }

  // string locale = 15;
  if (this->locale().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_locale().data(), static_cast<int>(this->_internal_locale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.PUserInChannel.locale");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_locale(), target);
  }

  // string gravatar_hash = 16;
  if (this->gravatar_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gravatar_hash().data(), static_cast<int>(this->_internal_gravatar_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.PUserInChannel.gravatar_hash");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_gravatar_hash(), target);
  }

  // string username = 17;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.PUserInChannel.username");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_username(), target);
  }

  // string regstatus = 18;
  if (this->regstatus().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_regstatus().data(), static_cast<int>(this->_internal_regstatus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.PUserInChannel.regstatus");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_regstatus(), target);
  }

  // bool active = 19;
  if (this->active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_active(), target);
  }

  // bool is_admin = 20;
  if (this->is_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_is_admin(), target);
  }

  // string avatar_url = 21;
  if (this->avatar_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.PUserInChannel.avatar_url");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_avatar_url(), target);
  }

  // uint32 created_at = 22;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 23;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_updated_at(), target);
  }

  // repeated .kandan_lg.PActivity.PChannelInActivity.PUserInChannel.PAttachmentsInUser attachments = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attachments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_attachments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PActivity.PChannelInActivity.PUserInChannel)
  return target;
}

size_t PActivity_PChannelInActivity_PUserInChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PActivity.PChannelInActivity.PUserInChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kandan_lg.PActivity.PChannelInActivity.PUserInChannel.PAttachmentsInUser attachments = 24;
  total_size += 2UL * this->_internal_attachments_size();
  for (const auto& msg : this->attachments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string email = 2;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string encrypted_password = 3;
  if (this->encrypted_password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encrypted_password());
  }

  // string reset_password_token = 4;
  if (this->reset_password_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reset_password_token());
  }

  // string first_name = 7;
  if (this->first_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_name());
  }

  // string last_name = 8;
  if (this->last_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_name());
  }

  // string current_sign_in_ip = 11;
  if (this->current_sign_in_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_sign_in_ip());
  }

  // string last_sign_in_ip = 13;
  if (this->last_sign_in_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_sign_in_ip());
  }

  // string auth_token = 14;
  if (this->auth_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_token());
  }

  // string locale = 15;
  if (this->locale().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locale());
  }

  // string gravatar_hash = 16;
  if (this->gravatar_hash().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gravatar_hash());
  }

  // string username = 17;
  if (this->username().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string regstatus = 18;
  if (this->regstatus().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regstatus());
  }

  // string avatar_url = 21;
  if (this->avatar_url().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar_url());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 reset_password_sent_at = 5;
  if (this->reset_password_sent_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reset_password_sent_at());
  }

  // uint32 remember_created_at = 6;
  if (this->remember_created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_remember_created_at());
  }

  // uint32 signin_count = 9;
  if (this->signin_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_signin_count());
  }

  // uint32 current_sign_in_at = 10;
  if (this->current_sign_in_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_current_sign_in_at());
  }

  // uint32 last_sign_in_at = 12;
  if (this->last_sign_in_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_sign_in_at());
  }

  // bool active = 19;
  if (this->active() != 0) {
    total_size += 2 + 1;
  }

  // bool is_admin = 20;
  if (this->is_admin() != 0) {
    total_size += 2 + 1;
  }

  // uint32 created_at = 22;
  if (this->created_at() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 23;
  if (this->updated_at() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PActivity_PChannelInActivity_PUserInChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PActivity.PChannelInActivity.PUserInChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const PActivity_PChannelInActivity_PUserInChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PActivity_PChannelInActivity_PUserInChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PActivity.PChannelInActivity.PUserInChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PActivity.PChannelInActivity.PUserInChannel)
    MergeFrom(*source);
  }
}

void PActivity_PChannelInActivity_PUserInChannel::MergeFrom(const PActivity_PChannelInActivity_PUserInChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PActivity.PChannelInActivity.PUserInChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attachments_.MergeFrom(from.attachments_);
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.encrypted_password().size() > 0) {

    encrypted_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encrypted_password_);
  }
  if (from.reset_password_token().size() > 0) {

    reset_password_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reset_password_token_);
  }
  if (from.first_name().size() > 0) {

    first_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  if (from.last_name().size() > 0) {

    last_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_name_);
  }
  if (from.current_sign_in_ip().size() > 0) {

    current_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.current_sign_in_ip_);
  }
  if (from.last_sign_in_ip().size() > 0) {

    last_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_sign_in_ip_);
  }
  if (from.auth_token().size() > 0) {

    auth_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_token_);
  }
  if (from.locale().size() > 0) {

    locale_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locale_);
  }
  if (from.gravatar_hash().size() > 0) {

    gravatar_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gravatar_hash_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.regstatus().size() > 0) {

    regstatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regstatus_);
  }
  if (from.avatar_url().size() > 0) {

    avatar_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.reset_password_sent_at() != 0) {
    _internal_set_reset_password_sent_at(from._internal_reset_password_sent_at());
  }
  if (from.remember_created_at() != 0) {
    _internal_set_remember_created_at(from._internal_remember_created_at());
  }
  if (from.signin_count() != 0) {
    _internal_set_signin_count(from._internal_signin_count());
  }
  if (from.current_sign_in_at() != 0) {
    _internal_set_current_sign_in_at(from._internal_current_sign_in_at());
  }
  if (from.last_sign_in_at() != 0) {
    _internal_set_last_sign_in_at(from._internal_last_sign_in_at());
  }
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
  if (from.is_admin() != 0) {
    _internal_set_is_admin(from._internal_is_admin());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
}

void PActivity_PChannelInActivity_PUserInChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PActivity.PChannelInActivity.PUserInChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PActivity_PChannelInActivity_PUserInChannel::CopyFrom(const PActivity_PChannelInActivity_PUserInChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PActivity.PChannelInActivity.PUserInChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PActivity_PChannelInActivity_PUserInChannel::IsInitialized() const {
  return true;
}

void PActivity_PChannelInActivity_PUserInChannel::InternalSwap(PActivity_PChannelInActivity_PUserInChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  attachments_.InternalSwap(&other->attachments_);
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  encrypted_password_.Swap(&other->encrypted_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reset_password_token_.Swap(&other->reset_password_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  first_name_.Swap(&other->first_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_name_.Swap(&other->last_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  current_sign_in_ip_.Swap(&other->current_sign_in_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_sign_in_ip_.Swap(&other->last_sign_in_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  auth_token_.Swap(&other->auth_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  locale_.Swap(&other->locale_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gravatar_hash_.Swap(&other->gravatar_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  regstatus_.Swap(&other->regstatus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatar_url_.Swap(&other->avatar_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(reset_password_sent_at_, other->reset_password_sent_at_);
  swap(remember_created_at_, other->remember_created_at_);
  swap(signin_count_, other->signin_count_);
  swap(current_sign_in_at_, other->current_sign_in_at_);
  swap(last_sign_in_at_, other->last_sign_in_at_);
  swap(active_, other->active_);
  swap(is_admin_, other->is_admin_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PActivity_PChannelInActivity_PUserInChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment::InitAsDefaultInstance() {
}
class PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment::_Internal {
 public:
};

PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment)
}
PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment(const PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  encrypted_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encrypted_password().empty()) {
    encrypted_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encrypted_password_);
  }
  reset_password_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reset_password_token().empty()) {
    reset_password_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reset_password_token_);
  }
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_first_name().empty()) {
    first_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_name().empty()) {
    last_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_name_);
  }
  current_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_current_sign_in_ip().empty()) {
    current_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.current_sign_in_ip_);
  }
  last_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_sign_in_ip().empty()) {
    last_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_sign_in_ip_);
  }
  auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth_token().empty()) {
    auth_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_token_);
  }
  locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_locale().empty()) {
    locale_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locale_);
  }
  gravatar_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gravatar_hash().empty()) {
    gravatar_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gravatar_hash_);
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  regstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_regstatus().empty()) {
    regstatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regstatus_);
  }
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_url().empty()) {
    avatar_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&updated_at_) -
    reinterpret_cast<char*>(&id_)) + sizeof(updated_at_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment)
}

void PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment_proto_5fkandan_5flg_2eproto.base);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_password_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gravatar_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updated_at_) -
      reinterpret_cast<char*>(&id_)) + sizeof(updated_at_));
}

PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment::~PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment() {
  // @@protoc_insertion_point(destructor:kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment)
  SharedDtor();
}

void PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment::SharedDtor() {
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_password_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gravatar_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regstatus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment& PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_password_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gravatar_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regstatus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updated_at_) -
      reinterpret_cast<char*>(&id_)) + sizeof(updated_at_));
  _internal_metadata_.Clear();
}

const char* PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string encrypted_password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_encrypted_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment.encrypted_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reset_password_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reset_password_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment.reset_password_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 reset_password_sent_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          reset_password_sent_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 remember_created_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          remember_created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string first_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_first_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment.first_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_last_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment.last_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 signin_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          signin_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 current_sign_in_at = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          current_sign_in_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string current_sign_in_ip = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_current_sign_in_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment.current_sign_in_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 last_sign_in_at = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          last_sign_in_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_sign_in_ip = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_last_sign_in_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment.last_sign_in_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string auth_token = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_auth_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment.auth_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string locale = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_locale();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment.locale"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gravatar_hash = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_gravatar_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment.gravatar_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string regstatus = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_regstatus();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment.regstatus"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool active = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_admin = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          is_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar_url = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment.avatar_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string email = 2;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // string encrypted_password = 3;
  if (this->encrypted_password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encrypted_password().data(), static_cast<int>(this->_internal_encrypted_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment.encrypted_password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_encrypted_password(), target);
  }

  // string reset_password_token = 4;
  if (this->reset_password_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reset_password_token().data(), static_cast<int>(this->_internal_reset_password_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment.reset_password_token");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reset_password_token(), target);
  }

  // uint32 reset_password_sent_at = 5;
  if (this->reset_password_sent_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_reset_password_sent_at(), target);
  }

  // uint32 remember_created_at = 6;
  if (this->remember_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_remember_created_at(), target);
  }

  // string first_name = 7;
  if (this->first_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_name().data(), static_cast<int>(this->_internal_first_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment.first_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_first_name(), target);
  }

  // string last_name = 8;
  if (this->last_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_name().data(), static_cast<int>(this->_internal_last_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment.last_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_last_name(), target);
  }

  // uint32 signin_count = 9;
  if (this->signin_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_signin_count(), target);
  }

  // uint32 current_sign_in_at = 10;
  if (this->current_sign_in_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_current_sign_in_at(), target);
  }

  // string current_sign_in_ip = 11;
  if (this->current_sign_in_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_sign_in_ip().data(), static_cast<int>(this->_internal_current_sign_in_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment.current_sign_in_ip");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_current_sign_in_ip(), target);
  }

  // uint32 last_sign_in_at = 12;
  if (this->last_sign_in_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_last_sign_in_at(), target);
  }

  // string last_sign_in_ip = 13;
  if (this->last_sign_in_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_sign_in_ip().data(), static_cast<int>(this->_internal_last_sign_in_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment.last_sign_in_ip");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_last_sign_in_ip(), target);
  }

  // string auth_token = 14;
  if (this->auth_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_token().data(), static_cast<int>(this->_internal_auth_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment.auth_token");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_auth_token(), target);
  }

  // string locale = 15;
  if (this->locale().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_locale().data(), static_cast<int>(this->_internal_locale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment.locale");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_locale(), target);
  }

  // string gravatar_hash = 16;
  if (this->gravatar_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gravatar_hash().data(), static_cast<int>(this->_internal_gravatar_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment.gravatar_hash");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_gravatar_hash(), target);
  }

  // string username = 17;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment.username");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_username(), target);
  }

  // string regstatus = 18;
  if (this->regstatus().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_regstatus().data(), static_cast<int>(this->_internal_regstatus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment.regstatus");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_regstatus(), target);
  }

  // bool active = 19;
  if (this->active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_active(), target);
  }

  // bool is_admin = 20;
  if (this->is_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_is_admin(), target);
  }

  // string avatar_url = 21;
  if (this->avatar_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment.avatar_url");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_avatar_url(), target);
  }

  // uint32 created_at = 22;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 23;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_updated_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment)
  return target;
}

size_t PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 2;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string encrypted_password = 3;
  if (this->encrypted_password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encrypted_password());
  }

  // string reset_password_token = 4;
  if (this->reset_password_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reset_password_token());
  }

  // string first_name = 7;
  if (this->first_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_name());
  }

  // string last_name = 8;
  if (this->last_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_name());
  }

  // string current_sign_in_ip = 11;
  if (this->current_sign_in_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_sign_in_ip());
  }

  // string last_sign_in_ip = 13;
  if (this->last_sign_in_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_sign_in_ip());
  }

  // string auth_token = 14;
  if (this->auth_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_token());
  }

  // string locale = 15;
  if (this->locale().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locale());
  }

  // string gravatar_hash = 16;
  if (this->gravatar_hash().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gravatar_hash());
  }

  // string username = 17;
  if (this->username().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string regstatus = 18;
  if (this->regstatus().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regstatus());
  }

  // string avatar_url = 21;
  if (this->avatar_url().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar_url());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 reset_password_sent_at = 5;
  if (this->reset_password_sent_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reset_password_sent_at());
  }

  // uint32 remember_created_at = 6;
  if (this->remember_created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_remember_created_at());
  }

  // uint32 signin_count = 9;
  if (this->signin_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_signin_count());
  }

  // uint32 current_sign_in_at = 10;
  if (this->current_sign_in_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_current_sign_in_at());
  }

  // uint32 last_sign_in_at = 12;
  if (this->last_sign_in_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_sign_in_at());
  }

  // bool active = 19;
  if (this->active() != 0) {
    total_size += 2 + 1;
  }

  // bool is_admin = 20;
  if (this->is_admin() != 0) {
    total_size += 2 + 1;
  }

  // uint32 created_at = 22;
  if (this->created_at() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 23;
  if (this->updated_at() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  const PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment)
    MergeFrom(*source);
  }
}

void PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment::MergeFrom(const PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.encrypted_password().size() > 0) {

    encrypted_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encrypted_password_);
  }
  if (from.reset_password_token().size() > 0) {

    reset_password_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reset_password_token_);
  }
  if (from.first_name().size() > 0) {

    first_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  if (from.last_name().size() > 0) {

    last_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_name_);
  }
  if (from.current_sign_in_ip().size() > 0) {

    current_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.current_sign_in_ip_);
  }
  if (from.last_sign_in_ip().size() > 0) {

    last_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_sign_in_ip_);
  }
  if (from.auth_token().size() > 0) {

    auth_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_token_);
  }
  if (from.locale().size() > 0) {

    locale_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locale_);
  }
  if (from.gravatar_hash().size() > 0) {

    gravatar_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gravatar_hash_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.regstatus().size() > 0) {

    regstatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regstatus_);
  }
  if (from.avatar_url().size() > 0) {

    avatar_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.reset_password_sent_at() != 0) {
    _internal_set_reset_password_sent_at(from._internal_reset_password_sent_at());
  }
  if (from.remember_created_at() != 0) {
    _internal_set_remember_created_at(from._internal_remember_created_at());
  }
  if (from.signin_count() != 0) {
    _internal_set_signin_count(from._internal_signin_count());
  }
  if (from.current_sign_in_at() != 0) {
    _internal_set_current_sign_in_at(from._internal_current_sign_in_at());
  }
  if (from.last_sign_in_at() != 0) {
    _internal_set_last_sign_in_at(from._internal_last_sign_in_at());
  }
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
  if (from.is_admin() != 0) {
    _internal_set_is_admin(from._internal_is_admin());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
}

void PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment::CopyFrom(const PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment::IsInitialized() const {
  return true;
}

void PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment::InternalSwap(PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  encrypted_password_.Swap(&other->encrypted_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reset_password_token_.Swap(&other->reset_password_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  first_name_.Swap(&other->first_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_name_.Swap(&other->last_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  current_sign_in_ip_.Swap(&other->current_sign_in_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_sign_in_ip_.Swap(&other->last_sign_in_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  auth_token_.Swap(&other->auth_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  locale_.Swap(&other->locale_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gravatar_hash_.Swap(&other->gravatar_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  regstatus_.Swap(&other->regstatus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatar_url_.Swap(&other->avatar_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(reset_password_sent_at_, other->reset_password_sent_at_);
  swap(remember_created_at_, other->remember_created_at_);
  swap(signin_count_, other->signin_count_);
  swap(current_sign_in_at_, other->current_sign_in_at_);
  swap(last_sign_in_at_, other->last_sign_in_at_);
  swap(active_, other->active_);
  swap(is_admin_, other->is_admin_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PActivity_PChannelInActivity_PAttachmentsInChannel::InitAsDefaultInstance() {
  ::kandan_lg::_PActivity_PChannelInActivity_PAttachmentsInChannel_default_instance_._instance.get_mutable()->user_ = const_cast< ::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment*>(
      ::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment::internal_default_instance());
}
class PActivity_PChannelInActivity_PAttachmentsInChannel::_Internal {
 public:
  static const ::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment& user(const PActivity_PChannelInActivity_PAttachmentsInChannel* msg);
};

const ::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment&
PActivity_PChannelInActivity_PAttachmentsInChannel::_Internal::user(const PActivity_PChannelInActivity_PAttachmentsInChannel* msg) {
  return *msg->user_;
}
PActivity_PChannelInActivity_PAttachmentsInChannel::PActivity_PChannelInActivity_PAttachmentsInChannel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel)
}
PActivity_PChannelInActivity_PAttachmentsInChannel::PActivity_PChannelInActivity_PAttachmentsInChannel(const PActivity_PChannelInActivity_PAttachmentsInChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_file_name().empty()) {
    file_file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_file_name_);
  }
  file_content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_content_type().empty()) {
    file_content_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_content_type_);
  }
  if (from._internal_has_user()) {
    user_ = new ::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment(*from.user_);
  } else {
    user_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(channel_id_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel)
}

void PActivity_PChannelInActivity_PAttachmentsInChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PActivity_PChannelInActivity_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto.base);
  file_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&user_)) + sizeof(channel_id_));
}

PActivity_PChannelInActivity_PAttachmentsInChannel::~PActivity_PChannelInActivity_PAttachmentsInChannel() {
  // @@protoc_insertion_point(destructor:kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel)
  SharedDtor();
}

void PActivity_PChannelInActivity_PAttachmentsInChannel::SharedDtor() {
  file_file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_;
}

void PActivity_PChannelInActivity_PAttachmentsInChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PActivity_PChannelInActivity_PAttachmentsInChannel& PActivity_PChannelInActivity_PAttachmentsInChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PActivity_PChannelInActivity_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PActivity_PChannelInActivity_PAttachmentsInChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(channel_id_));
  _internal_metadata_.Clear();
}

const char* PActivity_PChannelInActivity_PAttachmentsInChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.file_file_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_content_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_file_content_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.file_content_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_file_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          file_file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 message_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_updated_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          file_updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 channel_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment user = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PActivity_PChannelInActivity_PAttachmentsInChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string file_file_name = 2;
  if (this->file_file_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_file_name().data(), static_cast<int>(this->_internal_file_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.file_file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_file_name(), target);
  }

  // string file_content_type = 3;
  if (this->file_content_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_content_type().data(), static_cast<int>(this->_internal_file_content_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.file_content_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_content_type(), target);
  }

  // uint32 file_file_size = 4;
  if (this->file_file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_file_file_size(), target);
  }

  // uint32 message_id = 5;
  if (this->message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_message_id(), target);
  }

  // uint32 file_updated_at = 6;
  if (this->file_updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_file_updated_at(), target);
  }

  // uint32 created_at = 7;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 8;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_updated_at(), target);
  }

  // uint32 user_id = 9;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_user_id(), target);
  }

  // uint32 channel_id = 10;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_channel_id(), target);
  }

  // .kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment user = 11;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel)
  return target;
}

size_t PActivity_PChannelInActivity_PAttachmentsInChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_file_name = 2;
  if (this->file_file_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_file_name());
  }

  // string file_content_type = 3;
  if (this->file_content_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_content_type());
  }

  // .kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel.PUserInAttachment user = 11;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 file_file_size = 4;
  if (this->file_file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_file_size());
  }

  // uint32 message_id = 5;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_message_id());
  }

  // uint32 file_updated_at = 6;
  if (this->file_updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_updated_at());
  }

  // uint32 created_at = 7;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 8;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 user_id = 9;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  // uint32 channel_id = 10;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PActivity_PChannelInActivity_PAttachmentsInChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const PActivity_PChannelInActivity_PAttachmentsInChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PActivity_PChannelInActivity_PAttachmentsInChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel)
    MergeFrom(*source);
  }
}

void PActivity_PChannelInActivity_PAttachmentsInChannel::MergeFrom(const PActivity_PChannelInActivity_PAttachmentsInChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_file_name().size() > 0) {

    file_file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_file_name_);
  }
  if (from.file_content_type().size() > 0) {

    file_content_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_content_type_);
  }
  if (from.has_user()) {
    _internal_mutable_user()->::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment::MergeFrom(from._internal_user());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.file_file_size() != 0) {
    _internal_set_file_file_size(from._internal_file_file_size());
  }
  if (from.message_id() != 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from.file_updated_at() != 0) {
    _internal_set_file_updated_at(from._internal_file_updated_at());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
}

void PActivity_PChannelInActivity_PAttachmentsInChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PActivity_PChannelInActivity_PAttachmentsInChannel::CopyFrom(const PActivity_PChannelInActivity_PAttachmentsInChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PActivity_PChannelInActivity_PAttachmentsInChannel::IsInitialized() const {
  return true;
}

void PActivity_PChannelInActivity_PAttachmentsInChannel::InternalSwap(PActivity_PChannelInActivity_PAttachmentsInChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_file_name_.Swap(&other->file_file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_content_type_.Swap(&other->file_content_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_, other->user_);
  swap(id_, other->id_);
  swap(file_file_size_, other->file_file_size_);
  swap(message_id_, other->message_id_);
  swap(file_updated_at_, other->file_updated_at_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(user_id_, other->user_id_);
  swap(channel_id_, other->channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PActivity_PChannelInActivity_PAttachmentsInChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PActivity_PChannelInActivity::InitAsDefaultInstance() {
  ::kandan_lg::_PActivity_PChannelInActivity_default_instance_._instance.get_mutable()->user_ = const_cast< ::kandan_lg::PActivity_PChannelInActivity_PUserInChannel*>(
      ::kandan_lg::PActivity_PChannelInActivity_PUserInChannel::internal_default_instance());
}
class PActivity_PChannelInActivity::_Internal {
 public:
  static const ::kandan_lg::PActivity_PChannelInActivity_PUserInChannel& user(const PActivity_PChannelInActivity* msg);
};

const ::kandan_lg::PActivity_PChannelInActivity_PUserInChannel&
PActivity_PChannelInActivity::_Internal::user(const PActivity_PChannelInActivity* msg) {
  return *msg->user_;
}
PActivity_PChannelInActivity::PActivity_PChannelInActivity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PActivity.PChannelInActivity)
}
PActivity_PChannelInActivity::PActivity_PChannelInActivity(const PActivity_PChannelInActivity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      attachments_(from.attachments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_user()) {
    user_ = new ::kandan_lg::PActivity_PChannelInActivity_PUserInChannel(*from.user_);
  } else {
    user_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&id_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PActivity.PChannelInActivity)
}

void PActivity_PChannelInActivity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PActivity_PChannelInActivity_proto_5fkandan_5flg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&user_)) + sizeof(count_));
}

PActivity_PChannelInActivity::~PActivity_PChannelInActivity() {
  // @@protoc_insertion_point(destructor:kandan_lg.PActivity.PChannelInActivity)
  SharedDtor();
}

void PActivity_PChannelInActivity::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_;
}

void PActivity_PChannelInActivity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PActivity_PChannelInActivity& PActivity_PChannelInActivity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PActivity_PChannelInActivity_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PActivity_PChannelInActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PActivity.PChannelInActivity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attachments_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&id_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

const char* PActivity_PChannelInActivity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PChannelInActivity.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kandan_lg.PActivity.PChannelInActivity.PUserInChannel user = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel attachments = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attachments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PActivity_PChannelInActivity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PActivity.PChannelInActivity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PChannelInActivity.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 created_at = 3;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 4;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_updated_at(), target);
  }

  // uint32 user_id = 5;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_user_id(), target);
  }

  // uint32 count = 6;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_count(), target);
  }

  // .kandan_lg.PActivity.PChannelInActivity.PUserInChannel user = 7;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::user(this), target, stream);
  }

  // repeated .kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel attachments = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attachments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_attachments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PActivity.PChannelInActivity)
  return target;
}

size_t PActivity_PChannelInActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PActivity.PChannelInActivity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kandan_lg.PActivity.PChannelInActivity.PAttachmentsInChannel attachments = 8;
  total_size += 1UL * this->_internal_attachments_size();
  for (const auto& msg : this->attachments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .kandan_lg.PActivity.PChannelInActivity.PUserInChannel user = 7;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 created_at = 3;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 4;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 user_id = 5;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  // uint32 count = 6;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PActivity_PChannelInActivity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PActivity.PChannelInActivity)
  GOOGLE_DCHECK_NE(&from, this);
  const PActivity_PChannelInActivity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PActivity_PChannelInActivity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PActivity.PChannelInActivity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PActivity.PChannelInActivity)
    MergeFrom(*source);
  }
}

void PActivity_PChannelInActivity::MergeFrom(const PActivity_PChannelInActivity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PActivity.PChannelInActivity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attachments_.MergeFrom(from.attachments_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_user()) {
    _internal_mutable_user()->::kandan_lg::PActivity_PChannelInActivity_PUserInChannel::MergeFrom(from._internal_user());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void PActivity_PChannelInActivity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PActivity.PChannelInActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PActivity_PChannelInActivity::CopyFrom(const PActivity_PChannelInActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PActivity.PChannelInActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PActivity_PChannelInActivity::IsInitialized() const {
  return true;
}

void PActivity_PChannelInActivity::InternalSwap(PActivity_PChannelInActivity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  attachments_.InternalSwap(&other->attachments_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_, other->user_);
  swap(id_, other->id_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(user_id_, other->user_id_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PActivity_PChannelInActivity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel::InitAsDefaultInstance() {
}
class PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel::_Internal {
 public:
};

PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel::PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PActivity.PUserInActivity.PChannelsInUser.PAttachmentsInChannel)
}
PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel::PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel(const PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_file_name().empty()) {
    file_file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_file_name_);
  }
  file_content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_content_type().empty()) {
    file_content_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_content_type_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(channel_id_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PActivity.PUserInActivity.PChannelsInUser.PAttachmentsInChannel)
}

void PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto.base);
  file_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(channel_id_));
}

PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel::~PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel() {
  // @@protoc_insertion_point(destructor:kandan_lg.PActivity.PUserInActivity.PChannelsInUser.PAttachmentsInChannel)
  SharedDtor();
}

void PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel::SharedDtor() {
  file_file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel& PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PActivity.PUserInActivity.PChannelsInUser.PAttachmentsInChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(channel_id_));
  _internal_metadata_.Clear();
}

const char* PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PUserInActivity.PChannelsInUser.PAttachmentsInChannel.file_file_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_content_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_file_content_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PUserInActivity.PChannelsInUser.PAttachmentsInChannel.file_content_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_file_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          file_file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 message_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_updated_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          file_updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 channel_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PActivity.PUserInActivity.PChannelsInUser.PAttachmentsInChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string file_file_name = 2;
  if (this->file_file_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_file_name().data(), static_cast<int>(this->_internal_file_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PUserInActivity.PChannelsInUser.PAttachmentsInChannel.file_file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_file_name(), target);
  }

  // string file_content_type = 3;
  if (this->file_content_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_content_type().data(), static_cast<int>(this->_internal_file_content_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PUserInActivity.PChannelsInUser.PAttachmentsInChannel.file_content_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_content_type(), target);
  }

  // uint32 file_file_size = 4;
  if (this->file_file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_file_file_size(), target);
  }

  // uint32 message_id = 5;
  if (this->message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_message_id(), target);
  }

  // uint32 file_updated_at = 6;
  if (this->file_updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_file_updated_at(), target);
  }

  // uint32 created_at = 7;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 8;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_updated_at(), target);
  }

  // uint32 user_id = 9;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_user_id(), target);
  }

  // uint32 channel_id = 10;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PActivity.PUserInActivity.PChannelsInUser.PAttachmentsInChannel)
  return target;
}

size_t PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PActivity.PUserInActivity.PChannelsInUser.PAttachmentsInChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_file_name = 2;
  if (this->file_file_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_file_name());
  }

  // string file_content_type = 3;
  if (this->file_content_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_content_type());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 file_file_size = 4;
  if (this->file_file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_file_size());
  }

  // uint32 message_id = 5;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_message_id());
  }

  // uint32 file_updated_at = 6;
  if (this->file_updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_updated_at());
  }

  // uint32 created_at = 7;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 8;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 user_id = 9;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  // uint32 channel_id = 10;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PActivity.PUserInActivity.PChannelsInUser.PAttachmentsInChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PActivity.PUserInActivity.PChannelsInUser.PAttachmentsInChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PActivity.PUserInActivity.PChannelsInUser.PAttachmentsInChannel)
    MergeFrom(*source);
  }
}

void PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel::MergeFrom(const PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PActivity.PUserInActivity.PChannelsInUser.PAttachmentsInChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_file_name().size() > 0) {

    file_file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_file_name_);
  }
  if (from.file_content_type().size() > 0) {

    file_content_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_content_type_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.file_file_size() != 0) {
    _internal_set_file_file_size(from._internal_file_file_size());
  }
  if (from.message_id() != 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from.file_updated_at() != 0) {
    _internal_set_file_updated_at(from._internal_file_updated_at());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
}

void PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PActivity.PUserInActivity.PChannelsInUser.PAttachmentsInChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel::CopyFrom(const PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PActivity.PUserInActivity.PChannelsInUser.PAttachmentsInChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel::IsInitialized() const {
  return true;
}

void PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel::InternalSwap(PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_file_name_.Swap(&other->file_file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_content_type_.Swap(&other->file_content_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(file_file_size_, other->file_file_size_);
  swap(message_id_, other->message_id_);
  swap(file_updated_at_, other->file_updated_at_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(user_id_, other->user_id_);
  swap(channel_id_, other->channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PActivity_PUserInActivity_PChannelsInUser::InitAsDefaultInstance() {
}
class PActivity_PUserInActivity_PChannelsInUser::_Internal {
 public:
};

PActivity_PUserInActivity_PChannelsInUser::PActivity_PUserInActivity_PChannelsInUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PActivity.PUserInActivity.PChannelsInUser)
}
PActivity_PUserInActivity_PChannelsInUser::PActivity_PUserInActivity_PChannelsInUser(const PActivity_PUserInActivity_PChannelsInUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      attachments_(from.attachments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&id_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PActivity.PUserInActivity.PChannelsInUser)
}

void PActivity_PUserInActivity_PChannelsInUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PActivity_PUserInActivity_PChannelsInUser_proto_5fkandan_5flg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&id_)) + sizeof(count_));
}

PActivity_PUserInActivity_PChannelsInUser::~PActivity_PUserInActivity_PChannelsInUser() {
  // @@protoc_insertion_point(destructor:kandan_lg.PActivity.PUserInActivity.PChannelsInUser)
  SharedDtor();
}

void PActivity_PUserInActivity_PChannelsInUser::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PActivity_PUserInActivity_PChannelsInUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PActivity_PUserInActivity_PChannelsInUser& PActivity_PUserInActivity_PChannelsInUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PActivity_PUserInActivity_PChannelsInUser_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PActivity_PUserInActivity_PChannelsInUser::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PActivity.PUserInActivity.PChannelsInUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attachments_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&id_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

const char* PActivity_PUserInActivity_PChannelsInUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PUserInActivity.PChannelsInUser.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kandan_lg.PActivity.PUserInActivity.PChannelsInUser.PAttachmentsInChannel attachments = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attachments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PActivity_PUserInActivity_PChannelsInUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PActivity.PUserInActivity.PChannelsInUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PUserInActivity.PChannelsInUser.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 created_at = 3;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 4;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_updated_at(), target);
  }

  // uint32 user_id = 5;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_user_id(), target);
  }

  // uint32 count = 6;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_count(), target);
  }

  // repeated .kandan_lg.PActivity.PUserInActivity.PChannelsInUser.PAttachmentsInChannel attachments = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attachments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_attachments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PActivity.PUserInActivity.PChannelsInUser)
  return target;
}

size_t PActivity_PUserInActivity_PChannelsInUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PActivity.PUserInActivity.PChannelsInUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kandan_lg.PActivity.PUserInActivity.PChannelsInUser.PAttachmentsInChannel attachments = 7;
  total_size += 1UL * this->_internal_attachments_size();
  for (const auto& msg : this->attachments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 created_at = 3;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 4;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 user_id = 5;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  // uint32 count = 6;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PActivity_PUserInActivity_PChannelsInUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PActivity.PUserInActivity.PChannelsInUser)
  GOOGLE_DCHECK_NE(&from, this);
  const PActivity_PUserInActivity_PChannelsInUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PActivity_PUserInActivity_PChannelsInUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PActivity.PUserInActivity.PChannelsInUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PActivity.PUserInActivity.PChannelsInUser)
    MergeFrom(*source);
  }
}

void PActivity_PUserInActivity_PChannelsInUser::MergeFrom(const PActivity_PUserInActivity_PChannelsInUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PActivity.PUserInActivity.PChannelsInUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attachments_.MergeFrom(from.attachments_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void PActivity_PUserInActivity_PChannelsInUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PActivity.PUserInActivity.PChannelsInUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PActivity_PUserInActivity_PChannelsInUser::CopyFrom(const PActivity_PUserInActivity_PChannelsInUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PActivity.PUserInActivity.PChannelsInUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PActivity_PUserInActivity_PChannelsInUser::IsInitialized() const {
  return true;
}

void PActivity_PUserInActivity_PChannelsInUser::InternalSwap(PActivity_PUserInActivity_PChannelsInUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  attachments_.InternalSwap(&other->attachments_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(user_id_, other->user_id_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PActivity_PUserInActivity_PChannelsInUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment::InitAsDefaultInstance() {
}
class PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment::_Internal {
 public:
};

PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment::PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser.PChannelInAttachment)
}
PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment::PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment(const PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&id_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser.PChannelInAttachment)
}

void PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment_proto_5fkandan_5flg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&id_)) + sizeof(count_));
}

PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment::~PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment() {
  // @@protoc_insertion_point(destructor:kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser.PChannelInAttachment)
  SharedDtor();
}

void PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment& PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser.PChannelInAttachment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&id_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

const char* PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser.PChannelInAttachment.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser.PChannelInAttachment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser.PChannelInAttachment.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 created_at = 3;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 4;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_updated_at(), target);
  }

  // uint32 user_id = 5;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_user_id(), target);
  }

  // uint32 count = 6;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser.PChannelInAttachment)
  return target;
}

size_t PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser.PChannelInAttachment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 created_at = 3;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 4;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 user_id = 5;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  // uint32 count = 6;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser.PChannelInAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  const PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser.PChannelInAttachment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser.PChannelInAttachment)
    MergeFrom(*source);
  }
}

void PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment::MergeFrom(const PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser.PChannelInAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser.PChannelInAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment::CopyFrom(const PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser.PChannelInAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment::IsInitialized() const {
  return true;
}

void PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment::InternalSwap(PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(user_id_, other->user_id_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PActivity_PUserInActivity_PAttachmentsInUser::InitAsDefaultInstance() {
  ::kandan_lg::_PActivity_PUserInActivity_PAttachmentsInUser_default_instance_._instance.get_mutable()->channel_ = const_cast< ::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment*>(
      ::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment::internal_default_instance());
}
class PActivity_PUserInActivity_PAttachmentsInUser::_Internal {
 public:
  static const ::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment& channel(const PActivity_PUserInActivity_PAttachmentsInUser* msg);
};

const ::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment&
PActivity_PUserInActivity_PAttachmentsInUser::_Internal::channel(const PActivity_PUserInActivity_PAttachmentsInUser* msg) {
  return *msg->channel_;
}
PActivity_PUserInActivity_PAttachmentsInUser::PActivity_PUserInActivity_PAttachmentsInUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser)
}
PActivity_PUserInActivity_PAttachmentsInUser::PActivity_PUserInActivity_PAttachmentsInUser(const PActivity_PUserInActivity_PAttachmentsInUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_file_name().empty()) {
    file_file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_file_name_);
  }
  file_content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_content_type().empty()) {
    file_content_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_content_type_);
  }
  if (from._internal_has_channel()) {
    channel_ = new ::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(channel_id_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser)
}

void PActivity_PUserInActivity_PAttachmentsInUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PActivity_PUserInActivity_PAttachmentsInUser_proto_5fkandan_5flg_2eproto.base);
  file_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(channel_id_));
}

PActivity_PUserInActivity_PAttachmentsInUser::~PActivity_PUserInActivity_PAttachmentsInUser() {
  // @@protoc_insertion_point(destructor:kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser)
  SharedDtor();
}

void PActivity_PUserInActivity_PAttachmentsInUser::SharedDtor() {
  file_file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete channel_;
}

void PActivity_PUserInActivity_PAttachmentsInUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PActivity_PUserInActivity_PAttachmentsInUser& PActivity_PUserInActivity_PAttachmentsInUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PActivity_PUserInActivity_PAttachmentsInUser_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PActivity_PUserInActivity_PAttachmentsInUser::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(channel_id_));
  _internal_metadata_.Clear();
}

const char* PActivity_PUserInActivity_PAttachmentsInUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser.file_file_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_content_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_file_content_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser.file_content_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_file_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          file_file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 message_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_updated_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          file_updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 channel_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser.PChannelInAttachment channel = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PActivity_PUserInActivity_PAttachmentsInUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string file_file_name = 2;
  if (this->file_file_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_file_name().data(), static_cast<int>(this->_internal_file_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser.file_file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_file_name(), target);
  }

  // string file_content_type = 3;
  if (this->file_content_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_content_type().data(), static_cast<int>(this->_internal_file_content_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser.file_content_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_content_type(), target);
  }

  // uint32 file_file_size = 4;
  if (this->file_file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_file_file_size(), target);
  }

  // uint32 message_id = 5;
  if (this->message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_message_id(), target);
  }

  // uint32 file_updated_at = 6;
  if (this->file_updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_file_updated_at(), target);
  }

  // uint32 created_at = 7;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 8;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_updated_at(), target);
  }

  // uint32 user_id = 9;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_user_id(), target);
  }

  // uint32 channel_id = 10;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_channel_id(), target);
  }

  // .kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser.PChannelInAttachment channel = 11;
  if (this->has_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::channel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser)
  return target;
}

size_t PActivity_PUserInActivity_PAttachmentsInUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_file_name = 2;
  if (this->file_file_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_file_name());
  }

  // string file_content_type = 3;
  if (this->file_content_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_content_type());
  }

  // .kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser.PChannelInAttachment channel = 11;
  if (this->has_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 file_file_size = 4;
  if (this->file_file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_file_size());
  }

  // uint32 message_id = 5;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_message_id());
  }

  // uint32 file_updated_at = 6;
  if (this->file_updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_updated_at());
  }

  // uint32 created_at = 7;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 8;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 user_id = 9;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  // uint32 channel_id = 10;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PActivity_PUserInActivity_PAttachmentsInUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser)
  GOOGLE_DCHECK_NE(&from, this);
  const PActivity_PUserInActivity_PAttachmentsInUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PActivity_PUserInActivity_PAttachmentsInUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser)
    MergeFrom(*source);
  }
}

void PActivity_PUserInActivity_PAttachmentsInUser::MergeFrom(const PActivity_PUserInActivity_PAttachmentsInUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_file_name().size() > 0) {

    file_file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_file_name_);
  }
  if (from.file_content_type().size() > 0) {

    file_content_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_content_type_);
  }
  if (from.has_channel()) {
    _internal_mutable_channel()->::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment::MergeFrom(from._internal_channel());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.file_file_size() != 0) {
    _internal_set_file_file_size(from._internal_file_file_size());
  }
  if (from.message_id() != 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from.file_updated_at() != 0) {
    _internal_set_file_updated_at(from._internal_file_updated_at());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
}

void PActivity_PUserInActivity_PAttachmentsInUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PActivity_PUserInActivity_PAttachmentsInUser::CopyFrom(const PActivity_PUserInActivity_PAttachmentsInUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PActivity_PUserInActivity_PAttachmentsInUser::IsInitialized() const {
  return true;
}

void PActivity_PUserInActivity_PAttachmentsInUser::InternalSwap(PActivity_PUserInActivity_PAttachmentsInUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_file_name_.Swap(&other->file_file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_content_type_.Swap(&other->file_content_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_, other->channel_);
  swap(id_, other->id_);
  swap(file_file_size_, other->file_file_size_);
  swap(message_id_, other->message_id_);
  swap(file_updated_at_, other->file_updated_at_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(user_id_, other->user_id_);
  swap(channel_id_, other->channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PActivity_PUserInActivity_PAttachmentsInUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PActivity_PUserInActivity::InitAsDefaultInstance() {
}
class PActivity_PUserInActivity::_Internal {
 public:
};

PActivity_PUserInActivity::PActivity_PUserInActivity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PActivity.PUserInActivity)
}
PActivity_PUserInActivity::PActivity_PUserInActivity(const PActivity_PUserInActivity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      channels_(from.channels_),
      attachments_(from.attachments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  encrypted_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encrypted_password().empty()) {
    encrypted_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encrypted_password_);
  }
  reset_password_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reset_password_token().empty()) {
    reset_password_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reset_password_token_);
  }
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_first_name().empty()) {
    first_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_name().empty()) {
    last_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_name_);
  }
  current_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_current_sign_in_ip().empty()) {
    current_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.current_sign_in_ip_);
  }
  last_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_sign_in_ip().empty()) {
    last_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_sign_in_ip_);
  }
  auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth_token().empty()) {
    auth_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_token_);
  }
  locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_locale().empty()) {
    locale_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locale_);
  }
  gravatar_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gravatar_hash().empty()) {
    gravatar_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gravatar_hash_);
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  regstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_regstatus().empty()) {
    regstatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regstatus_);
  }
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_url().empty()) {
    avatar_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&updated_at_) -
    reinterpret_cast<char*>(&id_)) + sizeof(updated_at_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PActivity.PUserInActivity)
}

void PActivity_PUserInActivity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PActivity_PUserInActivity_proto_5fkandan_5flg_2eproto.base);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_password_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gravatar_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updated_at_) -
      reinterpret_cast<char*>(&id_)) + sizeof(updated_at_));
}

PActivity_PUserInActivity::~PActivity_PUserInActivity() {
  // @@protoc_insertion_point(destructor:kandan_lg.PActivity.PUserInActivity)
  SharedDtor();
}

void PActivity_PUserInActivity::SharedDtor() {
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_password_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gravatar_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regstatus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PActivity_PUserInActivity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PActivity_PUserInActivity& PActivity_PUserInActivity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PActivity_PUserInActivity_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PActivity_PUserInActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PActivity.PUserInActivity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  attachments_.Clear();
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_password_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gravatar_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regstatus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updated_at_) -
      reinterpret_cast<char*>(&id_)) + sizeof(updated_at_));
  _internal_metadata_.Clear();
}

const char* PActivity_PUserInActivity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PUserInActivity.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string encrypted_password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_encrypted_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PUserInActivity.encrypted_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reset_password_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reset_password_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PUserInActivity.reset_password_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 reset_password_sent_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          reset_password_sent_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 remember_created_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          remember_created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string first_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_first_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PUserInActivity.first_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_last_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PUserInActivity.last_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 signin_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          signin_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 current_sign_in_at = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          current_sign_in_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string current_sign_in_ip = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_current_sign_in_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PUserInActivity.current_sign_in_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 last_sign_in_at = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          last_sign_in_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_sign_in_ip = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_last_sign_in_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PUserInActivity.last_sign_in_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string auth_token = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_auth_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PUserInActivity.auth_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string locale = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_locale();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PUserInActivity.locale"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gravatar_hash = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_gravatar_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PUserInActivity.gravatar_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PUserInActivity.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string regstatus = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_regstatus();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PUserInActivity.regstatus"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool active = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_admin = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          is_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar_url = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.PUserInActivity.avatar_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kandan_lg.PActivity.PUserInActivity.PChannelsInUser channels = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser attachments = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_attachments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PActivity_PUserInActivity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PActivity.PUserInActivity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string email = 2;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PUserInActivity.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // string encrypted_password = 3;
  if (this->encrypted_password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encrypted_password().data(), static_cast<int>(this->_internal_encrypted_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PUserInActivity.encrypted_password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_encrypted_password(), target);
  }

  // string reset_password_token = 4;
  if (this->reset_password_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reset_password_token().data(), static_cast<int>(this->_internal_reset_password_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PUserInActivity.reset_password_token");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reset_password_token(), target);
  }

  // uint32 reset_password_sent_at = 5;
  if (this->reset_password_sent_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_reset_password_sent_at(), target);
  }

  // uint32 remember_created_at = 6;
  if (this->remember_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_remember_created_at(), target);
  }

  // string first_name = 7;
  if (this->first_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_name().data(), static_cast<int>(this->_internal_first_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PUserInActivity.first_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_first_name(), target);
  }

  // string last_name = 8;
  if (this->last_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_name().data(), static_cast<int>(this->_internal_last_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PUserInActivity.last_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_last_name(), target);
  }

  // uint32 signin_count = 9;
  if (this->signin_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_signin_count(), target);
  }

  // uint32 current_sign_in_at = 10;
  if (this->current_sign_in_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_current_sign_in_at(), target);
  }

  // string current_sign_in_ip = 11;
  if (this->current_sign_in_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_sign_in_ip().data(), static_cast<int>(this->_internal_current_sign_in_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PUserInActivity.current_sign_in_ip");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_current_sign_in_ip(), target);
  }

  // uint32 last_sign_in_at = 12;
  if (this->last_sign_in_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_last_sign_in_at(), target);
  }

  // string last_sign_in_ip = 13;
  if (this->last_sign_in_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_sign_in_ip().data(), static_cast<int>(this->_internal_last_sign_in_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PUserInActivity.last_sign_in_ip");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_last_sign_in_ip(), target);
  }

  // string auth_token = 14;
  if (this->auth_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_token().data(), static_cast<int>(this->_internal_auth_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PUserInActivity.auth_token");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_auth_token(), target);
  }

  // string locale = 15;
  if (this->locale().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_locale().data(), static_cast<int>(this->_internal_locale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PUserInActivity.locale");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_locale(), target);
  }

  // string gravatar_hash = 16;
  if (this->gravatar_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gravatar_hash().data(), static_cast<int>(this->_internal_gravatar_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PUserInActivity.gravatar_hash");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_gravatar_hash(), target);
  }

  // string username = 17;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PUserInActivity.username");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_username(), target);
  }

  // string regstatus = 18;
  if (this->regstatus().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_regstatus().data(), static_cast<int>(this->_internal_regstatus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PUserInActivity.regstatus");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_regstatus(), target);
  }

  // bool active = 19;
  if (this->active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_active(), target);
  }

  // bool is_admin = 20;
  if (this->is_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_is_admin(), target);
  }

  // string avatar_url = 21;
  if (this->avatar_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.PUserInActivity.avatar_url");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_avatar_url(), target);
  }

  // uint32 created_at = 22;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 23;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_updated_at(), target);
  }

  // repeated .kandan_lg.PActivity.PUserInActivity.PChannelsInUser channels = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_channels(i), target, stream);
  }

  // repeated .kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser attachments = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attachments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, this->_internal_attachments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PActivity.PUserInActivity)
  return target;
}

size_t PActivity_PUserInActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PActivity.PUserInActivity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kandan_lg.PActivity.PUserInActivity.PChannelsInUser channels = 24;
  total_size += 2UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kandan_lg.PActivity.PUserInActivity.PAttachmentsInUser attachments = 25;
  total_size += 2UL * this->_internal_attachments_size();
  for (const auto& msg : this->attachments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string email = 2;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string encrypted_password = 3;
  if (this->encrypted_password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encrypted_password());
  }

  // string reset_password_token = 4;
  if (this->reset_password_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reset_password_token());
  }

  // string first_name = 7;
  if (this->first_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_name());
  }

  // string last_name = 8;
  if (this->last_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_name());
  }

  // string current_sign_in_ip = 11;
  if (this->current_sign_in_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_sign_in_ip());
  }

  // string last_sign_in_ip = 13;
  if (this->last_sign_in_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_sign_in_ip());
  }

  // string auth_token = 14;
  if (this->auth_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_token());
  }

  // string locale = 15;
  if (this->locale().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locale());
  }

  // string gravatar_hash = 16;
  if (this->gravatar_hash().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gravatar_hash());
  }

  // string username = 17;
  if (this->username().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string regstatus = 18;
  if (this->regstatus().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regstatus());
  }

  // string avatar_url = 21;
  if (this->avatar_url().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar_url());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 reset_password_sent_at = 5;
  if (this->reset_password_sent_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reset_password_sent_at());
  }

  // uint32 remember_created_at = 6;
  if (this->remember_created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_remember_created_at());
  }

  // uint32 signin_count = 9;
  if (this->signin_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_signin_count());
  }

  // uint32 current_sign_in_at = 10;
  if (this->current_sign_in_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_current_sign_in_at());
  }

  // uint32 last_sign_in_at = 12;
  if (this->last_sign_in_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_sign_in_at());
  }

  // bool active = 19;
  if (this->active() != 0) {
    total_size += 2 + 1;
  }

  // bool is_admin = 20;
  if (this->is_admin() != 0) {
    total_size += 2 + 1;
  }

  // uint32 created_at = 22;
  if (this->created_at() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 23;
  if (this->updated_at() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PActivity_PUserInActivity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PActivity.PUserInActivity)
  GOOGLE_DCHECK_NE(&from, this);
  const PActivity_PUserInActivity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PActivity_PUserInActivity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PActivity.PUserInActivity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PActivity.PUserInActivity)
    MergeFrom(*source);
  }
}

void PActivity_PUserInActivity::MergeFrom(const PActivity_PUserInActivity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PActivity.PUserInActivity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  attachments_.MergeFrom(from.attachments_);
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.encrypted_password().size() > 0) {

    encrypted_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encrypted_password_);
  }
  if (from.reset_password_token().size() > 0) {

    reset_password_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reset_password_token_);
  }
  if (from.first_name().size() > 0) {

    first_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  if (from.last_name().size() > 0) {

    last_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_name_);
  }
  if (from.current_sign_in_ip().size() > 0) {

    current_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.current_sign_in_ip_);
  }
  if (from.last_sign_in_ip().size() > 0) {

    last_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_sign_in_ip_);
  }
  if (from.auth_token().size() > 0) {

    auth_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_token_);
  }
  if (from.locale().size() > 0) {

    locale_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locale_);
  }
  if (from.gravatar_hash().size() > 0) {

    gravatar_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gravatar_hash_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.regstatus().size() > 0) {

    regstatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regstatus_);
  }
  if (from.avatar_url().size() > 0) {

    avatar_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.reset_password_sent_at() != 0) {
    _internal_set_reset_password_sent_at(from._internal_reset_password_sent_at());
  }
  if (from.remember_created_at() != 0) {
    _internal_set_remember_created_at(from._internal_remember_created_at());
  }
  if (from.signin_count() != 0) {
    _internal_set_signin_count(from._internal_signin_count());
  }
  if (from.current_sign_in_at() != 0) {
    _internal_set_current_sign_in_at(from._internal_current_sign_in_at());
  }
  if (from.last_sign_in_at() != 0) {
    _internal_set_last_sign_in_at(from._internal_last_sign_in_at());
  }
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
  if (from.is_admin() != 0) {
    _internal_set_is_admin(from._internal_is_admin());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
}

void PActivity_PUserInActivity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PActivity.PUserInActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PActivity_PUserInActivity::CopyFrom(const PActivity_PUserInActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PActivity.PUserInActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PActivity_PUserInActivity::IsInitialized() const {
  return true;
}

void PActivity_PUserInActivity::InternalSwap(PActivity_PUserInActivity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
  attachments_.InternalSwap(&other->attachments_);
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  encrypted_password_.Swap(&other->encrypted_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reset_password_token_.Swap(&other->reset_password_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  first_name_.Swap(&other->first_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_name_.Swap(&other->last_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  current_sign_in_ip_.Swap(&other->current_sign_in_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_sign_in_ip_.Swap(&other->last_sign_in_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  auth_token_.Swap(&other->auth_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  locale_.Swap(&other->locale_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gravatar_hash_.Swap(&other->gravatar_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  regstatus_.Swap(&other->regstatus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatar_url_.Swap(&other->avatar_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(reset_password_sent_at_, other->reset_password_sent_at_);
  swap(remember_created_at_, other->remember_created_at_);
  swap(signin_count_, other->signin_count_);
  swap(current_sign_in_at_, other->current_sign_in_at_);
  swap(last_sign_in_at_, other->last_sign_in_at_);
  swap(active_, other->active_);
  swap(is_admin_, other->is_admin_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PActivity_PUserInActivity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PActivity::InitAsDefaultInstance() {
  ::kandan_lg::_PActivity_default_instance_._instance.get_mutable()->channel_ = const_cast< ::kandan_lg::PActivity_PChannelInActivity*>(
      ::kandan_lg::PActivity_PChannelInActivity::internal_default_instance());
  ::kandan_lg::_PActivity_default_instance_._instance.get_mutable()->user_ = const_cast< ::kandan_lg::PActivity_PUserInActivity*>(
      ::kandan_lg::PActivity_PUserInActivity::internal_default_instance());
}
class PActivity::_Internal {
 public:
  static const ::kandan_lg::PActivity_PChannelInActivity& channel(const PActivity* msg);
  static const ::kandan_lg::PActivity_PUserInActivity& user(const PActivity* msg);
};

const ::kandan_lg::PActivity_PChannelInActivity&
PActivity::_Internal::channel(const PActivity* msg) {
  return *msg->channel_;
}
const ::kandan_lg::PActivity_PUserInActivity&
PActivity::_Internal::user(const PActivity* msg) {
  return *msg->user_;
}
PActivity::PActivity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PActivity)
}
PActivity::PActivity(const PActivity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from._internal_has_channel()) {
    channel_ = new ::kandan_lg::PActivity_PChannelInActivity(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  if (from._internal_has_user()) {
    user_ = new ::kandan_lg::PActivity_PUserInActivity(*from.user_);
  } else {
    user_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PActivity)
}

void PActivity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PActivity_proto_5fkandan_5flg_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(user_id_));
}

PActivity::~PActivity() {
  // @@protoc_insertion_point(destructor:kandan_lg.PActivity)
  SharedDtor();
}

void PActivity::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete channel_;
  if (this != internal_default_instance()) delete user_;
}

void PActivity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PActivity& PActivity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PActivity_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PActivity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(user_id_));
  _internal_metadata_.Clear();
}

const char* PActivity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PActivity.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 channel_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kandan_lg.PActivity.PChannelInActivity channel = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kandan_lg.PActivity.PUserInActivity user = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PActivity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PActivity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 created_at = 2;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 3;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_updated_at(), target);
  }

  // string action = 4;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  // string content = 5;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PActivity.content");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_content(), target);
  }

  // uint32 channel_id = 6;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_channel_id(), target);
  }

  // uint32 user_id = 7;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_user_id(), target);
  }

  // .kandan_lg.PActivity.PChannelInActivity channel = 8;
  if (this->has_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::channel(this), target, stream);
  }

  // .kandan_lg.PActivity.PUserInActivity user = 9;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PActivity)
  return target;
}

size_t PActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PActivity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action = 4;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // string content = 5;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // .kandan_lg.PActivity.PChannelInActivity channel = 8;
  if (this->has_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  // .kandan_lg.PActivity.PUserInActivity user = 9;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 created_at = 2;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 3;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 channel_id = 6;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel_id());
  }

  // uint32 user_id = 7;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PActivity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PActivity)
  GOOGLE_DCHECK_NE(&from, this);
  const PActivity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PActivity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PActivity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PActivity)
    MergeFrom(*source);
  }
}

void PActivity::MergeFrom(const PActivity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PActivity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_channel()) {
    _internal_mutable_channel()->::kandan_lg::PActivity_PChannelInActivity::MergeFrom(from._internal_channel());
  }
  if (from.has_user()) {
    _internal_mutable_user()->::kandan_lg::PActivity_PUserInActivity::MergeFrom(from._internal_user());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void PActivity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PActivity::CopyFrom(const PActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PActivity::IsInitialized() const {
  return true;
}

void PActivity::InternalSwap(PActivity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_, other->channel_);
  swap(user_, other->user_);
  swap(id_, other->id_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(channel_id_, other->channel_id_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PActivity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel::InitAsDefaultInstance() {
}
class PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel::_Internal {
 public:
};

PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel::PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser.PActivitiesInChannel)
}
PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel::PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel(const PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser.PActivitiesInChannel)
}

void PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel_proto_5fkandan_5flg_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(user_id_));
}

PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel::~PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel() {
  // @@protoc_insertion_point(destructor:kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser.PActivitiesInChannel)
  SharedDtor();
}

void PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel& PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser.PActivitiesInChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(user_id_));
  _internal_metadata_.Clear();
}

const char* PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser.PActivitiesInChannel.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser.PActivitiesInChannel.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 channel_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser.PActivitiesInChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 created_at = 2;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 3;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_updated_at(), target);
  }

  // string action = 4;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser.PActivitiesInChannel.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  // string content = 5;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser.PActivitiesInChannel.content");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_content(), target);
  }

  // uint32 channel_id = 6;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_channel_id(), target);
  }

  // uint32 user_id = 7;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser.PActivitiesInChannel)
  return target;
}

size_t PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser.PActivitiesInChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action = 4;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // string content = 5;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 created_at = 2;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 3;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 channel_id = 6;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel_id());
  }

  // uint32 user_id = 7;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser.PActivitiesInChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser.PActivitiesInChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser.PActivitiesInChannel)
    MergeFrom(*source);
  }
}

void PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel::MergeFrom(const PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser.PActivitiesInChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser.PActivitiesInChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel::CopyFrom(const PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser.PActivitiesInChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel::IsInitialized() const {
  return true;
}

void PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel::InternalSwap(PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(channel_id_, other->channel_id_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PAttachment_PUserInAttachment_PChannelsInUser::InitAsDefaultInstance() {
}
class PAttachment_PUserInAttachment_PChannelsInUser::_Internal {
 public:
};

PAttachment_PUserInAttachment_PChannelsInUser::PAttachment_PUserInAttachment_PChannelsInUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser)
}
PAttachment_PUserInAttachment_PChannelsInUser::PAttachment_PUserInAttachment_PChannelsInUser(const PAttachment_PUserInAttachment_PChannelsInUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      activities_(from.activities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&id_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser)
}

void PAttachment_PUserInAttachment_PChannelsInUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PAttachment_PUserInAttachment_PChannelsInUser_proto_5fkandan_5flg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&id_)) + sizeof(count_));
}

PAttachment_PUserInAttachment_PChannelsInUser::~PAttachment_PUserInAttachment_PChannelsInUser() {
  // @@protoc_insertion_point(destructor:kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser)
  SharedDtor();
}

void PAttachment_PUserInAttachment_PChannelsInUser::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PAttachment_PUserInAttachment_PChannelsInUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PAttachment_PUserInAttachment_PChannelsInUser& PAttachment_PUserInAttachment_PChannelsInUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PAttachment_PUserInAttachment_PChannelsInUser_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PAttachment_PUserInAttachment_PChannelsInUser::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activities_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&id_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

const char* PAttachment_PUserInAttachment_PChannelsInUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser.PActivitiesInChannel activities = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_activities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PAttachment_PUserInAttachment_PChannelsInUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 created_at = 3;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 4;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_updated_at(), target);
  }

  // uint32 user_id = 5;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_user_id(), target);
  }

  // uint32 count = 6;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_count(), target);
  }

  // repeated .kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser.PActivitiesInChannel activities = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_activities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_activities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser)
  return target;
}

size_t PAttachment_PUserInAttachment_PChannelsInUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser.PActivitiesInChannel activities = 7;
  total_size += 1UL * this->_internal_activities_size();
  for (const auto& msg : this->activities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 created_at = 3;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 4;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 user_id = 5;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  // uint32 count = 6;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PAttachment_PUserInAttachment_PChannelsInUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser)
  GOOGLE_DCHECK_NE(&from, this);
  const PAttachment_PUserInAttachment_PChannelsInUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PAttachment_PUserInAttachment_PChannelsInUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser)
    MergeFrom(*source);
  }
}

void PAttachment_PUserInAttachment_PChannelsInUser::MergeFrom(const PAttachment_PUserInAttachment_PChannelsInUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  activities_.MergeFrom(from.activities_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void PAttachment_PUserInAttachment_PChannelsInUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PAttachment_PUserInAttachment_PChannelsInUser::CopyFrom(const PAttachment_PUserInAttachment_PChannelsInUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PAttachment_PUserInAttachment_PChannelsInUser::IsInitialized() const {
  return true;
}

void PAttachment_PUserInAttachment_PChannelsInUser::InternalSwap(PAttachment_PUserInAttachment_PChannelsInUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  activities_.InternalSwap(&other->activities_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(user_id_, other->user_id_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PAttachment_PUserInAttachment_PChannelsInUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity::InitAsDefaultInstance() {
}
class PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity::_Internal {
 public:
};

PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity::PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser.PChannelInActivity)
}
PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity::PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity(const PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&id_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser.PChannelInActivity)
}

void PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity_proto_5fkandan_5flg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&id_)) + sizeof(count_));
}

PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity::~PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity() {
  // @@protoc_insertion_point(destructor:kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser.PChannelInActivity)
  SharedDtor();
}

void PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity& PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser.PChannelInActivity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&id_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

const char* PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser.PChannelInActivity.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser.PChannelInActivity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser.PChannelInActivity.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 created_at = 3;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 4;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_updated_at(), target);
  }

  // uint32 user_id = 5;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_user_id(), target);
  }

  // uint32 count = 6;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser.PChannelInActivity)
  return target;
}

size_t PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser.PChannelInActivity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 created_at = 3;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 4;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 user_id = 5;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  // uint32 count = 6;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser.PChannelInActivity)
  GOOGLE_DCHECK_NE(&from, this);
  const PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser.PChannelInActivity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser.PChannelInActivity)
    MergeFrom(*source);
  }
}

void PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity::MergeFrom(const PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser.PChannelInActivity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser.PChannelInActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity::CopyFrom(const PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser.PChannelInActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity::IsInitialized() const {
  return true;
}

void PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity::InternalSwap(PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(user_id_, other->user_id_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PAttachment_PUserInAttachment_PActivitiesInUser::InitAsDefaultInstance() {
  ::kandan_lg::_PAttachment_PUserInAttachment_PActivitiesInUser_default_instance_._instance.get_mutable()->channel_ = const_cast< ::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity*>(
      ::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity::internal_default_instance());
}
class PAttachment_PUserInAttachment_PActivitiesInUser::_Internal {
 public:
  static const ::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity& channel(const PAttachment_PUserInAttachment_PActivitiesInUser* msg);
};

const ::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity&
PAttachment_PUserInAttachment_PActivitiesInUser::_Internal::channel(const PAttachment_PUserInAttachment_PActivitiesInUser* msg) {
  return *msg->channel_;
}
PAttachment_PUserInAttachment_PActivitiesInUser::PAttachment_PUserInAttachment_PActivitiesInUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser)
}
PAttachment_PUserInAttachment_PActivitiesInUser::PAttachment_PUserInAttachment_PActivitiesInUser(const PAttachment_PUserInAttachment_PActivitiesInUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from._internal_has_channel()) {
    channel_ = new ::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser)
}

void PAttachment_PUserInAttachment_PActivitiesInUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PAttachment_PUserInAttachment_PActivitiesInUser_proto_5fkandan_5flg_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(user_id_));
}

PAttachment_PUserInAttachment_PActivitiesInUser::~PAttachment_PUserInAttachment_PActivitiesInUser() {
  // @@protoc_insertion_point(destructor:kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser)
  SharedDtor();
}

void PAttachment_PUserInAttachment_PActivitiesInUser::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete channel_;
}

void PAttachment_PUserInAttachment_PActivitiesInUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PAttachment_PUserInAttachment_PActivitiesInUser& PAttachment_PUserInAttachment_PActivitiesInUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PAttachment_PUserInAttachment_PActivitiesInUser_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PAttachment_PUserInAttachment_PActivitiesInUser::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(user_id_));
  _internal_metadata_.Clear();
}

const char* PAttachment_PUserInAttachment_PActivitiesInUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 channel_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser.PChannelInActivity channel = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PAttachment_PUserInAttachment_PActivitiesInUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 created_at = 2;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 3;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_updated_at(), target);
  }

  // string action = 4;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  // string content = 5;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser.content");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_content(), target);
  }

  // uint32 channel_id = 6;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_channel_id(), target);
  }

  // uint32 user_id = 7;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_user_id(), target);
  }

  // .kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser.PChannelInActivity channel = 8;
  if (this->has_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::channel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser)
  return target;
}

size_t PAttachment_PUserInAttachment_PActivitiesInUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action = 4;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // string content = 5;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // .kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser.PChannelInActivity channel = 8;
  if (this->has_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 created_at = 2;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 3;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 channel_id = 6;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel_id());
  }

  // uint32 user_id = 7;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PAttachment_PUserInAttachment_PActivitiesInUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser)
  GOOGLE_DCHECK_NE(&from, this);
  const PAttachment_PUserInAttachment_PActivitiesInUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PAttachment_PUserInAttachment_PActivitiesInUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser)
    MergeFrom(*source);
  }
}

void PAttachment_PUserInAttachment_PActivitiesInUser::MergeFrom(const PAttachment_PUserInAttachment_PActivitiesInUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_channel()) {
    _internal_mutable_channel()->::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity::MergeFrom(from._internal_channel());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void PAttachment_PUserInAttachment_PActivitiesInUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PAttachment_PUserInAttachment_PActivitiesInUser::CopyFrom(const PAttachment_PUserInAttachment_PActivitiesInUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PAttachment_PUserInAttachment_PActivitiesInUser::IsInitialized() const {
  return true;
}

void PAttachment_PUserInAttachment_PActivitiesInUser::InternalSwap(PAttachment_PUserInAttachment_PActivitiesInUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_, other->channel_);
  swap(id_, other->id_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(channel_id_, other->channel_id_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PAttachment_PUserInAttachment_PActivitiesInUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PAttachment_PUserInAttachment::InitAsDefaultInstance() {
}
class PAttachment_PUserInAttachment::_Internal {
 public:
};

PAttachment_PUserInAttachment::PAttachment_PUserInAttachment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PAttachment.PUserInAttachment)
}
PAttachment_PUserInAttachment::PAttachment_PUserInAttachment(const PAttachment_PUserInAttachment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      channels_(from.channels_),
      activities_(from.activities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  encrypted_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encrypted_password().empty()) {
    encrypted_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encrypted_password_);
  }
  reset_password_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reset_password_token().empty()) {
    reset_password_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reset_password_token_);
  }
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_first_name().empty()) {
    first_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_name().empty()) {
    last_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_name_);
  }
  current_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_current_sign_in_ip().empty()) {
    current_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.current_sign_in_ip_);
  }
  last_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_sign_in_ip().empty()) {
    last_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_sign_in_ip_);
  }
  auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth_token().empty()) {
    auth_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_token_);
  }
  locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_locale().empty()) {
    locale_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locale_);
  }
  gravatar_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gravatar_hash().empty()) {
    gravatar_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gravatar_hash_);
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  regstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_regstatus().empty()) {
    regstatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regstatus_);
  }
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_url().empty()) {
    avatar_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&updated_at_) -
    reinterpret_cast<char*>(&id_)) + sizeof(updated_at_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PAttachment.PUserInAttachment)
}

void PAttachment_PUserInAttachment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PAttachment_PUserInAttachment_proto_5fkandan_5flg_2eproto.base);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_password_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gravatar_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updated_at_) -
      reinterpret_cast<char*>(&id_)) + sizeof(updated_at_));
}

PAttachment_PUserInAttachment::~PAttachment_PUserInAttachment() {
  // @@protoc_insertion_point(destructor:kandan_lg.PAttachment.PUserInAttachment)
  SharedDtor();
}

void PAttachment_PUserInAttachment::SharedDtor() {
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_password_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gravatar_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regstatus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PAttachment_PUserInAttachment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PAttachment_PUserInAttachment& PAttachment_PUserInAttachment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PAttachment_PUserInAttachment_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PAttachment_PUserInAttachment::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PAttachment.PUserInAttachment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  activities_.Clear();
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_password_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gravatar_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regstatus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updated_at_) -
      reinterpret_cast<char*>(&id_)) + sizeof(updated_at_));
  _internal_metadata_.Clear();
}

const char* PAttachment_PUserInAttachment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PUserInAttachment.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string encrypted_password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_encrypted_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PUserInAttachment.encrypted_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reset_password_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reset_password_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PUserInAttachment.reset_password_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 reset_password_sent_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          reset_password_sent_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 remember_created_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          remember_created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string first_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_first_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PUserInAttachment.first_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_last_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PUserInAttachment.last_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 signin_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          signin_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 current_sign_in_at = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          current_sign_in_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string current_sign_in_ip = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_current_sign_in_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PUserInAttachment.current_sign_in_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 last_sign_in_at = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          last_sign_in_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_sign_in_ip = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_last_sign_in_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PUserInAttachment.last_sign_in_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string auth_token = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_auth_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PUserInAttachment.auth_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string locale = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_locale();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PUserInAttachment.locale"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gravatar_hash = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_gravatar_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PUserInAttachment.gravatar_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PUserInAttachment.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string regstatus = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_regstatus();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PUserInAttachment.regstatus"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool active = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_admin = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          is_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar_url = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PUserInAttachment.avatar_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser channels = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser activities = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_activities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PAttachment_PUserInAttachment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PAttachment.PUserInAttachment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string email = 2;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PUserInAttachment.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // string encrypted_password = 3;
  if (this->encrypted_password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encrypted_password().data(), static_cast<int>(this->_internal_encrypted_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PUserInAttachment.encrypted_password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_encrypted_password(), target);
  }

  // string reset_password_token = 4;
  if (this->reset_password_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reset_password_token().data(), static_cast<int>(this->_internal_reset_password_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PUserInAttachment.reset_password_token");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reset_password_token(), target);
  }

  // uint32 reset_password_sent_at = 5;
  if (this->reset_password_sent_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_reset_password_sent_at(), target);
  }

  // uint32 remember_created_at = 6;
  if (this->remember_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_remember_created_at(), target);
  }

  // string first_name = 7;
  if (this->first_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_name().data(), static_cast<int>(this->_internal_first_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PUserInAttachment.first_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_first_name(), target);
  }

  // string last_name = 8;
  if (this->last_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_name().data(), static_cast<int>(this->_internal_last_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PUserInAttachment.last_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_last_name(), target);
  }

  // uint32 signin_count = 9;
  if (this->signin_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_signin_count(), target);
  }

  // uint32 current_sign_in_at = 10;
  if (this->current_sign_in_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_current_sign_in_at(), target);
  }

  // string current_sign_in_ip = 11;
  if (this->current_sign_in_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_sign_in_ip().data(), static_cast<int>(this->_internal_current_sign_in_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PUserInAttachment.current_sign_in_ip");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_current_sign_in_ip(), target);
  }

  // uint32 last_sign_in_at = 12;
  if (this->last_sign_in_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_last_sign_in_at(), target);
  }

  // string last_sign_in_ip = 13;
  if (this->last_sign_in_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_sign_in_ip().data(), static_cast<int>(this->_internal_last_sign_in_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PUserInAttachment.last_sign_in_ip");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_last_sign_in_ip(), target);
  }

  // string auth_token = 14;
  if (this->auth_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_token().data(), static_cast<int>(this->_internal_auth_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PUserInAttachment.auth_token");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_auth_token(), target);
  }

  // string locale = 15;
  if (this->locale().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_locale().data(), static_cast<int>(this->_internal_locale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PUserInAttachment.locale");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_locale(), target);
  }

  // string gravatar_hash = 16;
  if (this->gravatar_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gravatar_hash().data(), static_cast<int>(this->_internal_gravatar_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PUserInAttachment.gravatar_hash");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_gravatar_hash(), target);
  }

  // string username = 17;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PUserInAttachment.username");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_username(), target);
  }

  // string regstatus = 18;
  if (this->regstatus().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_regstatus().data(), static_cast<int>(this->_internal_regstatus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PUserInAttachment.regstatus");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_regstatus(), target);
  }

  // bool active = 19;
  if (this->active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_active(), target);
  }

  // bool is_admin = 20;
  if (this->is_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_is_admin(), target);
  }

  // string avatar_url = 21;
  if (this->avatar_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PUserInAttachment.avatar_url");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_avatar_url(), target);
  }

  // uint32 created_at = 22;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 23;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_updated_at(), target);
  }

  // repeated .kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser channels = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_channels(i), target, stream);
  }

  // repeated .kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser activities = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_activities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, this->_internal_activities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PAttachment.PUserInAttachment)
  return target;
}

size_t PAttachment_PUserInAttachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PAttachment.PUserInAttachment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kandan_lg.PAttachment.PUserInAttachment.PChannelsInUser channels = 24;
  total_size += 2UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kandan_lg.PAttachment.PUserInAttachment.PActivitiesInUser activities = 25;
  total_size += 2UL * this->_internal_activities_size();
  for (const auto& msg : this->activities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string email = 2;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string encrypted_password = 3;
  if (this->encrypted_password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encrypted_password());
  }

  // string reset_password_token = 4;
  if (this->reset_password_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reset_password_token());
  }

  // string first_name = 7;
  if (this->first_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_name());
  }

  // string last_name = 8;
  if (this->last_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_name());
  }

  // string current_sign_in_ip = 11;
  if (this->current_sign_in_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_sign_in_ip());
  }

  // string last_sign_in_ip = 13;
  if (this->last_sign_in_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_sign_in_ip());
  }

  // string auth_token = 14;
  if (this->auth_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_token());
  }

  // string locale = 15;
  if (this->locale().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locale());
  }

  // string gravatar_hash = 16;
  if (this->gravatar_hash().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gravatar_hash());
  }

  // string username = 17;
  if (this->username().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string regstatus = 18;
  if (this->regstatus().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regstatus());
  }

  // string avatar_url = 21;
  if (this->avatar_url().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar_url());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 reset_password_sent_at = 5;
  if (this->reset_password_sent_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reset_password_sent_at());
  }

  // uint32 remember_created_at = 6;
  if (this->remember_created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_remember_created_at());
  }

  // uint32 signin_count = 9;
  if (this->signin_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_signin_count());
  }

  // uint32 current_sign_in_at = 10;
  if (this->current_sign_in_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_current_sign_in_at());
  }

  // uint32 last_sign_in_at = 12;
  if (this->last_sign_in_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_sign_in_at());
  }

  // bool active = 19;
  if (this->active() != 0) {
    total_size += 2 + 1;
  }

  // bool is_admin = 20;
  if (this->is_admin() != 0) {
    total_size += 2 + 1;
  }

  // uint32 created_at = 22;
  if (this->created_at() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 23;
  if (this->updated_at() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PAttachment_PUserInAttachment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PAttachment.PUserInAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  const PAttachment_PUserInAttachment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PAttachment_PUserInAttachment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PAttachment.PUserInAttachment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PAttachment.PUserInAttachment)
    MergeFrom(*source);
  }
}

void PAttachment_PUserInAttachment::MergeFrom(const PAttachment_PUserInAttachment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PAttachment.PUserInAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  activities_.MergeFrom(from.activities_);
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.encrypted_password().size() > 0) {

    encrypted_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encrypted_password_);
  }
  if (from.reset_password_token().size() > 0) {

    reset_password_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reset_password_token_);
  }
  if (from.first_name().size() > 0) {

    first_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  if (from.last_name().size() > 0) {

    last_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_name_);
  }
  if (from.current_sign_in_ip().size() > 0) {

    current_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.current_sign_in_ip_);
  }
  if (from.last_sign_in_ip().size() > 0) {

    last_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_sign_in_ip_);
  }
  if (from.auth_token().size() > 0) {

    auth_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_token_);
  }
  if (from.locale().size() > 0) {

    locale_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locale_);
  }
  if (from.gravatar_hash().size() > 0) {

    gravatar_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gravatar_hash_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.regstatus().size() > 0) {

    regstatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regstatus_);
  }
  if (from.avatar_url().size() > 0) {

    avatar_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.reset_password_sent_at() != 0) {
    _internal_set_reset_password_sent_at(from._internal_reset_password_sent_at());
  }
  if (from.remember_created_at() != 0) {
    _internal_set_remember_created_at(from._internal_remember_created_at());
  }
  if (from.signin_count() != 0) {
    _internal_set_signin_count(from._internal_signin_count());
  }
  if (from.current_sign_in_at() != 0) {
    _internal_set_current_sign_in_at(from._internal_current_sign_in_at());
  }
  if (from.last_sign_in_at() != 0) {
    _internal_set_last_sign_in_at(from._internal_last_sign_in_at());
  }
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
  if (from.is_admin() != 0) {
    _internal_set_is_admin(from._internal_is_admin());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
}

void PAttachment_PUserInAttachment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PAttachment.PUserInAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PAttachment_PUserInAttachment::CopyFrom(const PAttachment_PUserInAttachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PAttachment.PUserInAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PAttachment_PUserInAttachment::IsInitialized() const {
  return true;
}

void PAttachment_PUserInAttachment::InternalSwap(PAttachment_PUserInAttachment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
  activities_.InternalSwap(&other->activities_);
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  encrypted_password_.Swap(&other->encrypted_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reset_password_token_.Swap(&other->reset_password_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  first_name_.Swap(&other->first_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_name_.Swap(&other->last_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  current_sign_in_ip_.Swap(&other->current_sign_in_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_sign_in_ip_.Swap(&other->last_sign_in_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  auth_token_.Swap(&other->auth_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  locale_.Swap(&other->locale_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gravatar_hash_.Swap(&other->gravatar_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  regstatus_.Swap(&other->regstatus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatar_url_.Swap(&other->avatar_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(reset_password_sent_at_, other->reset_password_sent_at_);
  swap(remember_created_at_, other->remember_created_at_);
  swap(signin_count_, other->signin_count_);
  swap(current_sign_in_at_, other->current_sign_in_at_);
  swap(last_sign_in_at_, other->last_sign_in_at_);
  swap(active_, other->active_);
  swap(is_admin_, other->is_admin_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PAttachment_PUserInAttachment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity::InitAsDefaultInstance() {
}
class PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity::_Internal {
 public:
};

PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity)
}
PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity(const PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  encrypted_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encrypted_password().empty()) {
    encrypted_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encrypted_password_);
  }
  reset_password_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reset_password_token().empty()) {
    reset_password_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reset_password_token_);
  }
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_first_name().empty()) {
    first_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_name().empty()) {
    last_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_name_);
  }
  current_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_current_sign_in_ip().empty()) {
    current_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.current_sign_in_ip_);
  }
  last_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_sign_in_ip().empty()) {
    last_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_sign_in_ip_);
  }
  auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth_token().empty()) {
    auth_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_token_);
  }
  locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_locale().empty()) {
    locale_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locale_);
  }
  gravatar_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gravatar_hash().empty()) {
    gravatar_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gravatar_hash_);
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  regstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_regstatus().empty()) {
    regstatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regstatus_);
  }
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_url().empty()) {
    avatar_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&updated_at_) -
    reinterpret_cast<char*>(&id_)) + sizeof(updated_at_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity)
}

void PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity_proto_5fkandan_5flg_2eproto.base);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_password_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gravatar_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updated_at_) -
      reinterpret_cast<char*>(&id_)) + sizeof(updated_at_));
}

PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity::~PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity() {
  // @@protoc_insertion_point(destructor:kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity)
  SharedDtor();
}

void PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity::SharedDtor() {
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_password_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gravatar_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regstatus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity& PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_password_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gravatar_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regstatus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updated_at_) -
      reinterpret_cast<char*>(&id_)) + sizeof(updated_at_));
  _internal_metadata_.Clear();
}

const char* PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string encrypted_password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_encrypted_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity.encrypted_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reset_password_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reset_password_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity.reset_password_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 reset_password_sent_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          reset_password_sent_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 remember_created_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          remember_created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string first_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_first_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity.first_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_last_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity.last_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 signin_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          signin_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 current_sign_in_at = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          current_sign_in_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string current_sign_in_ip = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_current_sign_in_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity.current_sign_in_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 last_sign_in_at = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          last_sign_in_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_sign_in_ip = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_last_sign_in_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity.last_sign_in_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string auth_token = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_auth_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity.auth_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string locale = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_locale();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity.locale"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gravatar_hash = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_gravatar_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity.gravatar_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string regstatus = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_regstatus();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity.regstatus"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool active = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_admin = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          is_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar_url = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity.avatar_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string email = 2;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // string encrypted_password = 3;
  if (this->encrypted_password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encrypted_password().data(), static_cast<int>(this->_internal_encrypted_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity.encrypted_password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_encrypted_password(), target);
  }

  // string reset_password_token = 4;
  if (this->reset_password_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reset_password_token().data(), static_cast<int>(this->_internal_reset_password_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity.reset_password_token");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reset_password_token(), target);
  }

  // uint32 reset_password_sent_at = 5;
  if (this->reset_password_sent_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_reset_password_sent_at(), target);
  }

  // uint32 remember_created_at = 6;
  if (this->remember_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_remember_created_at(), target);
  }

  // string first_name = 7;
  if (this->first_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_name().data(), static_cast<int>(this->_internal_first_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity.first_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_first_name(), target);
  }

  // string last_name = 8;
  if (this->last_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_name().data(), static_cast<int>(this->_internal_last_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity.last_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_last_name(), target);
  }

  // uint32 signin_count = 9;
  if (this->signin_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_signin_count(), target);
  }

  // uint32 current_sign_in_at = 10;
  if (this->current_sign_in_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_current_sign_in_at(), target);
  }

  // string current_sign_in_ip = 11;
  if (this->current_sign_in_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_sign_in_ip().data(), static_cast<int>(this->_internal_current_sign_in_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity.current_sign_in_ip");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_current_sign_in_ip(), target);
  }

  // uint32 last_sign_in_at = 12;
  if (this->last_sign_in_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_last_sign_in_at(), target);
  }

  // string last_sign_in_ip = 13;
  if (this->last_sign_in_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_sign_in_ip().data(), static_cast<int>(this->_internal_last_sign_in_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity.last_sign_in_ip");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_last_sign_in_ip(), target);
  }

  // string auth_token = 14;
  if (this->auth_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_token().data(), static_cast<int>(this->_internal_auth_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity.auth_token");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_auth_token(), target);
  }

  // string locale = 15;
  if (this->locale().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_locale().data(), static_cast<int>(this->_internal_locale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity.locale");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_locale(), target);
  }

  // string gravatar_hash = 16;
  if (this->gravatar_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gravatar_hash().data(), static_cast<int>(this->_internal_gravatar_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity.gravatar_hash");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_gravatar_hash(), target);
  }

  // string username = 17;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity.username");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_username(), target);
  }

  // string regstatus = 18;
  if (this->regstatus().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_regstatus().data(), static_cast<int>(this->_internal_regstatus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity.regstatus");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_regstatus(), target);
  }

  // bool active = 19;
  if (this->active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_active(), target);
  }

  // bool is_admin = 20;
  if (this->is_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_is_admin(), target);
  }

  // string avatar_url = 21;
  if (this->avatar_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity.avatar_url");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_avatar_url(), target);
  }

  // uint32 created_at = 22;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 23;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_updated_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity)
  return target;
}

size_t PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 2;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string encrypted_password = 3;
  if (this->encrypted_password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encrypted_password());
  }

  // string reset_password_token = 4;
  if (this->reset_password_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reset_password_token());
  }

  // string first_name = 7;
  if (this->first_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_name());
  }

  // string last_name = 8;
  if (this->last_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_name());
  }

  // string current_sign_in_ip = 11;
  if (this->current_sign_in_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_sign_in_ip());
  }

  // string last_sign_in_ip = 13;
  if (this->last_sign_in_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_sign_in_ip());
  }

  // string auth_token = 14;
  if (this->auth_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_token());
  }

  // string locale = 15;
  if (this->locale().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locale());
  }

  // string gravatar_hash = 16;
  if (this->gravatar_hash().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gravatar_hash());
  }

  // string username = 17;
  if (this->username().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string regstatus = 18;
  if (this->regstatus().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regstatus());
  }

  // string avatar_url = 21;
  if (this->avatar_url().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar_url());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 reset_password_sent_at = 5;
  if (this->reset_password_sent_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reset_password_sent_at());
  }

  // uint32 remember_created_at = 6;
  if (this->remember_created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_remember_created_at());
  }

  // uint32 signin_count = 9;
  if (this->signin_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_signin_count());
  }

  // uint32 current_sign_in_at = 10;
  if (this->current_sign_in_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_current_sign_in_at());
  }

  // uint32 last_sign_in_at = 12;
  if (this->last_sign_in_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_sign_in_at());
  }

  // bool active = 19;
  if (this->active() != 0) {
    total_size += 2 + 1;
  }

  // bool is_admin = 20;
  if (this->is_admin() != 0) {
    total_size += 2 + 1;
  }

  // uint32 created_at = 22;
  if (this->created_at() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 23;
  if (this->updated_at() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity)
  GOOGLE_DCHECK_NE(&from, this);
  const PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity)
    MergeFrom(*source);
  }
}

void PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity::MergeFrom(const PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.encrypted_password().size() > 0) {

    encrypted_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encrypted_password_);
  }
  if (from.reset_password_token().size() > 0) {

    reset_password_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reset_password_token_);
  }
  if (from.first_name().size() > 0) {

    first_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  if (from.last_name().size() > 0) {

    last_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_name_);
  }
  if (from.current_sign_in_ip().size() > 0) {

    current_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.current_sign_in_ip_);
  }
  if (from.last_sign_in_ip().size() > 0) {

    last_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_sign_in_ip_);
  }
  if (from.auth_token().size() > 0) {

    auth_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_token_);
  }
  if (from.locale().size() > 0) {

    locale_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locale_);
  }
  if (from.gravatar_hash().size() > 0) {

    gravatar_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gravatar_hash_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.regstatus().size() > 0) {

    regstatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regstatus_);
  }
  if (from.avatar_url().size() > 0) {

    avatar_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.reset_password_sent_at() != 0) {
    _internal_set_reset_password_sent_at(from._internal_reset_password_sent_at());
  }
  if (from.remember_created_at() != 0) {
    _internal_set_remember_created_at(from._internal_remember_created_at());
  }
  if (from.signin_count() != 0) {
    _internal_set_signin_count(from._internal_signin_count());
  }
  if (from.current_sign_in_at() != 0) {
    _internal_set_current_sign_in_at(from._internal_current_sign_in_at());
  }
  if (from.last_sign_in_at() != 0) {
    _internal_set_last_sign_in_at(from._internal_last_sign_in_at());
  }
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
  if (from.is_admin() != 0) {
    _internal_set_is_admin(from._internal_is_admin());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
}

void PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity::CopyFrom(const PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity::IsInitialized() const {
  return true;
}

void PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity::InternalSwap(PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  encrypted_password_.Swap(&other->encrypted_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reset_password_token_.Swap(&other->reset_password_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  first_name_.Swap(&other->first_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_name_.Swap(&other->last_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  current_sign_in_ip_.Swap(&other->current_sign_in_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_sign_in_ip_.Swap(&other->last_sign_in_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  auth_token_.Swap(&other->auth_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  locale_.Swap(&other->locale_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gravatar_hash_.Swap(&other->gravatar_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  regstatus_.Swap(&other->regstatus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatar_url_.Swap(&other->avatar_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(reset_password_sent_at_, other->reset_password_sent_at_);
  swap(remember_created_at_, other->remember_created_at_);
  swap(signin_count_, other->signin_count_);
  swap(current_sign_in_at_, other->current_sign_in_at_);
  swap(last_sign_in_at_, other->last_sign_in_at_);
  swap(active_, other->active_);
  swap(is_admin_, other->is_admin_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PAttachment_PChannelInAttachment_PActivitiesInChannel::InitAsDefaultInstance() {
  ::kandan_lg::_PAttachment_PChannelInAttachment_PActivitiesInChannel_default_instance_._instance.get_mutable()->user_ = const_cast< ::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity*>(
      ::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity::internal_default_instance());
}
class PAttachment_PChannelInAttachment_PActivitiesInChannel::_Internal {
 public:
  static const ::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity& user(const PAttachment_PChannelInAttachment_PActivitiesInChannel* msg);
};

const ::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity&
PAttachment_PChannelInAttachment_PActivitiesInChannel::_Internal::user(const PAttachment_PChannelInAttachment_PActivitiesInChannel* msg) {
  return *msg->user_;
}
PAttachment_PChannelInAttachment_PActivitiesInChannel::PAttachment_PChannelInAttachment_PActivitiesInChannel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel)
}
PAttachment_PChannelInAttachment_PActivitiesInChannel::PAttachment_PChannelInAttachment_PActivitiesInChannel(const PAttachment_PChannelInAttachment_PActivitiesInChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from._internal_has_user()) {
    user_ = new ::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity(*from.user_);
  } else {
    user_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel)
}

void PAttachment_PChannelInAttachment_PActivitiesInChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PAttachment_PChannelInAttachment_PActivitiesInChannel_proto_5fkandan_5flg_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&user_)) + sizeof(user_id_));
}

PAttachment_PChannelInAttachment_PActivitiesInChannel::~PAttachment_PChannelInAttachment_PActivitiesInChannel() {
  // @@protoc_insertion_point(destructor:kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel)
  SharedDtor();
}

void PAttachment_PChannelInAttachment_PActivitiesInChannel::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_;
}

void PAttachment_PChannelInAttachment_PActivitiesInChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PAttachment_PChannelInAttachment_PActivitiesInChannel& PAttachment_PChannelInAttachment_PActivitiesInChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PAttachment_PChannelInAttachment_PActivitiesInChannel_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PAttachment_PChannelInAttachment_PActivitiesInChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(user_id_));
  _internal_metadata_.Clear();
}

const char* PAttachment_PChannelInAttachment_PActivitiesInChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 channel_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity user = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PAttachment_PChannelInAttachment_PActivitiesInChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 created_at = 2;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 3;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_updated_at(), target);
  }

  // string action = 4;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  // string content = 5;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.content");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_content(), target);
  }

  // uint32 channel_id = 6;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_channel_id(), target);
  }

  // uint32 user_id = 7;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_user_id(), target);
  }

  // .kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity user = 8;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel)
  return target;
}

size_t PAttachment_PChannelInAttachment_PActivitiesInChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action = 4;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // string content = 5;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // .kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel.PUserInActivity user = 8;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 created_at = 2;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 3;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 channel_id = 6;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel_id());
  }

  // uint32 user_id = 7;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PAttachment_PChannelInAttachment_PActivitiesInChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const PAttachment_PChannelInAttachment_PActivitiesInChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PAttachment_PChannelInAttachment_PActivitiesInChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel)
    MergeFrom(*source);
  }
}

void PAttachment_PChannelInAttachment_PActivitiesInChannel::MergeFrom(const PAttachment_PChannelInAttachment_PActivitiesInChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_user()) {
    _internal_mutable_user()->::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity::MergeFrom(from._internal_user());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void PAttachment_PChannelInAttachment_PActivitiesInChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PAttachment_PChannelInAttachment_PActivitiesInChannel::CopyFrom(const PAttachment_PChannelInAttachment_PActivitiesInChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PAttachment_PChannelInAttachment_PActivitiesInChannel::IsInitialized() const {
  return true;
}

void PAttachment_PChannelInAttachment_PActivitiesInChannel::InternalSwap(PAttachment_PChannelInAttachment_PActivitiesInChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_, other->user_);
  swap(id_, other->id_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(channel_id_, other->channel_id_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PAttachment_PChannelInAttachment_PActivitiesInChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser::InitAsDefaultInstance() {
}
class PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser::_Internal {
 public:
};

PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser::PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.PActivitiesInUser)
}
PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser::PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser(const PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.PActivitiesInUser)
}

void PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser_proto_5fkandan_5flg_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(user_id_));
}

PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser::~PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser() {
  // @@protoc_insertion_point(destructor:kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.PActivitiesInUser)
  SharedDtor();
}

void PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser& PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.PActivitiesInUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(user_id_));
  _internal_metadata_.Clear();
}

const char* PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.PActivitiesInUser.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.PActivitiesInUser.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 channel_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.PActivitiesInUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 created_at = 2;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 3;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_updated_at(), target);
  }

  // string action = 4;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.PActivitiesInUser.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  // string content = 5;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.PActivitiesInUser.content");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_content(), target);
  }

  // uint32 channel_id = 6;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_channel_id(), target);
  }

  // uint32 user_id = 7;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.PActivitiesInUser)
  return target;
}

size_t PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.PActivitiesInUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action = 4;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // string content = 5;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 created_at = 2;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 3;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 channel_id = 6;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel_id());
  }

  // uint32 user_id = 7;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.PActivitiesInUser)
  GOOGLE_DCHECK_NE(&from, this);
  const PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.PActivitiesInUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.PActivitiesInUser)
    MergeFrom(*source);
  }
}

void PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser::MergeFrom(const PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.PActivitiesInUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.PActivitiesInUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser::CopyFrom(const PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.PActivitiesInUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser::IsInitialized() const {
  return true;
}

void PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser::InternalSwap(PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(channel_id_, other->channel_id_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PAttachment_PChannelInAttachment_PUserInChannel::InitAsDefaultInstance() {
}
class PAttachment_PChannelInAttachment_PUserInChannel::_Internal {
 public:
};

PAttachment_PChannelInAttachment_PUserInChannel::PAttachment_PChannelInAttachment_PUserInChannel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel)
}
PAttachment_PChannelInAttachment_PUserInChannel::PAttachment_PChannelInAttachment_PUserInChannel(const PAttachment_PChannelInAttachment_PUserInChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      activities_(from.activities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  encrypted_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encrypted_password().empty()) {
    encrypted_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encrypted_password_);
  }
  reset_password_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reset_password_token().empty()) {
    reset_password_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reset_password_token_);
  }
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_first_name().empty()) {
    first_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_name().empty()) {
    last_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_name_);
  }
  current_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_current_sign_in_ip().empty()) {
    current_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.current_sign_in_ip_);
  }
  last_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_sign_in_ip().empty()) {
    last_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_sign_in_ip_);
  }
  auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth_token().empty()) {
    auth_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_token_);
  }
  locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_locale().empty()) {
    locale_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locale_);
  }
  gravatar_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gravatar_hash().empty()) {
    gravatar_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gravatar_hash_);
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  regstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_regstatus().empty()) {
    regstatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regstatus_);
  }
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_url().empty()) {
    avatar_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&updated_at_) -
    reinterpret_cast<char*>(&id_)) + sizeof(updated_at_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel)
}

void PAttachment_PChannelInAttachment_PUserInChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PAttachment_PChannelInAttachment_PUserInChannel_proto_5fkandan_5flg_2eproto.base);
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_password_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gravatar_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updated_at_) -
      reinterpret_cast<char*>(&id_)) + sizeof(updated_at_));
}

PAttachment_PChannelInAttachment_PUserInChannel::~PAttachment_PChannelInAttachment_PUserInChannel() {
  // @@protoc_insertion_point(destructor:kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel)
  SharedDtor();
}

void PAttachment_PChannelInAttachment_PUserInChannel::SharedDtor() {
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_password_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gravatar_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regstatus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PAttachment_PChannelInAttachment_PUserInChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PAttachment_PChannelInAttachment_PUserInChannel& PAttachment_PChannelInAttachment_PUserInChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PAttachment_PChannelInAttachment_PUserInChannel_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PAttachment_PChannelInAttachment_PUserInChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activities_.Clear();
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reset_password_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_sign_in_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sign_in_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gravatar_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regstatus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&updated_at_) -
      reinterpret_cast<char*>(&id_)) + sizeof(updated_at_));
  _internal_metadata_.Clear();
}

const char* PAttachment_PChannelInAttachment_PUserInChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string encrypted_password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_encrypted_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.encrypted_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reset_password_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reset_password_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.reset_password_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 reset_password_sent_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          reset_password_sent_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 remember_created_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          remember_created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string first_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_first_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.first_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_last_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.last_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 signin_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          signin_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 current_sign_in_at = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          current_sign_in_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string current_sign_in_ip = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_current_sign_in_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.current_sign_in_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 last_sign_in_at = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          last_sign_in_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_sign_in_ip = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_last_sign_in_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.last_sign_in_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string auth_token = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_auth_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.auth_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string locale = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_locale();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.locale"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gravatar_hash = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_gravatar_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.gravatar_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string regstatus = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_regstatus();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.regstatus"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool active = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_admin = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          is_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar_url = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.avatar_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.PActivitiesInUser activities = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_activities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PAttachment_PChannelInAttachment_PUserInChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string email = 2;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // string encrypted_password = 3;
  if (this->encrypted_password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encrypted_password().data(), static_cast<int>(this->_internal_encrypted_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.encrypted_password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_encrypted_password(), target);
  }

  // string reset_password_token = 4;
  if (this->reset_password_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reset_password_token().data(), static_cast<int>(this->_internal_reset_password_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.reset_password_token");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reset_password_token(), target);
  }

  // uint32 reset_password_sent_at = 5;
  if (this->reset_password_sent_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_reset_password_sent_at(), target);
  }

  // uint32 remember_created_at = 6;
  if (this->remember_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_remember_created_at(), target);
  }

  // string first_name = 7;
  if (this->first_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_name().data(), static_cast<int>(this->_internal_first_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.first_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_first_name(), target);
  }

  // string last_name = 8;
  if (this->last_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_name().data(), static_cast<int>(this->_internal_last_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.last_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_last_name(), target);
  }

  // uint32 signin_count = 9;
  if (this->signin_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_signin_count(), target);
  }

  // uint32 current_sign_in_at = 10;
  if (this->current_sign_in_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_current_sign_in_at(), target);
  }

  // string current_sign_in_ip = 11;
  if (this->current_sign_in_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_sign_in_ip().data(), static_cast<int>(this->_internal_current_sign_in_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.current_sign_in_ip");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_current_sign_in_ip(), target);
  }

  // uint32 last_sign_in_at = 12;
  if (this->last_sign_in_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_last_sign_in_at(), target);
  }

  // string last_sign_in_ip = 13;
  if (this->last_sign_in_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_sign_in_ip().data(), static_cast<int>(this->_internal_last_sign_in_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.last_sign_in_ip");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_last_sign_in_ip(), target);
  }

  // string auth_token = 14;
  if (this->auth_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_token().data(), static_cast<int>(this->_internal_auth_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.auth_token");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_auth_token(), target);
  }

  // string locale = 15;
  if (this->locale().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_locale().data(), static_cast<int>(this->_internal_locale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.locale");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_locale(), target);
  }

  // string gravatar_hash = 16;
  if (this->gravatar_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gravatar_hash().data(), static_cast<int>(this->_internal_gravatar_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.gravatar_hash");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_gravatar_hash(), target);
  }

  // string username = 17;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.username");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_username(), target);
  }

  // string regstatus = 18;
  if (this->regstatus().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_regstatus().data(), static_cast<int>(this->_internal_regstatus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.regstatus");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_regstatus(), target);
  }

  // bool active = 19;
  if (this->active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_active(), target);
  }

  // bool is_admin = 20;
  if (this->is_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_is_admin(), target);
  }

  // string avatar_url = 21;
  if (this->avatar_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.avatar_url");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_avatar_url(), target);
  }

  // uint32 created_at = 22;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 23;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_updated_at(), target);
  }

  // repeated .kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.PActivitiesInUser activities = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_activities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_activities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel)
  return target;
}

size_t PAttachment_PChannelInAttachment_PUserInChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel.PActivitiesInUser activities = 24;
  total_size += 2UL * this->_internal_activities_size();
  for (const auto& msg : this->activities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string email = 2;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string encrypted_password = 3;
  if (this->encrypted_password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encrypted_password());
  }

  // string reset_password_token = 4;
  if (this->reset_password_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reset_password_token());
  }

  // string first_name = 7;
  if (this->first_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_name());
  }

  // string last_name = 8;
  if (this->last_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_name());
  }

  // string current_sign_in_ip = 11;
  if (this->current_sign_in_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_sign_in_ip());
  }

  // string last_sign_in_ip = 13;
  if (this->last_sign_in_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_sign_in_ip());
  }

  // string auth_token = 14;
  if (this->auth_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_token());
  }

  // string locale = 15;
  if (this->locale().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locale());
  }

  // string gravatar_hash = 16;
  if (this->gravatar_hash().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gravatar_hash());
  }

  // string username = 17;
  if (this->username().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string regstatus = 18;
  if (this->regstatus().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regstatus());
  }

  // string avatar_url = 21;
  if (this->avatar_url().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar_url());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 reset_password_sent_at = 5;
  if (this->reset_password_sent_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reset_password_sent_at());
  }

  // uint32 remember_created_at = 6;
  if (this->remember_created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_remember_created_at());
  }

  // uint32 signin_count = 9;
  if (this->signin_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_signin_count());
  }

  // uint32 current_sign_in_at = 10;
  if (this->current_sign_in_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_current_sign_in_at());
  }

  // uint32 last_sign_in_at = 12;
  if (this->last_sign_in_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_sign_in_at());
  }

  // bool active = 19;
  if (this->active() != 0) {
    total_size += 2 + 1;
  }

  // bool is_admin = 20;
  if (this->is_admin() != 0) {
    total_size += 2 + 1;
  }

  // uint32 created_at = 22;
  if (this->created_at() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 23;
  if (this->updated_at() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PAttachment_PChannelInAttachment_PUserInChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const PAttachment_PChannelInAttachment_PUserInChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PAttachment_PChannelInAttachment_PUserInChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel)
    MergeFrom(*source);
  }
}

void PAttachment_PChannelInAttachment_PUserInChannel::MergeFrom(const PAttachment_PChannelInAttachment_PUserInChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  activities_.MergeFrom(from.activities_);
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.encrypted_password().size() > 0) {

    encrypted_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encrypted_password_);
  }
  if (from.reset_password_token().size() > 0) {

    reset_password_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reset_password_token_);
  }
  if (from.first_name().size() > 0) {

    first_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  if (from.last_name().size() > 0) {

    last_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_name_);
  }
  if (from.current_sign_in_ip().size() > 0) {

    current_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.current_sign_in_ip_);
  }
  if (from.last_sign_in_ip().size() > 0) {

    last_sign_in_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_sign_in_ip_);
  }
  if (from.auth_token().size() > 0) {

    auth_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_token_);
  }
  if (from.locale().size() > 0) {

    locale_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locale_);
  }
  if (from.gravatar_hash().size() > 0) {

    gravatar_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gravatar_hash_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.regstatus().size() > 0) {

    regstatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regstatus_);
  }
  if (from.avatar_url().size() > 0) {

    avatar_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.reset_password_sent_at() != 0) {
    _internal_set_reset_password_sent_at(from._internal_reset_password_sent_at());
  }
  if (from.remember_created_at() != 0) {
    _internal_set_remember_created_at(from._internal_remember_created_at());
  }
  if (from.signin_count() != 0) {
    _internal_set_signin_count(from._internal_signin_count());
  }
  if (from.current_sign_in_at() != 0) {
    _internal_set_current_sign_in_at(from._internal_current_sign_in_at());
  }
  if (from.last_sign_in_at() != 0) {
    _internal_set_last_sign_in_at(from._internal_last_sign_in_at());
  }
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
  if (from.is_admin() != 0) {
    _internal_set_is_admin(from._internal_is_admin());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
}

void PAttachment_PChannelInAttachment_PUserInChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PAttachment_PChannelInAttachment_PUserInChannel::CopyFrom(const PAttachment_PChannelInAttachment_PUserInChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PAttachment_PChannelInAttachment_PUserInChannel::IsInitialized() const {
  return true;
}

void PAttachment_PChannelInAttachment_PUserInChannel::InternalSwap(PAttachment_PChannelInAttachment_PUserInChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  activities_.InternalSwap(&other->activities_);
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  encrypted_password_.Swap(&other->encrypted_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reset_password_token_.Swap(&other->reset_password_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  first_name_.Swap(&other->first_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_name_.Swap(&other->last_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  current_sign_in_ip_.Swap(&other->current_sign_in_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_sign_in_ip_.Swap(&other->last_sign_in_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  auth_token_.Swap(&other->auth_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  locale_.Swap(&other->locale_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gravatar_hash_.Swap(&other->gravatar_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  regstatus_.Swap(&other->regstatus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatar_url_.Swap(&other->avatar_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(reset_password_sent_at_, other->reset_password_sent_at_);
  swap(remember_created_at_, other->remember_created_at_);
  swap(signin_count_, other->signin_count_);
  swap(current_sign_in_at_, other->current_sign_in_at_);
  swap(last_sign_in_at_, other->last_sign_in_at_);
  swap(active_, other->active_);
  swap(is_admin_, other->is_admin_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PAttachment_PChannelInAttachment_PUserInChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PAttachment_PChannelInAttachment::InitAsDefaultInstance() {
  ::kandan_lg::_PAttachment_PChannelInAttachment_default_instance_._instance.get_mutable()->user_ = const_cast< ::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel*>(
      ::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel::internal_default_instance());
}
class PAttachment_PChannelInAttachment::_Internal {
 public:
  static const ::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel& user(const PAttachment_PChannelInAttachment* msg);
};

const ::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel&
PAttachment_PChannelInAttachment::_Internal::user(const PAttachment_PChannelInAttachment* msg) {
  return *msg->user_;
}
PAttachment_PChannelInAttachment::PAttachment_PChannelInAttachment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PAttachment.PChannelInAttachment)
}
PAttachment_PChannelInAttachment::PAttachment_PChannelInAttachment(const PAttachment_PChannelInAttachment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      activities_(from.activities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_user()) {
    user_ = new ::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel(*from.user_);
  } else {
    user_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&id_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PAttachment.PChannelInAttachment)
}

void PAttachment_PChannelInAttachment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PAttachment_PChannelInAttachment_proto_5fkandan_5flg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&user_)) + sizeof(count_));
}

PAttachment_PChannelInAttachment::~PAttachment_PChannelInAttachment() {
  // @@protoc_insertion_point(destructor:kandan_lg.PAttachment.PChannelInAttachment)
  SharedDtor();
}

void PAttachment_PChannelInAttachment::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_;
}

void PAttachment_PChannelInAttachment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PAttachment_PChannelInAttachment& PAttachment_PChannelInAttachment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PAttachment_PChannelInAttachment_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PAttachment_PChannelInAttachment::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PAttachment.PChannelInAttachment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activities_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&id_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

const char* PAttachment_PChannelInAttachment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.PChannelInAttachment.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel activities = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_activities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel user = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PAttachment_PChannelInAttachment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PAttachment.PChannelInAttachment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.PChannelInAttachment.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 created_at = 3;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 4;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_updated_at(), target);
  }

  // uint32 user_id = 5;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_user_id(), target);
  }

  // uint32 count = 6;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_count(), target);
  }

  // repeated .kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel activities = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_activities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_activities(i), target, stream);
  }

  // .kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel user = 8;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PAttachment.PChannelInAttachment)
  return target;
}

size_t PAttachment_PChannelInAttachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PAttachment.PChannelInAttachment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kandan_lg.PAttachment.PChannelInAttachment.PActivitiesInChannel activities = 7;
  total_size += 1UL * this->_internal_activities_size();
  for (const auto& msg : this->activities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .kandan_lg.PAttachment.PChannelInAttachment.PUserInChannel user = 8;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 created_at = 3;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 4;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 user_id = 5;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  // uint32 count = 6;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PAttachment_PChannelInAttachment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PAttachment.PChannelInAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  const PAttachment_PChannelInAttachment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PAttachment_PChannelInAttachment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PAttachment.PChannelInAttachment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PAttachment.PChannelInAttachment)
    MergeFrom(*source);
  }
}

void PAttachment_PChannelInAttachment::MergeFrom(const PAttachment_PChannelInAttachment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PAttachment.PChannelInAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  activities_.MergeFrom(from.activities_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_user()) {
    _internal_mutable_user()->::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel::MergeFrom(from._internal_user());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void PAttachment_PChannelInAttachment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PAttachment.PChannelInAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PAttachment_PChannelInAttachment::CopyFrom(const PAttachment_PChannelInAttachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PAttachment.PChannelInAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PAttachment_PChannelInAttachment::IsInitialized() const {
  return true;
}

void PAttachment_PChannelInAttachment::InternalSwap(PAttachment_PChannelInAttachment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  activities_.InternalSwap(&other->activities_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_, other->user_);
  swap(id_, other->id_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(user_id_, other->user_id_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PAttachment_PChannelInAttachment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PAttachment::InitAsDefaultInstance() {
  ::kandan_lg::_PAttachment_default_instance_._instance.get_mutable()->user_ = const_cast< ::kandan_lg::PAttachment_PUserInAttachment*>(
      ::kandan_lg::PAttachment_PUserInAttachment::internal_default_instance());
  ::kandan_lg::_PAttachment_default_instance_._instance.get_mutable()->channel_ = const_cast< ::kandan_lg::PAttachment_PChannelInAttachment*>(
      ::kandan_lg::PAttachment_PChannelInAttachment::internal_default_instance());
}
class PAttachment::_Internal {
 public:
  static const ::kandan_lg::PAttachment_PUserInAttachment& user(const PAttachment* msg);
  static const ::kandan_lg::PAttachment_PChannelInAttachment& channel(const PAttachment* msg);
};

const ::kandan_lg::PAttachment_PUserInAttachment&
PAttachment::_Internal::user(const PAttachment* msg) {
  return *msg->user_;
}
const ::kandan_lg::PAttachment_PChannelInAttachment&
PAttachment::_Internal::channel(const PAttachment* msg) {
  return *msg->channel_;
}
PAttachment::PAttachment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PAttachment)
}
PAttachment::PAttachment(const PAttachment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_file_name().empty()) {
    file_file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_file_name_);
  }
  file_content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_content_type().empty()) {
    file_content_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_content_type_);
  }
  if (from._internal_has_user()) {
    user_ = new ::kandan_lg::PAttachment_PUserInAttachment(*from.user_);
  } else {
    user_ = nullptr;
  }
  if (from._internal_has_channel()) {
    channel_ = new ::kandan_lg::PAttachment_PChannelInAttachment(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(channel_id_));
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PAttachment)
}

void PAttachment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PAttachment_proto_5fkandan_5flg_2eproto.base);
  file_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&user_)) + sizeof(channel_id_));
}

PAttachment::~PAttachment() {
  // @@protoc_insertion_point(destructor:kandan_lg.PAttachment)
  SharedDtor();
}

void PAttachment::SharedDtor() {
  file_file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete channel_;
}

void PAttachment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PAttachment& PAttachment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PAttachment_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PAttachment::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PAttachment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_content_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(channel_id_));
  _internal_metadata_.Clear();
}

const char* PAttachment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_file_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.file_file_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_content_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_file_content_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kandan_lg.PAttachment.file_content_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_file_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          file_file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 message_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_updated_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          file_updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 created_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 channel_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kandan_lg.PAttachment.PUserInAttachment user = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kandan_lg.PAttachment.PChannelInAttachment channel = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PAttachment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PAttachment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string file_file_name = 2;
  if (this->file_file_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_file_name().data(), static_cast<int>(this->_internal_file_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.file_file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_file_name(), target);
  }

  // string file_content_type = 3;
  if (this->file_content_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_content_type().data(), static_cast<int>(this->_internal_file_content_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kandan_lg.PAttachment.file_content_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_content_type(), target);
  }

  // uint32 file_file_size = 4;
  if (this->file_file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_file_file_size(), target);
  }

  // uint32 message_id = 5;
  if (this->message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_message_id(), target);
  }

  // uint32 file_updated_at = 6;
  if (this->file_updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_file_updated_at(), target);
  }

  // uint32 created_at = 7;
  if (this->created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_created_at(), target);
  }

  // uint32 updated_at = 8;
  if (this->updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_updated_at(), target);
  }

  // uint32 user_id = 9;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_user_id(), target);
  }

  // uint32 channel_id = 10;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_channel_id(), target);
  }

  // .kandan_lg.PAttachment.PUserInAttachment user = 11;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::user(this), target, stream);
  }

  // .kandan_lg.PAttachment.PChannelInAttachment channel = 12;
  if (this->has_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::channel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PAttachment)
  return target;
}

size_t PAttachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PAttachment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_file_name = 2;
  if (this->file_file_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_file_name());
  }

  // string file_content_type = 3;
  if (this->file_content_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_content_type());
  }

  // .kandan_lg.PAttachment.PUserInAttachment user = 11;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // .kandan_lg.PAttachment.PChannelInAttachment channel = 12;
  if (this->has_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 file_file_size = 4;
  if (this->file_file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_file_size());
  }

  // uint32 message_id = 5;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_message_id());
  }

  // uint32 file_updated_at = 6;
  if (this->file_updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_updated_at());
  }

  // uint32 created_at = 7;
  if (this->created_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_created_at());
  }

  // uint32 updated_at = 8;
  if (this->updated_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_at());
  }

  // uint32 user_id = 9;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  // uint32 channel_id = 10;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PAttachment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  const PAttachment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PAttachment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PAttachment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PAttachment)
    MergeFrom(*source);
  }
}

void PAttachment::MergeFrom(const PAttachment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_file_name().size() > 0) {

    file_file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_file_name_);
  }
  if (from.file_content_type().size() > 0) {

    file_content_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_content_type_);
  }
  if (from.has_user()) {
    _internal_mutable_user()->::kandan_lg::PAttachment_PUserInAttachment::MergeFrom(from._internal_user());
  }
  if (from.has_channel()) {
    _internal_mutable_channel()->::kandan_lg::PAttachment_PChannelInAttachment::MergeFrom(from._internal_channel());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.file_file_size() != 0) {
    _internal_set_file_file_size(from._internal_file_file_size());
  }
  if (from.message_id() != 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from.file_updated_at() != 0) {
    _internal_set_file_updated_at(from._internal_file_updated_at());
  }
  if (from.created_at() != 0) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (from.updated_at() != 0) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
}

void PAttachment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PAttachment::CopyFrom(const PAttachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PAttachment::IsInitialized() const {
  return true;
}

void PAttachment::InternalSwap(PAttachment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_file_name_.Swap(&other->file_file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_content_type_.Swap(&other->file_content_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_, other->user_);
  swap(channel_, other->channel_);
  swap(id_, other->id_);
  swap(file_file_size_, other->file_file_size_);
  swap(message_id_, other->message_id_);
  swap(file_updated_at_, other->file_updated_at_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(user_id_, other->user_id_);
  swap(channel_id_, other->channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PAttachment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PUserList::InitAsDefaultInstance() {
}
class PUserList::_Internal {
 public:
};

PUserList::PUserList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PUserList)
}
PUserList::PUserList(const PUserList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      user_(from.user_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PUserList)
}

void PUserList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PUserList_proto_5fkandan_5flg_2eproto.base);
}

PUserList::~PUserList() {
  // @@protoc_insertion_point(destructor:kandan_lg.PUserList)
  SharedDtor();
}

void PUserList::SharedDtor() {
}

void PUserList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PUserList& PUserList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PUserList_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PUserList::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PUserList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_.Clear();
  _internal_metadata_.Clear();
}

const char* PUserList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kandan_lg.PUser user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PUserList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PUserList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kandan_lg.PUser user = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_user_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_user(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PUserList)
  return target;
}

size_t PUserList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PUserList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kandan_lg.PUser user = 1;
  total_size += 1UL * this->_internal_user_size();
  for (const auto& msg : this->user_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PUserList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PUserList)
  GOOGLE_DCHECK_NE(&from, this);
  const PUserList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PUserList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PUserList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PUserList)
    MergeFrom(*source);
  }
}

void PUserList::MergeFrom(const PUserList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PUserList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_.MergeFrom(from.user_);
}

void PUserList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PUserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PUserList::CopyFrom(const PUserList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PUserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PUserList::IsInitialized() const {
  return true;
}

void PUserList::InternalSwap(PUserList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_.InternalSwap(&other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PUserList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PChannelList::InitAsDefaultInstance() {
}
class PChannelList::_Internal {
 public:
};

PChannelList::PChannelList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PChannelList)
}
PChannelList::PChannelList(const PChannelList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      channel_(from.channel_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PChannelList)
}

void PChannelList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PChannelList_proto_5fkandan_5flg_2eproto.base);
}

PChannelList::~PChannelList() {
  // @@protoc_insertion_point(destructor:kandan_lg.PChannelList)
  SharedDtor();
}

void PChannelList::SharedDtor() {
}

void PChannelList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PChannelList& PChannelList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PChannelList_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PChannelList::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PChannelList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_.Clear();
  _internal_metadata_.Clear();
}

const char* PChannelList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kandan_lg.PChannel channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channel(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PChannelList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PChannelList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kandan_lg.PChannel channel = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channel_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_channel(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PChannelList)
  return target;
}

size_t PChannelList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PChannelList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kandan_lg.PChannel channel = 1;
  total_size += 1UL * this->_internal_channel_size();
  for (const auto& msg : this->channel_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PChannelList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PChannelList)
  GOOGLE_DCHECK_NE(&from, this);
  const PChannelList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PChannelList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PChannelList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PChannelList)
    MergeFrom(*source);
  }
}

void PChannelList::MergeFrom(const PChannelList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PChannelList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_.MergeFrom(from.channel_);
}

void PChannelList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PChannelList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PChannelList::CopyFrom(const PChannelList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PChannelList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PChannelList::IsInitialized() const {
  return true;
}

void PChannelList::InternalSwap(PChannelList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channel_.InternalSwap(&other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PChannelList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PActivityList::InitAsDefaultInstance() {
}
class PActivityList::_Internal {
 public:
};

PActivityList::PActivityList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PActivityList)
}
PActivityList::PActivityList(const PActivityList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      activity_(from.activity_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PActivityList)
}

void PActivityList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PActivityList_proto_5fkandan_5flg_2eproto.base);
}

PActivityList::~PActivityList() {
  // @@protoc_insertion_point(destructor:kandan_lg.PActivityList)
  SharedDtor();
}

void PActivityList::SharedDtor() {
}

void PActivityList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PActivityList& PActivityList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PActivityList_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PActivityList::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PActivityList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activity_.Clear();
  _internal_metadata_.Clear();
}

const char* PActivityList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kandan_lg.PActivity activity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_activity(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PActivityList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PActivityList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kandan_lg.PActivity activity = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_activity_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_activity(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PActivityList)
  return target;
}

size_t PActivityList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PActivityList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kandan_lg.PActivity activity = 1;
  total_size += 1UL * this->_internal_activity_size();
  for (const auto& msg : this->activity_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PActivityList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PActivityList)
  GOOGLE_DCHECK_NE(&from, this);
  const PActivityList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PActivityList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PActivityList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PActivityList)
    MergeFrom(*source);
  }
}

void PActivityList::MergeFrom(const PActivityList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PActivityList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  activity_.MergeFrom(from.activity_);
}

void PActivityList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PActivityList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PActivityList::CopyFrom(const PActivityList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PActivityList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PActivityList::IsInitialized() const {
  return true;
}

void PActivityList::InternalSwap(PActivityList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  activity_.InternalSwap(&other->activity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PActivityList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PAttachmentList::InitAsDefaultInstance() {
}
class PAttachmentList::_Internal {
 public:
};

PAttachmentList::PAttachmentList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.PAttachmentList)
}
PAttachmentList::PAttachmentList(const PAttachmentList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      attachment_(from.attachment_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kandan_lg.PAttachmentList)
}

void PAttachmentList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PAttachmentList_proto_5fkandan_5flg_2eproto.base);
}

PAttachmentList::~PAttachmentList() {
  // @@protoc_insertion_point(destructor:kandan_lg.PAttachmentList)
  SharedDtor();
}

void PAttachmentList::SharedDtor() {
}

void PAttachmentList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PAttachmentList& PAttachmentList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PAttachmentList_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void PAttachmentList::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.PAttachmentList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attachment_.Clear();
  _internal_metadata_.Clear();
}

const char* PAttachmentList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kandan_lg.PAttachment attachment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attachment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PAttachmentList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.PAttachmentList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kandan_lg.PAttachment attachment = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attachment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_attachment(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.PAttachmentList)
  return target;
}

size_t PAttachmentList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.PAttachmentList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kandan_lg.PAttachment attachment = 1;
  total_size += 1UL * this->_internal_attachment_size();
  for (const auto& msg : this->attachment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PAttachmentList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.PAttachmentList)
  GOOGLE_DCHECK_NE(&from, this);
  const PAttachmentList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PAttachmentList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.PAttachmentList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.PAttachmentList)
    MergeFrom(*source);
  }
}

void PAttachmentList::MergeFrom(const PAttachmentList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.PAttachmentList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attachment_.MergeFrom(from.attachment_);
}

void PAttachmentList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.PAttachmentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PAttachmentList::CopyFrom(const PAttachmentList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.PAttachmentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PAttachmentList::IsInitialized() const {
  return true;
}

void PAttachmentList::InternalSwap(PAttachmentList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  attachment_.InternalSwap(&other->attachment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PAttachmentList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryParam::InitAsDefaultInstance() {
}
class QueryParam::_Internal {
 public:
};

QueryParam::QueryParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kandan_lg.QueryParam)
}
QueryParam::QueryParam(const QueryParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_id_ = from.query_id_;
  // @@protoc_insertion_point(copy_constructor:kandan_lg.QueryParam)
}

void QueryParam::SharedCtor() {
  query_id_ = 0u;
}

QueryParam::~QueryParam() {
  // @@protoc_insertion_point(destructor:kandan_lg.QueryParam)
  SharedDtor();
}

void QueryParam::SharedDtor() {
}

void QueryParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryParam& QueryParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryParam_proto_5fkandan_5flg_2eproto.base);
  return *internal_default_instance();
}


void QueryParam::Clear() {
// @@protoc_insertion_point(message_clear_start:kandan_lg.QueryParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* QueryParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 query_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          query_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kandan_lg.QueryParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 query_id = 1;
  if (this->query_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_query_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kandan_lg.QueryParam)
  return target;
}

size_t QueryParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kandan_lg.QueryParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 query_id = 1;
  if (this->query_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_query_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kandan_lg.QueryParam)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kandan_lg.QueryParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kandan_lg.QueryParam)
    MergeFrom(*source);
  }
}

void QueryParam::MergeFrom(const QueryParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kandan_lg.QueryParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.query_id() != 0) {
    _internal_set_query_id(from._internal_query_id());
  }
}

void QueryParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kandan_lg.QueryParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryParam::CopyFrom(const QueryParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kandan_lg.QueryParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryParam::IsInitialized() const {
  return true;
}

void QueryParam::InternalSwap(QueryParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(query_id_, other->query_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryParam::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace kandan_lg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kandan_lg::PUser_PChannelsInUser_PActivitiesInChannel* Arena::CreateMaybeMessage< ::kandan_lg::PUser_PChannelsInUser_PActivitiesInChannel >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PUser_PChannelsInUser_PActivitiesInChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PUser_PChannelsInUser_PAttachmentsInChannel* Arena::CreateMaybeMessage< ::kandan_lg::PUser_PChannelsInUser_PAttachmentsInChannel >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PUser_PChannelsInUser_PAttachmentsInChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PUser_PChannelsInUser* Arena::CreateMaybeMessage< ::kandan_lg::PUser_PChannelsInUser >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PUser_PChannelsInUser >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel* Arena::CreateMaybeMessage< ::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity_PAttachmentsInChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity* Arena::CreateMaybeMessage< ::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PUser_PActivitiesInUser_PChannelInActivity >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PUser_PActivitiesInUser* Arena::CreateMaybeMessage< ::kandan_lg::PUser_PActivitiesInUser >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PUser_PActivitiesInUser >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel* Arena::CreateMaybeMessage< ::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment_PActivitiesInChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment* Arena::CreateMaybeMessage< ::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PUser_PAttachmentsInUser_PChannelInAttachment >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PUser_PAttachmentsInUser* Arena::CreateMaybeMessage< ::kandan_lg::PUser_PAttachmentsInUser >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PUser_PAttachmentsInUser >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PUser* Arena::CreateMaybeMessage< ::kandan_lg::PUser >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PUser >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser* Arena::CreateMaybeMessage< ::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity_PAttachmentsInUser >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity* Arena::CreateMaybeMessage< ::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PChannel_PActivitiesInChannel_PUserInActivity >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PChannel_PActivitiesInChannel* Arena::CreateMaybeMessage< ::kandan_lg::PChannel_PActivitiesInChannel >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PChannel_PActivitiesInChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PChannel_PUserInChannel_PActivitiesInUser* Arena::CreateMaybeMessage< ::kandan_lg::PChannel_PUserInChannel_PActivitiesInUser >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PChannel_PUserInChannel_PActivitiesInUser >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PChannel_PUserInChannel_PAttachmentsInUser* Arena::CreateMaybeMessage< ::kandan_lg::PChannel_PUserInChannel_PAttachmentsInUser >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PChannel_PUserInChannel_PAttachmentsInUser >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PChannel_PUserInChannel* Arena::CreateMaybeMessage< ::kandan_lg::PChannel_PUserInChannel >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PChannel_PUserInChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser* Arena::CreateMaybeMessage< ::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment_PActivitiesInUser >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment* Arena::CreateMaybeMessage< ::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PChannel_PAttachmentsInChannel_PUserInAttachment >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PChannel_PAttachmentsInChannel* Arena::CreateMaybeMessage< ::kandan_lg::PChannel_PAttachmentsInChannel >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PChannel_PAttachmentsInChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PChannel* Arena::CreateMaybeMessage< ::kandan_lg::PChannel >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser* Arena::CreateMaybeMessage< ::kandan_lg::PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PActivity_PChannelInActivity_PUserInChannel_PAttachmentsInUser >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PActivity_PChannelInActivity_PUserInChannel* Arena::CreateMaybeMessage< ::kandan_lg::PActivity_PChannelInActivity_PUserInChannel >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PActivity_PChannelInActivity_PUserInChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment* Arena::CreateMaybeMessage< ::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel_PUserInAttachment >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel* Arena::CreateMaybeMessage< ::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PActivity_PChannelInActivity_PAttachmentsInChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PActivity_PChannelInActivity* Arena::CreateMaybeMessage< ::kandan_lg::PActivity_PChannelInActivity >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PActivity_PChannelInActivity >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel* Arena::CreateMaybeMessage< ::kandan_lg::PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PActivity_PUserInActivity_PChannelsInUser_PAttachmentsInChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PActivity_PUserInActivity_PChannelsInUser* Arena::CreateMaybeMessage< ::kandan_lg::PActivity_PUserInActivity_PChannelsInUser >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PActivity_PUserInActivity_PChannelsInUser >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment* Arena::CreateMaybeMessage< ::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser_PChannelInAttachment >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser* Arena::CreateMaybeMessage< ::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PActivity_PUserInActivity_PAttachmentsInUser >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PActivity_PUserInActivity* Arena::CreateMaybeMessage< ::kandan_lg::PActivity_PUserInActivity >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PActivity_PUserInActivity >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PActivity* Arena::CreateMaybeMessage< ::kandan_lg::PActivity >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PActivity >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel* Arena::CreateMaybeMessage< ::kandan_lg::PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PAttachment_PUserInAttachment_PChannelsInUser_PActivitiesInChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PAttachment_PUserInAttachment_PChannelsInUser* Arena::CreateMaybeMessage< ::kandan_lg::PAttachment_PUserInAttachment_PChannelsInUser >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PAttachment_PUserInAttachment_PChannelsInUser >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity* Arena::CreateMaybeMessage< ::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser_PChannelInActivity >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser* Arena::CreateMaybeMessage< ::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PAttachment_PUserInAttachment_PActivitiesInUser >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PAttachment_PUserInAttachment* Arena::CreateMaybeMessage< ::kandan_lg::PAttachment_PUserInAttachment >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PAttachment_PUserInAttachment >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity* Arena::CreateMaybeMessage< ::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel_PUserInActivity >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel* Arena::CreateMaybeMessage< ::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PAttachment_PChannelInAttachment_PActivitiesInChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser* Arena::CreateMaybeMessage< ::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel_PActivitiesInUser >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel* Arena::CreateMaybeMessage< ::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PAttachment_PChannelInAttachment_PUserInChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PAttachment_PChannelInAttachment* Arena::CreateMaybeMessage< ::kandan_lg::PAttachment_PChannelInAttachment >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PAttachment_PChannelInAttachment >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PAttachment* Arena::CreateMaybeMessage< ::kandan_lg::PAttachment >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PAttachment >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PUserList* Arena::CreateMaybeMessage< ::kandan_lg::PUserList >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PUserList >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PChannelList* Arena::CreateMaybeMessage< ::kandan_lg::PChannelList >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PChannelList >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PActivityList* Arena::CreateMaybeMessage< ::kandan_lg::PActivityList >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PActivityList >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::PAttachmentList* Arena::CreateMaybeMessage< ::kandan_lg::PAttachmentList >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::PAttachmentList >(arena);
}
template<> PROTOBUF_NOINLINE ::kandan_lg::QueryParam* Arena::CreateMaybeMessage< ::kandan_lg::QueryParam >(Arena* arena) {
  return Arena::CreateInternal< ::kandan_lg::QueryParam >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
