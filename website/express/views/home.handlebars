{{#section 'head'}}
<style>
html {
    font-family: Arial, sans-serif;
}
svg * {
  transition: transform 0.8s cubic-bezier(0.47, 0, 0.745, 0.715);
}
svg rect {
  transition:
    transform 0.8s cubic-bezier(0.47, 0, 0.745, 0.715),
    width 0.8s cubic-bezier(0.47, 0, 0.745, 0.715),
    height 0.8s cubic-bezier(0.47, 0, 0.745, 0.715);
}
</style>
{{/section}}

<h1>Chestnut</h1>

<svg width="1280" height="720"></svg>

<script src="/static/hsluv-0.0.3.min.js"></script>
<script type="text/javascript">
  const xmlns = "http://www.w3.org/2000/svg";
</script>
<script src="/static/json.js"></script>

<script src="/static/util.js"></script>
<script src="/static/colors.js"></script>
{{!-- <script src="/static/layout.js"></script>
<script src="/static/model.js"></script> --}}
<script src="/static/visualize.js"></script>
{{!-- <script type="text/javascript">
  main();
</script> --}}
<script type="text/javascript">
  const svg = document.getElementsByTagName('svg')[0];
  fetch('/data')
    .then(res => res.json())
    .then(async (data) => {

      const allTableVis = [];
      for (const [ table, { header, rows } ] of Object.entries(data)) {
        const idIndex = header.indexOf('id');
        const color = getColorFromTable(table);

        const allRecordVis = [];
        for (const row of rows) {
          const recordVis = new VisRecord(row[idIndex], color, { table, row });
          recordVis.attach(svg);
          allRecordVis.push(recordVis);
        }

        const tableVis = new VisStack(allRecordVis);
        allTableVis.push(tableVis);
      }

      const diskVis = new VisStack(allTableVis, true, 20);

      const bigBox = new VisBox(diskVis, undefined, 25);
      bigBox.attach(svg);
      //const diag = new ChestnutModel(JSON_MODEL, data);
      //diag.draw(svg, { x: 100, y: 100 }, { state: 0 });
      //return promiseDelay(500);
    })
    //.then(() => {
    //  Record.moveAllToSavedPos();
    //});
</script>
